void _init()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO rax Top
// Preserved: rsp
_init_entry:
l00000000000005A0:
	branch __gmon_start__ == 0x0000000000000000 l00000000000005B2
l00000000000005B0:
	call __gmon_start__ (retsize: 8;)
l00000000000005B2:
	return
_init_exit:


void _start(word64 rdx, word64 qwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdx:[0..63] Stack +0000:[0..63]
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
_start_exit:
_start_entry:
l0000000000000620:
	__align(fp + 8)
	__libc_start_main(0x0000000000000898, qwArg00, fp + 8, 0x0000000000000A70, 0x0000000000000AE0, rdx, fp)
	__hlt()


void deregister_tm_clones()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO rax rdi Top
// Preserved: rbp rsp
deregister_tm_clones_entry:
l0000000000000650:
	branch 0x0000000000201048 == 0x0000000000201048 l0000000000000680
l0000000000000667:
	branch _ITM_deregisterTMCloneTable == 0x0000000000000000 l0000000000000680
l0000000000000680:
	return
l0000000000000673:
	call _ITM_deregisterTMCloneTable (retsize: 8;)
	return
deregister_tm_clones_exit:


void register_tm_clones()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO rax rdi rsi Top
// Preserved: rbp rsp
register_tm_clones_entry:
l0000000000000690:
	word64 rsi_9 = 0x0000000000201048 - 0x0000000000201048
	branch (rsi_9 >> 0x0000000000000003) + ((rsi_9 >> 0x0000000000000003) >>u 0x000000000000003F) >> 0x0000000000000001 == 0x0000000000000000 l00000000000006D0
l00000000000006B8:
	branch _ITM_registerTMCloneTable == 0x0000000000000000 l00000000000006D0
l00000000000006D0:
	return
l00000000000006C4:
	call _ITM_registerTMCloneTable (retsize: 8;)
	return
register_tm_clones_exit:


void __do_global_dtors_aux()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO rax rdi Top
// Preserved: rbp rsp
__do_global_dtors_aux_entry:
l00000000000006E0:
	branch Mem0[0x0000000000201048:byte] != 0x00 l0000000000000718
l0000000000000718:
	return
l00000000000006E9:
	branch __cxa_finalize == 0x0000000000000000 l0000000000000703
l00000000000006F7:
	word64 rax_27
	call __cxa_finalize (retsize: 8;)
		uses: rax:rax_27,rdi:Mem10[0x0000000000201040:word64]
		defs: rax:rax_27
l0000000000000703:
	deregister_tm_clones()
	Mem22[0x0000000000201048:byte] = 0x01
	return
__do_global_dtors_aux_exit:


void frame_dummy()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO rax rdi rsi Top
// Preserved: rbp rsp
frame_dummy_entry:
l0000000000000720:
l0000000000000725_thunk_register_tm_clones:
	register_tm_clones()
	return
frame_dummy_exit:


word64 _mm_malloc(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi:[0..63] rsi:[0..63]
// LiveOut: rax
// Trashed: SCZO rax rdi Top
// Preserved: rbp rcx rdi rdx rsi rsp
_mm_malloc_entry:
l000000000000072A:
	word64 rax_42
	word64 qwLoc28_54 = rsi
	branch rsi != 0x0000000000000001 l000000000000074F
l000000000000074F:
	branch rsi == 0x0000000000000002 l000000000000075D
l0000000000000756:
	branch rsi != 0x0000000000000004 l0000000000000765
l000000000000075D:
	qwLoc28_54 = 0x0000000000000008
l0000000000000765:
	word64 rax_34
	call posix_memalign (retsize: 8;)
		uses: rax:fp - 0x0000000000000010,rcx:qwLoc28_58,rdi:fp - 0x0000000000000010,rdx:rdi,rsi:qwLoc28_58,Stack +0020:qwLoc10
		defs: rax:rax_34
	branch SLICE(rax_34, word32, 0) != 0x00000000 l0000000000000786
l0000000000000786:
	rax_42 = 0x0000000000000000
l0000000000000780:
	rax_42 = qwLoc10
l0000000000000741:
	rax_42 = malloc(rdi)
l000000000000078B:
	return rax_42
_mm_malloc_exit:


void _mm_free(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi:[0..63]
// LiveOut:
// Trashed: SCZO rax Top
// Preserved: rbp rdi rsp
_mm_free_entry:
l000000000000078D:
	free(rdi)
	return
_mm_free_exit:


void vec_add(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi:[0..63]
// LiveOut:
// Trashed: SCZO r10 rax rcx rdx Top
// Preserved: rbp rsp
vec_add_entry:
l00000000000007A8:
	__align(fp)
	word64 rax_30 = (uint64) ((uint128) (uint64) rdi /u Mem23[0x0000000000000B00:word64])
l0000000000000881:
	branch rax_30 >u 0x0000000000000000 l0000000000000820
l0000000000000820:
l000000000000088B:
	return
vec_add_exit:


void main(word128 xmm0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  xmm0:[0..127]
// LiveOut:
// Trashed: SCZO r10 rax rcx rdi rdx rsi Top xmm0
// Preserved: rbp rsp
main_entry:
l0000000000000898:
	word64 rax_15 = _mm_malloc(0x0000000000000020, 0x0000000000002000)
	word64 rax_27 = _mm_malloc(0x0000000000000020, 0x0000000000002000)
	word64 rax_39 = _mm_malloc(0x0000000000000020, 0x0000000000002000)
	word64 qwLoc10_199 = 0x0000000000000000
l000000000000093F:
	branch qwLoc10_199 <u 0x0000000000000400 l00000000000008FD
l00000000000008FD:
	word64 rcx_55 = qwLoc10_199 * 0x0000000000000008 + rax_15
	word32 eax_62 = SLICE(qwLoc10_199, word32, 0)
	branch qwLoc10_199 < 0x0000000000000000 l0000000000000921
l0000000000000921:
	real64 v26_67 = (real64) (qwLoc10_199 >>u 0x0000000000000001 | (uint64) (eax_62 & 0x00000001))
	xmm0 = DPB(xmm0, v26_67 + v26_67, 0)
l000000000000091A:
	xmm0 = DPB(xmm0, (real64) qwLoc10_199, 0)
l0000000000000936:
	Mem76[rcx_55:real64] = (real64) xmm0
	qwLoc10_199 = qwLoc10_199 + 0x0000000000000001
l0000000000000949:
	word64 qwLoc18_205 = 0x0000000000000000
l0000000000000998:
	branch qwLoc18_205 <u 0x0000000000000400 l0000000000000953
l0000000000000953:
	word32 eax_98 = SLICE(qwLoc18_205 + 0x0000000000000001, word32, 0)
	word64 rcx_92 = qwLoc18_205 * 0x0000000000000008 + rax_27
	branch qwLoc18_205 < 0x0000000000000001 l000000000000097A
l000000000000097A:
	real64 v19_103 = (real64) (qwLoc18_205 + 0x0000000000000001 >>u 0x0000000000000001 | (uint64) (eax_98 & 0x00000001))
	xmm0 = DPB(xmm0, v19_103 + v19_103, 0)
l0000000000000973:
	xmm0 = DPB(xmm0, (real64) (qwLoc18_205 + 0x0000000000000001), 0)
l000000000000098F:
	Mem112[rcx_92:real64] = (real64) xmm0
	qwLoc18_205 = qwLoc18_205 + 0x0000000000000001
l00000000000009A2:
	word64 qwLoc20_211 = 0x0000000000000000
l00000000000009CC:
	branch qwLoc20_211 <u 0x0000000000000400 l00000000000009AC
l00000000000009AC:
	xmm0 = __xorpd(xmm0, xmm0)
	Mem131[rax_39 + qwLoc20_211 * 0x0000000000000008:real64] = (real64) xmm0
	qwLoc20_211 = qwLoc20_211 + 0x0000000000000001
l00000000000009D6:
	vec_add(0x0000000000000400)
	word64 qwLoc28_220 = 0x0000000000000000
l0000000000000A2D:
	branch qwLoc28_220 <u 0x0000000000000400 l00000000000009F8
l00000000000009F8:
	printf(0x0000000000000AF8, 0x00000000)
	qwLoc28_220 = qwLoc28_220 + 0x0000000000000001
l0000000000000A37:
	_mm_free(rax_15)
	_mm_free(rax_27)
	_mm_free(rax_39)
	return
main_exit:


void __libc_csu_init(word64 rdx, word64 rsi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi:[0..31] rdx:[0..63] rsi:[0..63]
// LiveOut:
// Trashed: SCZO rax rdi rdx rsi Top
// Preserved: r12 r13 r14 r15 rbp rbx rsp
__libc_csu_init_entry:
	word32 edi = SLICE(rdi, word32, 0)
l0000000000000A70:
	_init()
	word32 r15d_84 = SLICE((uint64) edi, word32, 0)
	word64 rbp_30 = 0x0000000000200DF0 - 0x0000000000200DE8
	branch rbp_30 >> 0x0000000000000003 == 0x0000000000000000 l0000000000000AC6
l0000000000000AA6:
	word64 rbx_42 = 0x0000000000000000
l0000000000000AB0:
	call Mem25[0x0000000000200DE8 + rbx_42 * 0x0000000000000008:word64] (retsize: 8;)
		uses: rdi:(uint64) r15d_84,rdx:rdx,rsi:rsi
	rbx_42 = rbx_42 + 0x0000000000000001
	branch rbp_30 >> 0x0000000000000003 != rbx_42 l0000000000000AB0
l0000000000000AC6:
	return
__libc_csu_init_exit:


void __libc_csu_fini()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: Top
// Preserved: rsp
__libc_csu_fini_entry:
l0000000000000AE0:
	return
__libc_csu_fini_exit:


void _fini()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO Top
// Preserved: rsp
_fini_entry:
l0000000000000AE4:
	return
_fini_exit:


