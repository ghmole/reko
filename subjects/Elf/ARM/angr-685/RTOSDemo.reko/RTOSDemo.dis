void prvUnlockQueue(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr r1 r4 r5 r6 sp
prvUnlockQueue_entry:
l00000058:
	vPortEnterCritical(cpsr)
	word32 r4_133 = (int32) (int8) (word32) Mem11[r0 + 69:byte]
	branch r4_133 <= 0x00000000 l00000098
l0000006A:
	branch Mem11[r0 + 36:word32] == 0x00000000 l00000098
l0000006E:
l00000080:
	branch xTaskRemoveFromEventList(r0 + 0x00000024) == 0x00000000 l00000074
l00000074:
	word32 r3_41 = (uint32) (byte) (r4_133 - 0x00000001)
	r4_133 = (int32) (int8) r3_41
	branch r3_41 == 0x00000000 l00000098
l0000008A:
	vTaskMissedYield()
	word32 r3_47 = (uint32) (byte) (r4_133 - 0x00000001)
	r4_133 = (int32) (int8) r3_47
	branch r3_47 != 0x00000000 l0000007C
l0000007C:
	branch Mem11[r0 + 36:word32] == 0x00000000 l00000098
l00000098:
	Mem58[r0 + 69:byte] = 0xFF
	vPortExitCritical(cpsr)
	vPortEnterCritical(cpsr)
	word32 r4_101 = (int32) (int8) (word32) Mem58[r0 + 68:byte]
	branch r4_101 <= 0x00000000 l000000DE
l000000B0:
	branch Mem58[r0 + 16:word32] == 0x00000000 l000000DE
l000000B4:
l000000C6:
	branch xTaskRemoveFromEventList(r0 + 0x00000010) == 0x00000000 l000000BA
l000000BA:
	word32 r3_94 = (uint32) (byte) (r4_101 - 0x00000001)
	r4_101 = (int32) (int8) r3_94
	branch r3_94 == 0x00000000 l000000DE
l000000D0:
	vTaskMissedYield()
	word32 r3_100 = (uint32) (byte) (r4_101 - 0x00000001)
	r4_101 = (int32) (int8) r3_100
	branch r3_100 != 0x00000000 l000000C2
l000000C2:
	branch Mem58[r0 + 16:word32] == 0x00000000 l000000DE
l000000DE:
	Mem111[r0 + 68:byte] = 0xFF
l000000E8_thunk_vPortExitCritical:
	vPortExitCritical(cpsr)
	return
prvUnlockQueue_exit:


bool prvCopyDataToQueue(word32 r0, word32 r1, word32 r2, word32 r7, word32 lr, ptr32 & r0Out, ptr32 & r7Out, ptr32 & lrOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  lr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31] r7:[0..31]
// LiveOut: Z lr r0 r7
// Trashed: NZCV lr r0 r1 r2 r3 r7
// Preserved: r4 r5 r6 sp
prvCopyDataToQueue_entry:
l000000EC:
	bool Z_201
	word32 r5_114
	word32 r4_121 = r0
	word32 r0_106 = Mem11[r0 + 64:word32]
	word32 r5_15 = Mem11[r0 + 56:word32]
	branch r0_106 != 0x00000000 l00000102
l00000102:
	branch r2 != 0x00000000 l00000128
l00000128:
	word32 r6_29
	memcpy(Mem11[r0 + 12:word32], r1, r0_106, r0, r5_15, r2, r7, lr, out r4_121, out r5_114, out r6_29, out r7, out lr)
	word32 r3_36 = Mem11[r4_121 + 12:word32]
	word32 r1_38 = Mem11[r4_121:word32]
	Mem41[r4_121 + 12:word32] = r3_36
	branch r3_36 >=u r1_38 l00000144
l0000013E:
	Mem46[r4_121 + 12:word32] = Mem41[r4_121 + 4:word32]
l00000144:
	Z_201 = SLICE(cond(r6_29 - 0x00000002), bool, 2) (alias)
	branch r6_29 == 0x00000002 l00000158
l00000158:
	branch r5_114 != 0x00000000 l0000015C
l0000015A:
	r5_114 = 0x00000001
l0000015C:
	r0_106 = 0x00000000
l00000148:
	Mem57[r4_121 + 56:word32] = r5_114 + 0x00000001
	r0Out = 0x00000000
	r7Out = r7
	lrOut = lr
	return SLICE(cond(r5_114 + 0x00000001), bool, 2)
l00000108:
	word32 lr_64
	word32 r4_69
	word32 r5_70
	word32 r6_71
	word32 r7_72
	memcpy(Mem11[r0 + 8:word32], r1, r0_106, r0, r5_15, r2, r7, lr, out r4_69, out r5_70, out r6_71, out r7_72, out lr_64)
	word32 r2_79 = Mem11[r4_69 + 4:word32]
	word32 r3_80 = Mem11[r4_69 + 8:word32] + Mem11[r4_69 + 64:word32]
	Mem82[r4_69 + 8:word32] = r3_80
	branch r3_80 <u r2_79 l00000150
l00000150:
	Mem87[r4_69 + 56:word32] = r5_70 + 0x00000001
	r0Out = r6_71
	r7Out = r7_72
	lrOut = lr_64
	return SLICE(cond(r5_70 + 0x00000001), bool, 2)
l0000011C:
	Mem96[r4_69 + 8:word32] = Mem82[r4_69:word32]
	Mem97[r4_69 + 56:word32] = r5_70 + 0x00000001
	r0Out = r6_71
	r7Out = r7_72
	lrOut = lr_64
	return SLICE(cond(r5_70 + 0x00000001), bool, 2)
l000000F6:
	word32 r6_102 = Mem11[r0:word32]
	branch r6_102 == 0x00000000 l00000160
l00000160:
	r0_106 = xTaskPriorityDisinherit(Mem11[r0 + 4:word32], out lr)
	Mem116[r0 + 4:word32] = r6_102
	r5_114 = r5_15 + 0x00000001
	Z_201 = SLICE(cond(r5_15 + 0x00000001), bool, 2) (alias)
l000000FC:
	r5_114 = r5_15 + 0x00000001
	Z_201 = SLICE(cond(r5_15 + 0x00000001), bool, 2) (alias)
l000000FE:
	Mem123[r4_121 + 56:word32] = r5_114
	r0Out = r0_106
	r7Out = r7
	lrOut = lr
	return Z_201
prvCopyDataToQueue_exit:


word32 prvCopyDataFromQueue(word32 r0, word32 r1, word32 r4, word32 r5, word32 r6, word32 r7, word32 lr, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & lrOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  lr:[0..31] r0:[0..31] r1:[0..31] r4:[0..31] r5:[0..31] r6:[0..31] r7:[0..31]
// LiveOut: lr r4 r5 r6 r7
// Trashed: lr r0 r1 r2 r3 r4 r5 r6 r7
// Preserved: NZCV sp
prvCopyDataFromQueue_entry:
l0000016C:
	word32 r2_5 = Mem0[r0 + 64:word32]
	branch r2_5 == 0x00000000 l0000018C
l0000018C:
	r5Out = r5
	r6Out = r6
	r7Out = r7
	lrOut = lr
	return r4
l00000170:
	word32 r4_12 = Mem10[r0 + 4:word32]
	word32 r1_13 = Mem10[r0 + 12:word32] + r2_5
	Mem15[r0 + 12:word32] = r1_13
	branch r1_13 <u r4_12 l00000182
l00000180_1:
	r1_13 = Mem15[r0:word32]
l00000182:
	Mem20[r0 + 12:word32] = r1_13
l00000188_thunk_memcpy:
	word32 lr_35
	word32 r4_40
	word32 r5_41
	word32 r6_42
	word32 r7_43
	memcpy(r1, r1_13, r2_5, r4, r5, r6, r7, lr, out r4_40, out r5_41, out r6_42, out r7_43, out lr_35)
	r5Out = r5_41
	r6Out = r6_42
	r7Out = r7_43
	lrOut = lr_35
	return r4_40
prvCopyDataFromQueue_exit:


word32 xQueueGenericSend(word32 r0, word32 r1, word32 r2, word32 r3, word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31]
// LiveOut: lr
// Trashed: NZCV lr r0 r1 r2 r3
// Preserved: r10 r4 r5 r6 r7 r8 r9 sp
xQueueGenericSend_entry:
l00000190:
	word32 r5_124 = 0x00000000
	word32 r9_31 = Mem27[0x000002A0:word32]
l000001F8:
	vPortEnterCritical(cpsr)
	branch Mem40[r0 + 56:word32] <u Mem40[r0 + 60:word32] l00000246
l00000204:
	branch r3 == 0x00000002 l00000246
l00000246:
	word32 lr_57
	word32 r0_58
	word32 r7_402
	prvCopyDataToQueue(r0, r1, r3, r3, lr, out r0_58, out r7_402, out lr_57)
	branch Mem40[r0 + 36:word32] != 0x00000000 l00000290
l00000290:
	branch xTaskRemoveFromEventList(r0 + 0x00000024) != 0x00000000 l00000256
l0000029C:
l00000254:
	branch r0_58 == 0x00000000 l00000266
l00000256:
	Mem82[Mem40[0x000002A0:word32]:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
l00000266:
	vPortExitCritical(cpsr)
	return lr_57
l00000208:
	branch r2 == 0x00000000 l00000272
l00000272:
	vPortExitCritical(cpsr)
	return lr
l0000020C:
	branch r5_124 != 0x00000000 l000001A8
l00000210:
	vTaskSetTimeOutState(fp - 40)
l000001A8:
	vPortExitCritical(cpsr)
	vTaskSuspendAll()
	vPortEnterCritical(cpsr)
	branch (word32) Mem40[r0 + 68:byte] != 0x000000FF l000001C0
l000001BC_1:
	Mem156[r0 + 68:byte] = 0x00
l000001C0:
	branch (word32) Mem158[r0 + 69:byte] != 0x000000FF l000001CC
l000001C8_1:
	Mem163[r0 + 69:byte] = 0x00
l000001CC:
	vPortExitCritical(cpsr)
	branch xTaskCheckForTimeOut(fp - 40, fp - 44, cpsr) != 0x00000000 l0000027E
l0000027E:
	prvUnlockQueue(r0, cpsr)
	xTaskResumeAll(cpsr)
	return lr
xQueueGenericSend_exit:
l000001DC:
	vPortEnterCritical(cpsr)
	branch Mem206[r0 + 56:word32] == Mem206[r0 + 60:word32] l00000218
l00000218:
	vPortExitCritical(cpsr)
	vTaskPlaceOnEventList(r0 + 0x00000010, r2)
	prvUnlockQueue(r0, cpsr)
	branch xTaskResumeAll(cpsr) != 0x00000000 l000001F6
l00000234:
	Mem264[r9_31:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
l000001E8:
	vPortExitCritical(cpsr)
	prvUnlockQueue(r0, cpsr)
	xTaskResumeAll(cpsr)
l000001F6:
	r5_124 = 0x00000001


void xQueuePeekFromISR(word32 r0, word32 r1, word32 r7, word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31] r0:[0..31] r1:[0..31] r7:[0..31]
// LiveOut:
// Trashed: lr r0 r1 r2 r3 r7
// Preserved: r4 r5 r6 sp
xQueuePeekFromISR_entry:
l000002A4:
	word32 r5_13 = __mrs(cpsr)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	branch Mem11[r0 + 56:word32] != 0x00000000 l000002C6
l000002C6:
	word32 r5_27
	word32 r6_28
	word32 r7_56
	word32 lr_57
	Mem30[prvCopyDataFromQueue(r0, r1, r0, r5_13, Mem11[r0 + 12:word32], r7, lr, out r5_27, out r6_28, out r7_56, out lr_57) + 12:word32] = r6_28
	__msr(cpsr, r5_27)
	return
l000002BE:
	__msr(cpsr, r5_13)
	return
xQueuePeekFromISR_exit:


word32 xQueueGenericReceive(word32 r0, word32 r1, word32 r2, word32 r3, word32 lr, word32 cpsr, ptr32 & lrOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31]
// LiveOut: lr r0
// Trashed: NZCV lr r0 r1 r2 r3
// Preserved: r10 r4 r5 r6 r7 r8 r9 sp
xQueueGenericReceive_entry:
l000002D8:
	word32 r5_133 = 0x00000000
	word32 r8_31 = Mem27[0x00000424:word32]
l0000030A:
	vPortEnterCritical(cpsr)
	word32 r6_41 = Mem40[r0 + 56:word32]
	branch r6_41 != 0x00000000 l000003B0
l000003B0:
	word32 lr_51
	word32 r5_56
	word32 r6_57
	word32 r7_483
	word32 r4_55 = prvCopyDataFromQueue(r0, r1, r0, Mem40[r0 + 12:word32], r6_41, 0x00000000, lr, out r5_56, out r6_57, out r7_483, out lr_51)
	branch r3 != 0x00000000 l000003E8
l000003E8:
	word32 r3_62 = Mem40[r4_55 + 36:word32]
	Mem63[r4_55 + 12:word32] = r5_56
	branch r3_62 == 0x00000000 l000003CC
l000003F0:
	branch xTaskRemoveFromEventList(r4_55 + 0x00000024) == 0x00000000 l000003CC
l000003C0:
	word32 r3_76 = Mem40[r4_55:word32]
	Mem79[r4_55 + 56:word32] = r6_57 - 0x00000001
	branch r3_76 == 0x00000000 l0000041C
l0000041C:
	Mem88[r4_55 + 4:word32] = pvTaskIncrementMutexHeldCount()
l000003C8:
	branch Mem90[r4_55 + 16:word32] != 0x00000000 l0000040E
l0000040E:
	branch xTaskRemoveFromEventList(r4_55 + 0x00000010) != 0x00000000 l000003FC
l000003FC:
	Mem105[Mem103[0x00000424:word32]:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
l0000041A:
l000003CC:
	vPortExitCritical(cpsr)
	lrOut = lr_51
	return 0x00000001
l00000314:
	branch r2 == 0x00000000 l000003A4
l0000031A:
	branch r5_133 == 0x00000000 l0000039C
l0000039C:
	vTaskSetTimeOutState(fp - 40)
l0000031E:
	vPortExitCritical(cpsr)
	vTaskSuspendAll()
	vPortEnterCritical(cpsr)
	branch (word32) Mem40[r0 + 68:byte] != 0x000000FF l00000336
l00000332_1:
	Mem164[r0 + 68:byte] = 0x00
l00000336:
	branch (word32) Mem166[r0 + 69:byte] != 0x000000FF l00000342
l0000033E_1:
	Mem171[r0 + 69:byte] = 0x00
l00000342:
	vPortExitCritical(cpsr)
	branch xTaskCheckForTimeOut(fp - 40, fp - 44, cpsr) == 0x00000000 l000002F0
l000002F0:
	vPortEnterCritical(cpsr)
	branch Mem202[r0 + 56:word32] == 0x00000000 l0000036A
l0000036A:
	vPortExitCritical(cpsr)
	branch Mem202[r0:word32] == 0x00000000 l000003D8
l000003D8:
	vPortEnterCritical(cpsr)
	vTaskPriorityInherit(Mem202[r0 + 4:word32])
	vPortExitCritical(cpsr)
l00000372:
	vTaskPlaceOnEventList(r0 + 0x00000024, r2)
	prvUnlockQueue(r0, cpsr)
	branch xTaskResumeAll(cpsr) != 0x00000000 l00000308
l0000038A:
	Mem272[r8_31:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
l000002FA:
	vPortExitCritical(cpsr)
	prvUnlockQueue(r0, cpsr)
	xTaskResumeAll(cpsr)
l00000352:
	prvUnlockQueue(r0, cpsr)
	xTaskResumeAll(cpsr)
	vPortEnterCritical(cpsr)
	branch Mem202[r0 + 56:word32] == 0x00000000 l000003A4
l000003A4:
	vPortExitCritical(cpsr)
	lrOut = lr
	return 0x00000000
xQueueGenericReceive_exit:
l00000364:
	vPortExitCritical(cpsr)
l00000308:
	r5_133 = 0x00000001


void uxQueueMessagesWaiting(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2
// Preserved: r4 sp
uxQueueMessagesWaiting_entry:
l00000428:
	vPortEnterCritical(cpsr)
	vPortExitCritical(cpsr)
	return
uxQueueMessagesWaiting_exit:


void uxQueueSpacesAvailable(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2
// Preserved: r3 r4 r5 sp
uxQueueSpacesAvailable_entry:
l0000043C:
	vPortEnterCritical(cpsr)
	vPortExitCritical(cpsr)
	return
uxQueueSpacesAvailable_exit:


void vQueueDelete()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
vQueueDelete_entry:
l00000454:
l00000454_thunk_vPortFree:
	vPortFree()
	return
vQueueDelete_exit:


void xQueueGenericSendFromISR(word32 r0, word32 r1, word32 r2, word32 r3, word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31]
// LiveOut:
// Trashed: NZCV lr r0 r1 r2
// Preserved: r3 r4 r5 r6 r7 sp
xQueueGenericSendFromISR_entry:
l00000458:
	word32 r6_17 = __mrs(cpsr)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	branch Mem15[r0 + 56:word32] <u Mem15[r0 + 60:word32] l00000482
l00000476:
	branch r3 == 0x00000002 l00000482
l00000482:
	word32 r4_32 = (int32) (int8) (word32) Mem15[r0 + 69:byte]
	word32 r0_162
	word32 lr_39
	word32 r7_44
	branch prvCopyDataToQueue(r0, r1, r3, r2, lr, out r0_162, out r7_44, out lr_39) l000004A6
l000004A6:
	branch Mem15[r0 + 36:word32] == 0x00000000 l0000049E
l000004AC:
	branch xTaskRemoveFromEventList(r0 + 0x00000024) == 0x00000000 l0000049E
l000004B8:
	branch r7_44 == 0x00000000 l0000049E
l000004BC:
	Mem66[r7_44:word32] = 0x00000001
l00000496:
	Mem70[r0 + 69:byte] = (byte) (int32) (int8) (r4_32 + 0x00000001)
l0000049E:
	__msr(cpsr, r6_17)
	return
l0000047A:
l0000047C:
	__msr(cpsr, r6_17)
	return
xQueueGenericSendFromISR_exit:


void xQueueGiveFromISR(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: r3 r4 r5 sp
xQueueGiveFromISR_entry:
l000004C4:
	word32 r4_13 = __mrs(cpsr)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	word32 r2_16 = Mem11[r0 + 56:word32]
	branch r2_16 >=u Mem11[r0 + 60:word32] l00000500
l00000500:
	__msr(cpsr, r4_13)
	return
l000004E2:
	word32 r3_28 = (int32) (int8) (word32) Mem11[r0 + 69:byte]
	Mem29[r0 + 56:word32] = r2_16 + 0x00000001
	branch r2_16 == 0x00000001 l00000508
l00000508:
	branch Mem29[r0 + 36:word32] == 0x00000000 l000004F8
l0000050E:
	branch xTaskRemoveFromEventList(r0 + 0x00000024) == 0x00000000 l000004F8
l0000051A:
	branch r1 == 0x00000000 l000004F8
l0000051E:
	Mem51[r1:word32] = 0x00000001
l000004F0:
	Mem55[r0 + 69:byte] = (byte) (int32) (int8) (r3_28 + 0x00000001)
l000004F8:
l000004FA:
	__msr(cpsr, r4_13)
	return
xQueueGiveFromISR_exit:


void xQueueReceiveFromISR(word32 r0, word32 r1, word32 r2, word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31]
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
xQueueReceiveFromISR_entry:
l00000524:
	word32 r6_17 = __mrs(cpsr)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	word32 r4_20 = Mem15[r0 + 56:word32]
	branch r4_20 != 0x00000000 l0000054A
l0000054A:
	word32 lr_28
	word32 r5_33
	word32 r7_35
	word32 r4_32 = prvCopyDataFromQueue(r0, r1, r4_20, (int32) (int8) (word32) Mem15[r0 + 68:byte], r6_17, r0, lr, out r5_33, out r6_17, out r7_35, out lr_28)
	Mem39[r7_35 + 56:word32] = r4_32 - 0x00000001
	branch r4_32 == 0x00000001 l00000572
l00000572:
	branch Mem39[r7_35 + 16:word32] == 0x00000000 l00000568
l00000578:
	branch xTaskRemoveFromEventList(r7_35 + 0x00000010) == 0x00000000 l00000568
l00000584:
	branch r2 == 0x00000000 l00000568
l0000058A:
	Mem57[r2:word32] = 0x00000001
l00000560:
	Mem61[r7_35 + 68:byte] = (byte) (int32) (int8) (r5_33 + 0x00000001)
l00000568:
	__msr(cpsr, r6_17)
	return
l00000540:
l00000542:
	__msr(cpsr, r6_17)
	return
xQueueReceiveFromISR_exit:


void xQueueIsQueueEmptyFromISR(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZC r0
// Preserved: sp
xQueueIsQueueEmptyFromISR_entry:
l00000594:
	__clz(Mem0[r0 + 56:word32])
	return
xQueueIsQueueEmptyFromISR_exit:


void xQueueIsQueueFullFromISR(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZC r0 r3
// Preserved: sp
xQueueIsQueueFullFromISR_entry:
l000005A0:
	__clz(Mem0[r0 + 60:word32] - Mem0[r0 + 56:word32])
	return
xQueueIsQueueFullFromISR_exit:


void uxQueueMessagesWaitingFromISR()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0
// Preserved: sp
uxQueueMessagesWaitingFromISR_entry:
l000005B0:
	return
uxQueueMessagesWaitingFromISR_exit:


void xQueueGetMutexHolder(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: r4 sp
xQueueGetMutexHolder_entry:
l000005B4:
	vPortEnterCritical(cpsr)
	branch Mem7[r0:word32] != 0x00000000 l000005CA
l000005CA:
	vPortExitCritical(cpsr)
	return
l000005C0:
	vPortExitCritical(cpsr)
	return
xQueueGetMutexHolder_exit:


void xQueueTakeMutexRecursive(word32 r0, word32 r1, word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3
// Preserved: r4 r5 r6 sp
xQueueTakeMutexRecursive_entry:
l000005D4:
	branch Mem11[r0 + 4:word32] == xTaskGetCurrentTaskHandle() l000005FA
l000005FA:
	Mem25[r0 + 12:word32] = Mem11[r0 + 12:word32] + 0x00000001
	return
l000005E4:
	word32 lr_92
	branch xQueueGenericReceive(r0, 0x00000000, r1, 0x00000000, lr, cpsr, out lr_92) == 0x00000000 l000005F8
l000005F2:
	Mem47[r0 + 12:word32] = Mem11[r0 + 12:word32] + 0x00000001
l000005F8:
	return
xQueueTakeMutexRecursive_exit:


void xQueueGiveMutexRecursive(word32 r0, word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31] r0:[0..31]
// LiveOut:
// Trashed: NZCV lr r0 r1 r2
// Preserved: r3 r4 r5 sp
xQueueGiveMutexRecursive_entry:
l00000604:
	branch Mem11[r0 + 4:word32] == xTaskGetCurrentTaskHandle() l00000616
l00000616:
	word32 r3_19 = Mem11[r0 + 12:word32]
	Mem22[r0 + 12:word32] = r3_19 - 0x00000001
	branch r3_19 == 0x00000001 l00000622
l00000622:
	xQueueGenericSend(r0, r3_19 - 0x00000001, r3_19 - 0x00000001, r3_19 - 0x00000001, lr, cpsr)
	return
l0000061E:
	return
l00000612:
	return
xQueueGiveMutexRecursive_exit:


void xQueueGenericReset(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 sp
xQueueGenericReset_entry:
l00000630:
	vPortEnterCritical(cpsr)
	word32 r3_25 = Mem11[r0 + 64:word32]
	word32 r2_28 = Mem11[r0 + 60:word32] * r3_25
	word32 r0_27 = Mem11[r0:word32]
	Mem33[r0 + 56:word32] = 0x00000000
	Mem34[r0 + 4:word32] = r2_28 + r0_27
	Mem35[r0 + 68:byte] = 0xFF
	Mem36[r0 + 12:word32] = r2_28 - r3_25 + r0_27
	Mem37[r0 + 8:word32] = r0_27
	Mem38[r0 + 69:byte] = 0xFF
	branch r1 != 0x00000000 l00000690
l00000690:
	vListInitialise(r0 + 0x00000010)
	vListInitialise(r0 + 0x00000024)
	vPortExitCritical(cpsr)
	return
l00000660:
	branch Mem38[r0 + 16:word32] != 0x00000000 l0000066C
l0000066C:
	branch xTaskRemoveFromEventList(r0 + 0x00000010) == 0x00000000 l00000664
l00000678:
	Mem71[Mem38[0x000006A8:word32]:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
	vPortExitCritical(cpsr)
	return
l00000664:
	vPortExitCritical(cpsr)
	return
xQueueGenericReset_exit:


void xQueueGenericCreate(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r1 r2 r3
// Preserved: r4 r5 r6 sp
xQueueGenericCreate_entry:
l000006AC:
	word32 r0_20 = pvPortMalloc(r0 * r1 + 0x00000048, cpsr)
	branch r0_20 == 0x00000000 l000006D4
l000006C0:
	branch r1 == 0x00000000 l000006D8
l000006D8:
	Mem29[r0_20:word32] = r0_20
l000006C2:
	Mem31[r0_20:word32] = r0_20 + 0x00000048
l000006C8:
	Mem34[r0_20 + 60:word32] = r0
	Mem36[r0_20 + 64:word32] = r1
	xQueueGenericReset(r0_20, 0x00000001, cpsr)
l000006D4:
	return
xQueueGenericCreate_exit:


void xQueueCreateMutex(word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31]
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3
// Preserved: r4 sp
xQueueCreateMutex_entry:
l000006DC:
	xQueueGenericCreate(0x00000001, 0x00000000, cpsr)
	branch 0x00000001 == 0x00000000 l000006FC
l000006EC:
	Mem22[0x00000005:word32] = 0x00000000
	Mem23[0x00000001:word32] = 0x00000000
	Mem24[0x0000000D:word32] = 0x00000000
	xQueueGenericSend(0x00000001, 0x00000000, 0x00000000, 0x00000000, lr, cpsr)
l000006FC:
	return
xQueueCreateMutex_exit:


void prvInitialiseNewTask(word32 r0, word32 r1, word32 r2, word32 r3, word32 dwArg00, word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31] Stack +0000:[0..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: fp r10 r3 r4 r5 r6 r7 r8 r9 sp
prvInitialiseNewTask_entry:
l00000700:
	word32 r3_36 = r1 - 0x00000001 + 1
	word32 r5_38 = Mem23[dwArg08 + 80:word32] + (r2 + 0x3FFFFFFF << 0x00000002) & ~0x00000007
	word32 r0_41 = dwArg08 + 0x00000054
	word32 r2_42 = dwArg00 & ~0x80000000
l0000072E:
	Mem47[r0_41:byte] = (byte) (word32) Mem44[r3_36 + 0:byte]
	r3_36 = r3_36 + 1
	r0_41 = r0_41 + 1
	branch (word32) Mem47[r3_36:byte] == 0x00000000 l0000073E
l0000073A:
	branch r3_36 != r1 + 0x00000002 l0000072E
l0000073E:
	branch r2_42 <u 0x00000001 l00000744
l00000742_1:
	r2_42 = 0x00000001
l00000744:
	Mem65[dwArg08 + 76:word32] = r2_42
	Mem66[dwArg08 + 88:word32] = r2_42
	Mem68[dwArg08 + 86:byte] = 0x00
	Mem69[dwArg08 + 92:word32] = 0x00000000
	vListInitialiseItem(dwArg08 + 0x00000024)
	vListInitialiseItem(dwArg08 + 0x00000038)
	Mem74[dwArg08 + 56:word32] = 0x00000002 - r2_42
	word32 r2_75 = Mem74[dwArg08 + 80:word32]
	Mem85[dwArg08 + 48:word32] = dwArg08
	Mem86[dwArg08 + 68:word32] = dwArg08
	vPortStoreTaskMPUSettings(dwArg08 + 0x00000004, dwArg0C, r2_75, r2)
	Mem95[dwArg08 + 96:word32] = 0x00000000
	Mem100[dwArg08 + 100:byte] = 0x00
	Mem122[dwArg08:word32] = pxPortInitialiseStack(r5_38, r0, r3, dwArg00 >> 0x0000001F)
	branch dwArg04 == 0x00000000 l00000792
l00000790:
	Mem123[dwArg04:word32] = dwArg08
l00000792:
	return
prvInitialiseNewTask_exit:


void prvAddNewTaskToReadyList(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
prvAddNewTaskToReadyList_entry:
l00000798:
	word32 r0_60
	word32 r4_16 = Mem15[0x00000854:word32]
	vPortEnterCritical(cpsr)
	Mem28[r4_16:word32] = Mem15[r4_16:word32] + 0x00000001
	branch Mem28[r4_16 + 4:word32] == 0x00000000 l00000812
l00000812:
	Mem32[r4_16 + 4:word32] = r0
	branch Mem32[r4_16:word32] != 0x00000001 l000007B4
l0000081A:
	vListInitialise(r4_16 + 0x00000008)
	vListInitialise(r4_16 + 0x0000001C)
	vListInitialise(r4_16 + 0x00000030)
	vListInitialise(r4_16 + 0x00000044)
	vListInitialise(r4_16 + 0x00000058)
	Mem59[r4_16 + 108:word32] = r4_16 + 0x00000030
	r0_60 = Mem59[r0 + 76:word32]
	Mem61[r4_16 + 112:word32] = r4_16 + 0x00000044
l000007B0:
	branch Mem28[r4_16 + 116:word32] == 0x00000000 l00000800
l00000800:
	r0_60 = Mem28[r0 + 76:word32]
	branch Mem28[Mem28[r4_16 + 4:word32] + 76:word32] >u r0_60 l00000810
l0000080E_1:
	Mem69[r4_16 + 4:word32] = r0
l00000810:
l000007B4:
	r0_60 = Mem71[r0 + 76:word32]
l000007BA:
	word32 r2_81 = Mem78[r4_16 + 120:word32]
	Mem95[r4_16 + 124:word32] = 0x00000001 << r0_60 | Mem78[r4_16 + 124:word32]
	Mem96[r4_16 + 120:word32] = r2_81 + 0x00000001
	vListInsertEnd(r4_16 + 0x00000008 + r0_60 * 0x00000014, r0 + 0x00000024)
	vPortExitCritical(cpsr)
	branch Mem96[r4_16 + 116:word32] == 0x00000000 l000007FC
l000007E2:
	branch Mem96[Mem96[r4_16 + 4:word32] + 76:word32] >=u Mem96[r0 + 76:word32] l000007FC
l000007EC:
	Mem120[Mem96[0x00000858:word32]:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
l000007FC:
	return
prvAddNewTaskToReadyList_exit:


void prvAddCurrentTaskToDelayedList.isra.0(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 r5 r6 sp
prvAddCurrentTaskToDelayedList.isra.0_entry:
l0000085C:
	word32 r4_12 = Mem11[0x000008B0:word32]
	word32 r6_15 = Mem11[r4_12 + 128:word32]
	branch uxListRemove(Mem11[r4_12 + 4:word32] + 0x00000024) != 0x00000000 l00000880
l00000870:
	Mem34[r4_12 + 124:word32] = Mem11[r4_12 + 124:word32] & ~(0x00000001 << Mem11[Mem11[r4_12 + 4:word32] + 76:word32])
l00000880:
	word32 r5_37 = r0 + r6_15
	Mem42[Mem39[r4_12 + 4:word32] + 36:word32] = r5_37
	branch r6_15 >u r5_37 l000008A2
l000008A2:
	word32 r0_44 = Mem42[r4_12 + 112:word32]
	word32 r1_45 = Mem42[r4_12 + 4:word32]
l000008AC_thunk_vListInsert:
	vListInsert(r0_44, r1_45 + 0x00000024)
	return
l0000088A:
	vListInsert(Mem42[r4_12 + 108:word32], Mem42[r4_12 + 4:word32] + 0x00000024)
	branch r5_37 >=u Mem42[r4_12 + 132:word32] l000008A0
l0000089C_1:
	Mem73[r4_12 + 132:word32] = r5_37
l000008A0:
	return
prvAddCurrentTaskToDelayedList.isra.0_exit:


word32 xTaskCreate(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr, word32 dwArg00, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31] Stack +0000:[0..31] Stack +0004:[0..31]
// LiveOut: r0
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r10 r4 r5 r6 r7 r8 r9 sp
xTaskCreate_entry:
l000008B4:
	word32 r0_32 = pvPortMalloc(r2 << 2, cpsr)
	branch r0_32 == 0x00000000 l00000904
l00000904:
	return 0xFFFFFFFF
l000008CA:
	word32 r0_130
	word32 r0_52 = pvPortMalloc(0x00000068, cpsr)
	branch r0_52 == 0x00000000 l0000090E
l0000090E:
	vPortFree()
	r0_130 = 0xFFFFFFFF
l000008D6:
	Mem64[r0_52 + 80:word32] = r0_32
	Mem66[r0_52 + 101:byte] = 0x00
	prvInitialiseNewTask(r0, r1, r2, r3, dwArg00, dwArg04, r0_52, 0x00000000)
	prvAddNewTaskToReadyList(r0_52, cpsr)
	r0_130 = 0x00000001
l000008FE:
	return r0_130
xTaskCreate_exit:


void xTaskCreateRestricted(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: lr r0 r1 r2 r3
// Preserved: NZCV r4 r5 r6 r7 sp
xTaskCreateRestricted_entry:
l0000091C:
	branch Mem0[r0 + 20:word32] == 0x00000000 l0000096A
l0000096A:
	return
l00000920:
	word32 r0_24 = pvPortMalloc(0x00000068, cpsr)
	branch r0_24 == 0x00000000 l00000964
l00000964:
l00000932:
	word32 r1_35 = Mem17[r0 + 20:word32]
	Mem36[r0_24 + 101:byte] = 0x01
	word32 r3_37 = Mem36[r0 + 12:word32]
	word32 r2_38 = (word32) Mem36[r0 + 8:word16]
	word32 lr_39 = Mem36[r0 + 16:word32]
	Mem40[r0_24 + 80:word32] = r1_35
	prvInitialiseNewTask(Mem43[r0:word32], Mem40[r0 + 4:word32], r2_38, r3_37, lr_39, r1, r0_24, r0 + 24)
	prvAddNewTaskToReadyList(r0_24, cpsr)
l00000960:
	return
xTaskCreateRestricted_exit:


void vTaskAllocateMPURegions(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: sp
vTaskAllocateMPURegions_entry:
l00000970:
	branch r0 == 0x00000000 l0000097C
l0000097C:
	word32 r0_6 = Mem0[Mem0[0x0000098C:word32] + 4:word32]
l00000986_thunk_vPortStoreTaskMPUSettings:
	vPortStoreTaskMPUSettings(r0_6 + 0x00000004, r1, 0x00000000, 0x00000000)
	return
l00000972:
l00000978_thunk_vPortStoreTaskMPUSettings:
	vPortStoreTaskMPUSettings(r0 + 0x00000004, r1, 0x00000000, 0x00000000)
	return
vTaskAllocateMPURegions_exit:


void vTaskStartScheduler(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 sp
vTaskStartScheduler_entry:
l00000990:
	word32 r4_9 = Mem8[0x000009E0:word32]
	word32 r0_19 = xTaskCreate(Mem13[0x000009E8:word32], Mem13[0x000009E4:word32], 0x0000003B, 0x00000000, cpsr, 0x80000000, r4_9 + 0x00000088)
	branch r0_19 == 0x00000001 l000009B6
l000009B6:
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	Mem32[r4_9 + 132:word32] = 0xFFFFFFFF
	Mem33[r4_9 + 116:word32] = r0_19
	Mem34[r4_9 + 128:word32] = 0x00000000
l000009DC_thunk_xPortStartScheduler:
	xPortStartScheduler(cpsr)
	return
l000009B2:
	return
vTaskStartScheduler_exit:


void vTaskEndScheduler(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
vTaskEndScheduler_entry:
l000009EC:
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	Mem8[Mem0[0x00000A08:word32] + 116:word32] = 0x00000000
l00000A02_thunk_vPortEndScheduler:
	vPortEndScheduler()
	return
vTaskEndScheduler_exit:


bool vTaskSuspendAll()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: C
// Trashed: NZCV r2 r3
// Preserved: sp
vTaskSuspendAll_entry:
l00000A0C:
	word32 r2_4 = Mem0[0x00000A1C:word32]
	word32 r3_5 = Mem0[r2_4 + 140:word32]
	Mem8[r2_4 + 140:word32] = r3_5 + 0x00000001
	return SLICE(cond(r3_5 + 0x00000001), bool, 1)
vTaskSuspendAll_exit:


void xTaskGetTickCount()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
xTaskGetTickCount_entry:
l00000A20:
	return
xTaskGetTickCount_exit:


void xTaskGetTickCountFromISR()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
xTaskGetTickCountFromISR_entry:
l00000A2C:
	return
xTaskGetTickCountFromISR_exit:


void uxTaskGetNumberOfTasks()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
uxTaskGetNumberOfTasks_entry:
l00000A38:
	return
uxTaskGetNumberOfTasks_exit:


void pcTaskGetName(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r3
// Preserved: sp
pcTaskGetName_entry:
l00000A44:
	branch r0 == 0x00000000 l00000A4A
l00000A4A:
	return
l00000A46:
	return
pcTaskGetName_exit:


void xTaskGenericNotify(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31]
// LiveOut:
// Trashed: NZCV lr r0 r1 r2
// Preserved: r3 r4 r5 r6 r7 sp
xTaskGenericNotify_entry:
l00000A58:
	vPortEnterCritical(cpsr)
	branch r3 == 0x00000000 l00000A6C
l00000A68:
	Mem31[r3:word32] = Mem15[r0 + 96:word32]
l00000A6C:
	word32 r4_35 = (word32) Mem34[r0 + 100:byte]
	Mem38[r0 + 100:byte] = 0x02
	word32 r4_39 = (uint32) (byte) r4_35
	branch r2 >u 0x00000004 l00000A8C
l00000A7E:
	switch (r2 - 0x00000001) { l00000AF6 l00000A9A l00000A8A l00000A86 }
l00000A86:
	branch r4_39 == 0x00000002 l00000AFE
l00000AFE:
l00000A8A:
	Mem48[r0 + 96:word32] = r1
l00000A9A:
	Mem52[r0 + 96:word32] = Mem38[r0 + 96:word32] + 0x00000001
	branch r4_39 != 0x00000001 l00000A90
l00000AF6:
	Mem57[r0 + 96:word32] = r1 | Mem38[r0 + 96:word32]
l00000A8C:
	branch r4_39 == 0x00000001 l00000AA6
l00000AA6:
	word32 r5_67 = Mem65[0x00000B04:word32]
	uxListRemove(r0 + 0x00000024)
	word32 r0_77 = Mem65[r0 + 76:word32]
	Mem86[r5_67 + 124:word32] = r4_39 << r0_77 | Mem65[r5_67 + 124:word32]
	vListInsertEnd(r5_67 + 0x00000008 + r0_77 * 0x00000014, r0 + 0x00000024)
	branch Mem86[r0 + 76:word32] <=u Mem86[Mem86[r5_67 + 4:word32] + 76:word32] l00000A90
l00000ADE:
	Mem100[Mem86[0x00000B08:word32]:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
	vPortExitCritical(cpsr)
	return
l00000A90:
l00000A92:
	vPortExitCritical(cpsr)
	return
xTaskGenericNotify_exit:


void xTaskGenericNotifyFromISR(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr, word32 dwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31] Stack +0000:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
xTaskGenericNotifyFromISR_entry:
l00000B0C:
	word32 r5_17 = __mrs(cpsr)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	branch r3 == 0x00000000 l00000B2A
l00000B26:
	Mem22[r3:word32] = Mem15[r0 + 96:word32]
l00000B2A:
	word32 r4_26 = (word32) Mem25[r0 + 100:byte]
	Mem30[r0 + 100:byte] = 0x02
	word32 r4_31 = (uint32) (byte) r4_26
	branch r2 >u 0x00000004 l00000B4A
l00000B3C:
	switch (r2 - 0x00000001) { l00000B94 l00000B58 l00000B48 l00000B44 }
l00000B44:
	branch r4_31 == 0x00000002 l00000BC4
l00000BC4:
l00000B48:
	Mem41[r0 + 96:word32] = r1
l00000B58:
	Mem45[r0 + 96:word32] = Mem30[r0 + 96:word32] + 0x00000001
	branch r4_31 != 0x00000001 l00000B4E
l00000B94:
	Mem50[r0 + 96:word32] = r1 | Mem30[r0 + 96:word32]
l00000B4A:
	branch r4_31 == 0x00000001 l00000B64
l00000B64:
	word32 r6_57 = Mem55[0x00000BD0:word32]
	branch Mem55[r6_57 + 140:word32] == 0x00000000 l00000B9C
l00000B9C:
	uxListRemove(r0 + 0x00000024)
	word32 r0_72 = Mem55[r0 + 76:word32]
	Mem82[r6_57 + 124:word32] = r4_31 << r0_72 | Mem55[r6_57 + 124:word32]
	vListInsertEnd(r6_57 + 0x00000008 + r0_72 * 0x00000014, r0 + 0x00000024)
l00000B6E:
	vListInsertEnd(r6_57 + 0x00000058, r0 + 0x00000038)
l00000B7A:
	branch Mem98[r0 + 76:word32] <=u Mem98[Mem98[r6_57 + 4:word32] + 76:word32] l00000B4E
l00000B84:
	branch dwArg00 == 0x00000000 l00000BC8
l00000BC8:
	Mem112[r6_57 + 144:word32] = 0x00000001
l00000B8A:
	Mem113[dwArg00:word32] = 0x00000001
	__msr(cpsr, r5_17)
	return
l00000B4E:
l00000B50:
	__msr(cpsr, r5_17)
	return
xTaskGenericNotifyFromISR_exit:


void xTaskNotifyWait(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
xTaskNotifyWait_entry:
l00000BD4:
	word32 r4_16 = Mem15[0x00000C58:word32]
	vPortEnterCritical(cpsr)
	branch (word32) Mem15[Mem15[r4_16 + 4:word32] + 100:byte] == 0x00000002 l00000C04
l00000BF0:
	word32 r1_37 = Mem15[r4_16 + 4:word32]
	Mem40[r1_37 + 96:word32] = Mem15[r1_37 + 96:word32] & ~r0
	Mem42[Mem40[r4_16 + 4:word32] + 100:byte] = 0x01
	branch r3 != 0x00000000 l00000C3C
l00000C3C:
	prvAddCurrentTaskToDelayedList.isra.0(r3)
	Mem54[Mem42[0x00000C5C:word32]:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
l00000C04:
	vPortExitCritical(cpsr)
	vPortEnterCritical(cpsr)
	branch r2 == 0x00000000 l00000C14
l00000C0E:
	Mem73[r2:word32] = Mem70[Mem70[r4_16 + 4:word32] + 96:word32]
l00000C14:
	branch (word32) Mem75[Mem75[r4_16 + 4:word32] + 100:byte] == 0x00000001 l00000C54
l00000C54:
l00000C1E:
	word32 r3_82 = Mem75[r4_16 + 4:word32]
	Mem87[r3_82 + 96:word32] = Mem75[r3_82 + 96:word32] & ~r1
l00000C2A:
	Mem92[Mem90[r4_16 + 4:word32] + 100:byte] = 0x00
	vPortExitCritical(cpsr)
	return
xTaskNotifyWait_exit:


void vTaskNotifyGiveFromISR(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: r3 r4 r5 r6 r7 r8 r9 sp
vTaskNotifyGiveFromISR_entry:
l00000C60:
	word32 r6_21 = __mrs(cpsr)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	word32 r5_25 = (word32) Mem19[r0 + 100:byte]
	Mem26[r0 + 100:byte] = 0x02
	Mem31[r0 + 96:word32] = Mem26[r0 + 96:word32] + 0x00000001
	word32 r5_28 = (uint32) (byte) r5_25
	branch r5_28 == 0x00000001 l00000C96
l00000C96:
	word32 r7_33 = Mem31[0x00000CFC:word32]
	branch Mem31[r7_33 + 140:word32] == 0x00000000 l00000CCC
l00000CCC:
	uxListRemove(r0 + 0x00000024)
	word32 r0_48 = Mem31[r0 + 76:word32]
	Mem57[r7_33 + 124:word32] = r5_28 << r0_48 | Mem31[r7_33 + 124:word32]
	vListInsertEnd(r7_33 + 0x00000008 + r0_48 * 0x00000014, r0 + 0x00000024)
l00000CA2:
	vListInsertEnd(r7_33 + 0x00000058, r0 + 0x00000038)
l00000CAE:
	branch Mem73[r0 + 76:word32] <=u Mem73[Mem73[r7_33 + 4:word32] + 76:word32] l00000C8E
l00000CB8:
	branch r1 == 0x00000000 l00000CF4
l00000CF4:
	Mem84[r7_33 + 144:word32] = 0x00000001
l00000CC0:
	Mem85[r1:word32] = 0x00000001
	__msr(cpsr, r6_21)
	return
l00000C8E:
	__msr(cpsr, r6_21)
	return
vTaskNotifyGiveFromISR_exit:


void ulTaskNotifyTake(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: r1 r4 r5 r6 sp
ulTaskNotifyTake_entry:
l00000D00:
	word32 r4_12 = Mem11[0x00000D64:word32]
	vPortEnterCritical(cpsr)
	branch Mem11[Mem11[r4_12 + 4:word32] + 96:word32] != 0x00000000 l00000D1C
l00000D12:
	Mem28[Mem11[r4_12 + 4:word32] + 100:byte] = 0x01
	branch r1 != 0x00000000 l00000D4A
l00000D4A:
	prvAddCurrentTaskToDelayedList.isra.0(r1)
	Mem40[Mem28[0x00000D68:word32]:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
l00000D1C:
	vPortExitCritical(cpsr)
	vPortEnterCritical(cpsr)
	word32 r5_57 = Mem55[Mem55[r4_12 + 4:word32] + 96:word32]
	branch r5_57 == 0x00000000 l00000D32
l00000D2A:
	branch r0 != 0x00000000 l00000D42
l00000D42:
	Mem61[Mem55[r4_12 + 4:word32] + 96:word32] = 0x00000000
l00000D2C:
	Mem64[Mem55[r4_12 + 4:word32] + 96:word32] = r5_57 - 0x00000001
l00000D32:
	Mem69[Mem67[r4_12 + 4:word32] + 100:byte] = 0x00
	vPortExitCritical(cpsr)
	return
ulTaskNotifyTake_exit:


word32 xTaskIncrementTick()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: r0
// Trashed: NZCV r0 r3
// Preserved: r1 r10 r2 r4 r5 r6 r7 r8 r9 sp
xTaskIncrementTick_entry:
l00000D6C:
	word32 r6_127
	word32 r4_20 = Mem19[0x00000E64:word32]
	branch Mem19[r4_20 + 140:word32] != 0x00000000 l00000E38
l00000E38:
	Mem28[r4_20 + 152:word32] = Mem19[r4_20 + 152:word32] + 0x00000001
	r6_127 = 0x00000000
l00000D7A:
	word32 r7_29 = Mem19[r4_20 + 128:word32]
	Mem32[r4_20 + 128:word32] = r7_29 + 0x00000001
	branch r7_29 != 0x00000001 l00000DA8
l00000D86:
	word32 r3_33 = Mem32[r4_20 + 108:word32]
	Mem35[r4_20 + 108:word32] = Mem32[r4_20 + 112:word32]
	Mem36[r4_20 + 112:word32] = r3_33
	Mem39[r4_20 + 148:word32] = Mem36[r4_20 + 148:word32] + 0x00000001
	branch Mem39[Mem39[r4_20 + 108:word32]:word32] != 0x00000000 l00000E46
l00000E46:
	Mem49[r4_20 + 132:word32] = Mem39[Mem39[Mem39[Mem39[r4_20 + 108:word32] + 12:word32] + 12:word32] + 36:word32]
	r6_127 = 0x00000000
	branch r7_29 + 0x00000001 <u Mem49[r4_20 + 132:word32] l00000E14
l00000E5C:
l00000DA0:
	Mem54[r4_20 + 132:word32] = 0xFFFFFFFF
l00000DA8:
	r6_127 = 0x00000000
	branch r7_29 + 0x00000001 <u Mem56[r4_20 + 132:word32] l00000E14
l00000DB2:
	r6_127 = 0x00000000
	word32 r8_64 = Mem63[0x00000E68:word32]
l00000E04:
	branch Mem66[Mem66[r4_20 + 108:word32]:word32] != 0x00000000 l00000DBC
l00000DBC:
	word32 r5_73 = Mem66[Mem66[Mem66[r4_20 + 108:word32] + 12:word32] + 12:word32]
	word32 r3_74 = Mem66[r5_73 + 36:word32]
	branch r7_29 + 0x00000001 <u r3_74 l00000E5E
l00000E5E:
	Mem79[r4_20 + 132:word32] = r3_74
l00000DCC:
	uxListRemove(r5_73 + 0x00000024)
	branch Mem66[r5_73 + 72:word32] == 0x00000000 l00000DDE
l00000DDA:
	uxListRemove(r5_73 + 0x00000038)
l00000DDE:
	word32 r0_101 = Mem66[r5_73 + 76:word32]
	Mem115[r4_20 + 124:word32] = 0x00000001 << r0_101 | Mem66[r4_20 + 124:word32]
	vListInsertEnd(r8_64 + r0_101 * 0x00000014, r5_73 + 0x00000024)
	branch Mem115[r5_73 + 76:word32] <u Mem115[Mem115[r4_20 + 4:word32] + 76:word32] l00000E04
l00000E02_1:
	r6_127 = 0x00000001
l00000E0C:
	Mem129[r4_20 + 132:word32] = 0xFFFFFFFF
l00000E14:
	branch Mem131[r4_20 + Mem131[Mem131[r4_20 + 4:word32] + 76:word32] * 0x00000014 + 8:word32] <u 0x00000002 l00000E28
l00000E26_1:
	r6_127 = 0x00000001
l00000E28:
	branch Mem141[r4_20 + 144:word32] == 0x00000000 l00000E32
l00000E30_1:
	r6_127 = 0x00000001
l00000E32:
	return r6_127
xTaskIncrementTick_exit:


word32 xTaskResumeAll(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut: r0
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
xTaskResumeAll_entry:
l00000E6C:
	word32 r4_16 = Mem15[0x00000F40:word32]
	vPortEnterCritical(cpsr)
	Mem26[r4_16 + 140:word32] = Mem15[r4_16 + 140:word32] - 0x00000001
	word32 r5_27 = Mem26[r4_16 + 140:word32]
	branch r5_27 != 0x00000000 l00000F26
l00000E88:
	branch Mem26[r4_16:word32] == 0x00000000 l00000F26
l00000E8E:
l00000ED4:
	branch Mem36[r4_16 + 88:word32] != 0x00000000 l00000E96
l00000E96:
	r5_27 = Mem36[Mem36[r4_16 + 100:word32] + 12:word32]
	uxListRemove(r5_27 + 0x00000038)
	uxListRemove(r5_27 + 0x00000024)
	word32 r0_61 = Mem36[r5_27 + 76:word32]
	Mem71[r4_16 + 124:word32] = 0x00000001 << r0_61 | Mem36[r4_16 + 124:word32]
	vListInsertEnd(r4_16 + 0x00000008 + r0_61 * 0x00000014, r5_27 + 0x00000024)
	branch Mem71[r5_27 + 76:word32] <u Mem71[Mem71[r4_16 + 4:word32] + 76:word32] l00000ED4
l00000ED0_1:
	Mem83[r4_16 + 144:word32] = 0x00000001
l00000EDA:
	branch r5_27 == 0x00000000 l00000EEA
l00000EDC:
	branch Mem36[Mem36[r4_16 + 108:word32]:word32] != 0x00000000 l00000F32
l00000F32:
	Mem91[r4_16 + 132:word32] = Mem36[Mem36[Mem36[Mem36[r4_16 + 108:word32] + 12:word32] + 12:word32] + 36:word32]
l00000EE2:
	Mem93[r4_16 + 132:word32] = 0xFFFFFFFF
l00000EEA:
	word32 r5_108 = Mem95[r4_16 + 152:word32]
	branch r5_108 == 0x00000000 l00000F04
l00000EF0:
l00000EF2:
	branch xTaskIncrementTick() == 0x00000000 l00000EFC
l00000EF8:
	Mem106[r4_16 + 144:word32] = 0x00000001
l00000EFC:
	r5_108 = r5_108 - 0x00000001
	branch r5_108 != 0x00000000 l00000EF2
l00000F00:
	Mem113[r4_16 + 152:word32] = r5_108
l00000F04:
	branch Mem115[r4_16 + 144:word32] == 0x00000000 l00000F26
l00000F26:
	vPortExitCritical(cpsr)
	return 0x00000000
l00000F0A:
	Mem146[Mem115[0x00000F44:word32]:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
	vPortExitCritical(cpsr)
	return 0x00000001
xTaskResumeAll_exit:


void vTaskDelay(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: r3 sp
vTaskDelay_entry:
l00000F48:
	branch r0 != 0x00000000 l00000F5E
l00000F5E:
	word32 r2_9 = Mem7[0x00000F7C:word32]
	Mem13[r2_9 + 140:word32] = Mem7[r2_9 + 140:word32] + 0x00000001
	prvAddCurrentTaskToDelayedList.isra.0(r0)
	branch xTaskResumeAll(cpsr) == 0x00000000 l00000F4C
l00000F76:
	return
l00000F4C:
	Mem38[Mem36[0x00000F78:word32]:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
	return
vTaskDelay_exit:


void vTaskDelayUntil(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 sp
vTaskDelayUntil_entry:
l00000F80:
	word32 r2_4 = Mem0[0x00000FD4:word32]
	word32 r3_12 = Mem9[r0:word32]
	Mem14[r2_4 + 140:word32] = Mem9[r2_4 + 140:word32] + 0x00000001
	word32 r2_15 = Mem14[r2_4 + 128:word32]
	word32 r1_17 = r1 + r3_12
	branch r2_15 >=u r3_12 l00000FB8
l00000FB8:
	branch r3_12 >u r1_17 l00000FC0
l00000F9A:
	branch r3_12 >u r1_17 l00000FBC
l00000FBC:
	branch r2_15 >=u r1_17 l00000F9E
l00000FC0:
	Mem31[r0:word32] = r1_17
	prvAddCurrentTaskToDelayedList.isra.0(r1_17 - r2_15)
	branch xTaskResumeAll(cpsr) == 0x00000000 l00000FA6
l00000F9E:
	Mem57[r0:word32] = r1_17
	branch xTaskResumeAll(cpsr) != 0x00000000 l00000FD0
l00000FD0:
	return
l00000FA6:
	Mem77[Mem75[0x00000FD8:word32]:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
	return
vTaskDelayUntil_exit:


void vTaskPlaceOnEventList(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 sp
vTaskPlaceOnEventList_entry:
l00000FDC:
	vListInsert(r0, Mem7[Mem7[0x00000FF4:word32] + 4:word32] + 0x00000038)
l00000FF0_thunk_prvAddCurrentTaskToDelayedList.isra.0:
	prvAddCurrentTaskToDelayedList.isra.0(r1)
	return
vTaskPlaceOnEventList_exit:


void vTaskPlaceOnUnorderedEventList(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31] r2:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 r5 sp
vTaskPlaceOnUnorderedEventList_entry:
l00000FF8:
	word32 r3_14 = Mem11[0x00001018:word32]
	word32 r3_18 = Mem11[r3_14 + 4:word32]
	Mem19[Mem11[r3_14 + 4:word32] + 56:word32] = r1 | 0x80000000
	vListInsertEnd(r0, r3_18 + 0x00000038)
l00001016_thunk_prvAddCurrentTaskToDelayedList.isra.0:
	prvAddCurrentTaskToDelayedList.isra.0(r2)
	return
vTaskPlaceOnUnorderedEventList_exit:


word32 xTaskRemoveFromEventList(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut: r0
// Trashed: NZCV r0 r1 r2
// Preserved: r3 r4 r5 r6 r7 sp
xTaskRemoveFromEventList_entry:
l0000101C:
	word32 r0_32
	word32 r4_18 = Mem15[0x0000107C:word32]
	word32 r5_19 = Mem15[Mem15[r0 + 12:word32] + 12:word32]
	uxListRemove(r5_19 + 0x00000038)
	branch Mem15[r4_18 + 140:word32] != 0x00000000 l00001070
l00001070:
	vListInsertEnd(r4_18 + 0x00000058, r5_19 + 0x00000038)
	r0_32 = r4_18 + 0x00000058
l00001034:
	uxListRemove(r5_19 + 0x00000024)
	word32 r0_50 = Mem15[r5_19 + 76:word32]
	Mem59[r4_18 + 124:word32] = 0x00000001 << r0_50 | Mem15[r4_18 + 124:word32]
	r0_32 = r4_18 + 0x00000008 + r0_50 * 0x00000014
	vListInsertEnd(r0_32, r5_19 + 0x00000024)
l0000105C:
	branch Mem67[r5_19 + 76:word32] <=u Mem67[Mem67[r4_18 + 4:word32] + 76:word32] l00001068
l00001066_1:
	r0_32 = 0x00000001
l00001068:
	Mem78[r4_18 + 144:word32] = r0_32
	return 0x00000000
xTaskRemoveFromEventList_exit:


void xTaskRemoveFromUnorderedEventList(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV lr r0 r1 r2
// Preserved: r3 r4 r5 r6 r7 sp
xTaskRemoveFromUnorderedEventList_entry:
l00001080:
	word32 r6_18 = Mem15[r0 + 12:word32]
	Mem21[r0:word32] = r1 | 0x80000000
	uxListRemove(r0)
	word32 r4_31 = Mem21[0x000010D4:word32]
	uxListRemove(r6_18 + 0x00000024)
	word32 r3_41 = Mem21[r6_18 + 76:word32]
	Mem49[r4_31 + 124:word32] = 0x00000001 << r3_41 | Mem21[r4_31 + 124:word32]
	vListInsertEnd(r4_31 + 0x00000008 + r3_41 * 0x00000014, r6_18 + 0x00000024)
	branch Mem49[r6_18 + 76:word32] <=u Mem49[Mem49[r4_31 + 4:word32] + 76:word32] l000010CA
l000010C8_1:
l000010CA:
	Mem64[r4_31 + 144:word32] = 0x00000001
	return
xTaskRemoveFromUnorderedEventList_exit:


void vTaskSwitchContext()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r2 r3
// Preserved: NZCV r0 r1 sp
vTaskSwitchContext_entry:
l000010D8:
	word32 r2_4 = Mem0[0x0000111C:word32]
	word32 r3_5 = Mem0[r2_4 + 140:word32]
	branch r3_5 != 0x00000000 l00001112
l00001112:
	Mem7[r2_4 + 144:word32] = 0x00000001
	return
l000010E0:
	word32 r1_23
	Mem8[r2_4 + 144:word32] = r3_5
	word32 r0_15 = r2_4 + (0x0000001F - (uint32) ((byte) __clz(Mem8[r2_4 + 124:word32]))) * 0x00000014
	word32 r1_19 = Mem8[Mem8[r0_15 + 12:word32] + 4:word32]
	Mem21[r0_15 + 12:word32] = r1_19
	r1_23 = r1_19
	branch r1_19 != r0_15 + 0x00000010 l00001108
l00001106_1:
	r1_23 = Mem21[r1_19 + 4:word32]
l00001108:
	word32 r3_26 = Mem21[r1_23 + 12:word32]
	branch r1_19 != r0_15 + 0x00000010 l0000110E
l0000110C_1:
	Mem29[r0_15 + 12:word32] = r1_23
l0000110E:
	Mem33[r2_4 + 4:word32] = r3_26
	return
vTaskSwitchContext_exit:


word32 uxTaskResetEventItemValue()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: r0
// Trashed: r0 r1 r2 r3
// Preserved: sp
uxTaskResetEventItemValue_entry:
l00001120:
	word32 r3_4 = Mem0[0x00001134:word32]
	word32 r0_8 = Mem0[Mem0[r3_4 + 4:word32] + 56:word32]
	Mem11[Mem0[r3_4 + 4:word32] + 56:word32] = 0x00000002 - Mem0[Mem0[r3_4 + 4:word32] + 76:word32]
	return r0_8
uxTaskResetEventItemValue_exit:


word32 xTaskGetCurrentTaskHandle()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: r0
// Trashed: r0 r3
// Preserved: sp
xTaskGetCurrentTaskHandle_entry:
l00001138:
	return Mem0[Mem0[0x00001140:word32] + 4:word32]
xTaskGetCurrentTaskHandle_exit:


void vTaskSetTimeOutState(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
vTaskSetTimeOutState_entry:
l00001144:
	word32 r3_4 = Mem0[0x00001154:word32]
	word32 r3_6 = Mem0[r3_4 + 128:word32]
	Mem8[r0:word32] = Mem0[r3_4 + 148:word32]
	Mem9[r0 + 4:word32] = r3_6
	return
vTaskSetTimeOutState_exit:


word32 xTaskCheckForTimeOut(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut: r0
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 sp
xTaskCheckForTimeOut_entry:
l00001158:
	vPortEnterCritical(cpsr)
	word32 r3_23 = Mem11[0x000011A8:word32]
	word32 r5_25 = Mem11[r3_23 + 128:word32]
	word32 r0_27 = Mem11[r0 + 4:word32]
	branch Mem11[r0:word32] == Mem11[r3_23 + 148:word32] l00001178
l00001174:
	branch r5_25 >=u r0_27 l0000119C
l00001178:
	word32 r2_34 = Mem11[r1:word32]
	branch r5_25 - r0_27 >=u r2_34 l0000119C
l0000119C:
	vPortExitCritical(cpsr)
	return 0x00000001
l00001180:
	word32 r1_60 = Mem11[r3_23 + 148:word32]
	word32 r3_61 = Mem11[r3_23 + 128:word32]
	Mem64[r1:word32] = r2_34 - r5_25 + r0_27
	Mem66[r0:word32] = r1_60
	Mem67[r0 + 4:word32] = r3_61
	vPortExitCritical(cpsr)
	return 0x00000000
xTaskCheckForTimeOut_exit:


void vTaskMissedYield()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
vTaskMissedYield_entry:
l000011AC:
	Mem6[Mem0[0x000011B8:word32] + 144:word32] = 0x00000001
	return
vTaskMissedYield_exit:


void vTaskPriorityInherit(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 r5 r6 r7 sp
vTaskPriorityInherit_entry:
l000011BC:
	branch r0 == 0x00000000 l00001246
l00001246:
	return
l000011C0:
	word32 r4_19 = Mem18[0x00001248:word32]
	word32 r3_20 = Mem18[r0 + 76:word32]
	branch r3_20 >=u Mem18[Mem18[r4_19 + 4:word32] + 76:word32] l000011F4
l000011CE:
	branch Mem18[r0 + 56:word32] < 0x00000000 l000011DE
l000011D4:
	Mem31[r0 + 56:word32] = 0x00000002 - Mem18[Mem18[r4_19 + 4:word32] + 76:word32]
l000011DE:
	word32 r5_33 = Mem32[0x0000124C:word32]
	branch Mem32[r0 + 52:word32] == r5_33 + r3_20 * 0x00000014 l000011F6
l000011F6:
	branch uxListRemove(r0 + 0x00000024) != 0x00000000 l00001220
l00001204:
	word32 r2_52 = Mem32[r0 + 76:word32]
	branch Mem32[r4_19 + r2_52 * 0x00000014 + 8:word32] != 0x00000000 l00001220
l00001212:
	Mem61[r4_19 + 124:word32] = Mem32[r4_19 + 124:word32] & ~(0x00000001 << r2_52)
l00001220:
	word32 r2_67 = Mem64[Mem64[r4_19 + 4:word32] + 76:word32]
	word32 r3_72 = 0x00000001 << r2_67 | Mem64[r4_19 + 124:word32]
	Mem75[r0 + 76:word32] = r2_67
	Mem78[r4_19 + 124:word32] = r3_72
	word32 r0_77 = r5_33 + r2_67 * 0x00000014
l00001242_thunk_vListInsertEnd:
	vListInsertEnd(r0_77, r0 + 0x00000024)
	return
l000011EE:
	Mem96[r0 + 76:word32] = Mem32[Mem32[r4_19 + 4:word32] + 76:word32]
l000011F4:
	return
vTaskPriorityInherit_exit:


word32 xTaskPriorityDisinherit(word32 r0, ptr32 & lrOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut: lr r0
// Trashed: NZCV lr r0 r1 r2
// Preserved: r3 r4 r5 r6 r7 sp
xTaskPriorityDisinherit_entry:
l00001250:
	branch r0 == 0x00000000 l000012C8
l000012C8:
	lrOut = lr
	return 0x00000000
l00001254:
	word32 r1_20 = Mem19[r0 + 76:word32]
	word32 r3_21 = Mem19[r0 + 92:word32]
	word32 r2_22 = Mem19[r0 + 88:word32]
	Mem25[r0 + 92:word32] = r3_21 - 0x00000001
	branch r1_20 == r2_22 l00001266
l00001264:
	branch r3_21 == 0x00000001 l0000126A
l0000126A:
	word32 r2_38
	branch uxListRemove(r0 + 0x00000024) != 0x00000000 l00001298
l00001298:
	r2_38 = Mem25[0x000012CC:word32]
l00001278:
	word32 r1_39 = Mem25[r0 + 76:word32]
	r2_38 = Mem25[0x000012CC:word32]
	branch Mem25[r2_38 + r1_39 * 0x00000014 + 8:word32] != 0x00000000 l0000129A
l00001288:
	Mem48[r2_38 + 124:word32] = Mem25[r2_38 + 124:word32] & ~(0x00000001 << r1_39)
l0000129A:
	word32 r3_52 = Mem51[r0 + 88:word32]
	word32 lr_54 = Mem51[r2_38 + 124:word32]
	word32 r0_55 = Mem51[0x000012D0:word32]
	Mem59[r0 + 76:word32] = r3_52
	Mem64[r0 + 56:word32] = 0x00000002 - r3_52
	Mem65[r2_38 + 124:word32] = 0x00000001 << r3_52 | lr_54
	vListInsertEnd(r0_55 + r3_52 * 0x00000014, r0 + 0x00000024)
	lrOut = lr_54
	return 0x00000001
l00001266:
	lrOut = lr
	return 0x00000000
xTaskPriorityDisinherit_exit:


word32 pvTaskIncrementMutexHeldCount()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: r0
// Trashed: NZCV r0 r1 r2 r3
// Preserved: sp
pvTaskIncrementMutexHeldCount_entry:
l000012D4:
	word32 r3_4 = Mem0[0x000012E8:word32]
	branch Mem0[r3_4 + 4:word32] == 0x00000000 l000012E2
l000012DA:
	word32 r1_6 = Mem0[r3_4 + 4:word32]
	Mem10[r1_6 + 92:word32] = Mem0[r1_6 + 92:word32] + 0x00000001
l000012E2:
	return Mem12[r3_4 + 4:word32]
pvTaskIncrementMutexHeldCount_exit:


void prvRestoreContextOfFirstTask(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed: fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Preserved: sp
prvRestoreContextOfFirstTask_entry:
l000012F0:
	__msr(cpsr, Mem0[Mem0[Mem0[0x00001724:word32]:word32]:word32])
	word32 r1_9 = Mem0[Mem0[0x00001330:word32]:word32]
	word32 r0_10 = Mem0[r1_9:word32]
	word32 r2_12 = Mem0[0x00001728:word32]
	word32 r5_14 = Mem0[r1_9 + 0x00000008:word32]
	word32 r6_15 = Mem0[r1_9 + 0x0000000C:word32]
	word32 r7_16 = Mem0[r1_9 + 0x00000010:word32]
	word32 r8_17 = Mem0[r1_9 + 0x00000014:word32]
	word32 r9_18 = Mem0[r1_9 + 0x00000018:word32]
	word32 r10_19 = Mem0[r1_9 + 0x0000001C:word32]
	word32 fp_20 = Mem0[r1_9 + 0x00000020:word32]
	Mem22[r2_12:word32] = Mem0[r1_9 + 0x00000004:word32]
	Mem23[r2_12 + 4:word32] = r5_14
	Mem24[r2_12 + 8:word32] = r6_15
	Mem25[r2_12 + 12:word32] = r7_16
	Mem26[r2_12 + 16:word32] = r8_17
	Mem27[r2_12 + 20:word32] = r9_18
	Mem28[r2_12 + 24:word32] = r10_19
	Mem29[r2_12 + 28:word32] = fp_20
	__msr(cpsr, Mem29[r0_10:word32])
	__msr(cpsr, r0_10 + 36)
	__msr(cpsr, 0x00000000)
	return
prvRestoreContextOfFirstTask_exit:


void prvSVCHandler(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31]
// LiveOut:
// Trashed: NZCV fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Preserved: sp
prvSVCHandler_entry:
l00001334:
	word32 r3_6 = (word32) Mem0[Mem0[r0 + 24:word32] - 2:byte]
	branch r3_6 == 0x00000001 l00001360
l00001360:
	Mem11[Mem0[0x00001378:word32]:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
	return
l0000133E:
	branch r3_6 <u 0x00000001 l00001354
l00001354:
	word32 r2_13 = Mem0[0x00001374:word32]
	Mem16[r2_13:word32] = Mem0[r2_13:word32] | 0xBE000000
l0000135E_thunk_prvRestoreContextOfFirstTask:
	prvRestoreContextOfFirstTask(cpsr)
	return
l00001340:
	branch r3_6 != 0x00000002 l00001352
l00001352:
	return
l00001344:
	__msr(cpsr, __mrs(cpsr) & ~0x00000001)
	return
prvSVCHandler_exit:


word32 pxPortInitialiseStack(word32 r0, word32 r1, word32 r2, word32 r3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31]
// LiveOut: r0
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 sp
pxPortInitialiseStack_entry:
l0000137C:
	word32 r3_11
	r3_11 = r3
	branch r3 != 0x00000001 l00001384
l00001382_1:
	r3_11 = 0x00000002
l00001384:
	branch r3 == 0x00000001 l00001390
l0000138E_1:
	r3_11 = 0x00000003
l00001390:
	Mem22[r0 - 32:word32] = r2
	Mem28[r0 + -8:word32] = r1 & ~0x00000001
	Mem30[r0 + -4:word32] = 0x01000000
	Mem32[r0 - 12:word32] = 0x00000000
	Mem35[r0 - 68:word32] = r3_11
	return r0 - 0x00000044
pxPortInitialiseStack_exit:


void xPortStartScheduler(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 sp
xPortStartScheduler_entry:
l000013B0:
	word32 r3_4 = Mem0[0x000014E8:word32]
	word32 r1_13 = Mem11[0x000014EC:word32]
	Mem15[r3_4:word32] = Mem11[r3_4:word32] | 0x00FF0000
	Mem18[r3_4:word32] = Mem15[r3_4:word32] | 0xFF000000
	branch Mem18[r1_13:word32] == 0x00000800 l00001400
l00001400:
	word32 r2_30
	word32 r0_22 = Mem18[0x000014FC:word32]
	word32 r1_25 = Mem18[0x00001500:word32] - r0_22
	Mem28[Mem18[0x00001504:word32]:word32] = r0_22 | 0x00000010
	branch r1_25 <=u 0x00000020 l000014DE
l000014DE:
	r2_30 = Mem28[0x00001548:word32]
l00001412:
	word32 r3_31 = 0x00000040
	word32 r2_32 = 0x00000005
l0000141E:
	r3_31 = r3_31 << 0x00000001
	branch r1_25 >u r3_31 l00001418
l00001418:
	r2_32 = r2_32 + 0x00000001
	branch r2_32 == 0x0000001F l000014CE
l000014CE:
	r2_30 = Mem28[0x00001538:word32]
l00001426:
	r2_30 = Mem28[0x00001508:word32] | r2_32 << 0x00000001
l0000142C:
	word32 r2_59
	word32 r1_51 = Mem28[0x0000150C:word32] - r0_22
	word32 r3_52 = Mem28[0x00001504:word32]
	Mem56[Mem28[0x00001510:word32]:word32] = r2_30
	Mem57[r3_52:word32] = r0_22 | 0x00000011
	branch r1_51 <=u 0x00000020 l000014DA
l000014DA:
	r2_59 = Mem57[0x00001544:word32]
l00001440:
	word32 r3_60 = 0x00000040
	word32 r2_61 = 0x00000005
l0000144C:
	r3_60 = r3_60 << 0x00000001
	branch r1_51 >u r3_60 l00001446
l00001446:
	r2_61 = r2_61 + 0x00000001
	branch r2_61 == 0x0000001F l000014D2
l000014D2:
	r2_59 = Mem57[0x0000153C:word32]
l00001454:
	r2_59 = Mem57[0x00001514:word32] | r2_61 << 0x00000001
l0000145A:
	word32 r0_100
	word32 r3_76 = Mem57[0x00001518:word32]
	word32 r0_79 = Mem57[0x00001504:word32]
	word32 r1_80 = Mem57[0x0000151C:word32] - r3_76
	Mem84[Mem57[0x00001510:word32]:word32] = r2_59
	Mem85[r0_79:word32] = r3_76 | 0x00000012
	branch r1_80 <=u 0x00000020 l000014E2
l000014E2:
	r0_100 = Mem85[0x0000154C:word32]
l00001470:
	word32 r3_88 = 0x00000040
	word32 r2_89 = 0x00000005
l0000147C:
	r3_88 = r3_88 << 0x00000001
	branch r1_80 >u r3_88 l00001476
l00001476:
	r2_89 = r2_89 + 0x00000001
	branch r2_89 == 0x0000001F l000014D6
l000014D6:
	r0_100 = Mem85[0x00001540:word32]
l00001484:
	r0_100 = Mem85[0x00001520:word32] | r2_89 << 0x00000001
l0000148A:
	word32 r4_107 = Mem85[0x00001504:word32]
	word32 r5_108 = Mem85[0x00001524:word32]
	word32 r1_109 = Mem85[0x00001528:word32]
	Mem111[Mem85[0x00001510:word32]:word32] = r0_100
	Mem112[r4_107:word32] = r5_108
	word32 r3_103 = 0x00000005
	word32 r2_104 = 0x00000040
l0000149A:
	word32 r3_120
	r3_103 = r3_103 + 0x00000001
	r2_104 = r2_104 << 0x00000001
	branch r3_103 == 0x0000001F l000014CA
l000014CA:
	r3_120 = Mem112[0x00001534:word32]
l000014A4:
	branch r2_104 <=u r1_109 l0000149A
l000014A8:
	r3_120 = Mem112[0x0000152C:word32] | r3_103 << 0x00000001
l000014AE:
	word32 r2_127 = Mem112[0x00001510:word32]
	word32 r1_128 = Mem112[0x00001530:word32]
	Mem130[r2_127:word32] = r3_120
	Mem133[r1_128:word32] = Mem130[r1_128:word32] | 0x00010000
	Mem136[r2_127 - 12:word32] = Mem133[r2_127 - 12:word32] | 0x00000005
l000013CE:
	word32 r2_142 = Mem140[0x000014F4:word32]
	word32 r3_143 = Mem140[0x000014F8:word32]
	Mem144[Mem140[0x000014F0:word32]:word32] = 0x00004E1F
	Mem145[r2_142:word32] = 0x00000007
	Mem146[r3_143:word32] = 0x00000000
	__msr(cpsr, Mem146[Mem146[Mem146[0x00001724:word32]:word32]:word32])
	__cps()
	__cps()
	__dsb_sy()
	__isb_sy()
	__syscall(0x00000000)
	return
xPortStartScheduler_exit:


void vPortEndScheduler()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
vPortEndScheduler_entry:
l00001550:
	return
vPortEndScheduler_exit:


void vPortStoreTaskMPUSettings(word32 r0, word32 r1, word32 r2, word32 r3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 sp
vPortStoreTaskMPUSettings_entry:
l00001554:
	branch r1 == 0x00000000 l000015DE
l000015DE:
	word32 r2_19
	word32 r3_11 = Mem7[0x00001668:word32]
	word32 r1_14 = Mem7[0x0000166C:word32] - r3_11
	Mem17[r0:word32] = r3_11 | 0x00000014
	branch r1_14 <=u 0x00000020 l0000165C
l0000165C:
	r2_19 = Mem17[0x00001680:word32]
l000015EE:
	word32 r3_20 = 0x00000040
	word32 r2_21 = 0x00000005
l000015FA:
	r3_20 = r3_20 << 0x00000001
	branch r3_20 <u r1_14 l000015F4
l000015F4:
	r2_21 = r2_21 + 0x00000001
	branch r2_21 == 0x0000001F l00001648
l00001648:
	r2_19 = Mem17[0x00001664:word32]
l00001602:
	r2_19 = Mem17[0x00001660:word32] | r2_21 << 0x00000001
l00001608:
	word32 r2_47
	word32 r3_36 = Mem17[0x00001670:word32]
	word32 r1_39 = Mem17[0x00001674:word32] - r3_36
	Mem44[r0 + 4:word32] = r2_19
	Mem45[r0 + 8:word32] = r3_36 | 0x00000015
	branch r1_39 <=u 0x00000020 l00001658
l00001658:
	r2_47 = Mem45[0x00001684:word32]
l0000161A:
	word32 r2_48 = 0x00000005
	word32 r3_49 = 0x00000040
l00001626:
	r3_49 = r3_49 << 0x00000001
	branch r1_39 >u r3_49 l00001620
l00001620:
	r2_48 = r2_48 + 0x00000001
	branch r2_48 == 0x0000001F l0000164C
l0000164C:
	r2_47 = Mem45[0x0000167C:word32]
l0000162E:
	r2_47 = Mem45[0x00001678:word32] | r2_48 << 0x00000001
l00001634:
	Mem68[r0 + 16:word32] = 0x00000016
	Mem70[r0 + 12:word32] = r2_47
	Mem71[r0 + 20:word32] = 0x00000000
	Mem72[r0 + 28:word32] = 0x00000000
	Mem73[r0 + 24:word32] = 0x00000017
	return
l0000155A:
	branch r3 != 0x00000000 l000015B0
l000015B0:
	word32 r4_101
	Mem86[r0:word32] = r2 | 0x00000014
	branch r3 << 2 <=u 0x00000020 l00001654
l00001654:
	r4_101 = Mem86[0x00001680:word32]
l000015BC:
	word32 r2_89 = 0x00000040
	word32 r4_90 = 0x00000005
l000015C8:
	r2_89 = r2_89 << 0x00000001
	branch r3 << 2 >u r2_89 l000015C2
l000015C2:
	r4_90 = r4_90 + 0x00000001
	branch r4_90 == 0x0000001F l000015DA
l000015DA:
	r4_101 = Mem86[0x00001664:word32]
l000015D0:
	r4_101 = Mem86[0x00001660:word32] | r4_90 << 0x00000001
l000015D6:
	Mem107[r0 + 4:word32] = r4_101
l0000155C:
	word32 r5_108 = 0x00000005
l0000155E:
	word32 r4_111 = Mem110[r1 + 4:word32]
	branch r4_111 == 0x00000000 l000015A2
l000015A2:
	Mem115[r0 + 12:word32] = r4_111
	Mem116[r0 + 8:word32] = r5_108 | 0x00000010
l00001562:
	word32 r3_123
	Mem121[r0 + 8:word32] = Mem110[r1:word32] | (r5_108 | 0x00000010)
	branch r4_111 <=u 0x00000020 l00001650
l00001650:
	r3_123 = 0x00000008
l00001570:
	word32 r2_124 = 0x00000040
	word32 r3_125 = 0x00000005
l0000157C:
	r2_124 = r2_124 << 0x00000001
	branch r4_111 >u r2_124 l00001576
l00001576:
	r3_125 = r3_125 + 0x00000001
	branch r3_125 == 0x0000001F l000015AC
l000015AC:
	r3_123 = 0x0000003E
l00001584:
	r3_123 = r3_125 << 1
l00001586:
	Mem149[r0 + 12:word32] = r3_123 | (Mem121[r1 + 8:word32] | 0x00000001)
l00001590:
	r5_108 = r5_108 + 0x00000001
	r1 = r1 + 0x0000000C
	r0 = r0 + 0x00000008
	branch r5_108 != 0x00000008 l0000155E
l0000159E:
	return
vPortStoreTaskMPUSettings_exit:


void xPortPendSVHandler(word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] fp:[0..31] r10:[0..31] r4:[0..31] r5:[0..31] r6:[0..31] r7:[0..31] r8:[0..31] r9:[0..31]
// LiveOut:
// Trashed: fp r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Preserved: lr sp
xPortPendSVHandler_entry:
l00001688:
	word32 r0_4 = __mrs(cpsr)
	word32 r3_6 = Mem0[0x000016E0:word32]
	word32 r2_7 = Mem0[r3_6:word32]
	Mem9[r0_4 + -36:word32] = __mrs(cpsr)
	Mem11[r0_4 + -32:word32] = r4
	Mem13[r0_4 + -28:word32] = r5
	Mem15[r0_4 + -24:word32] = r6
	Mem17[r0_4 + -20:word32] = r7
	Mem19[r0_4 + -16:word32] = r8
	Mem21[r0_4 + -12:word32] = r9
	Mem23[r0_4 + -8:word32] = r10
	Mem25[r0_4 + -4:word32] = fp
	Mem27[r2_7:word32] = r0_4 - 36
	__msr(cpsr, 0x000000BF)
	vTaskSwitchContext()
	__msr(cpsr, 0x00000000)
	word32 r1_39 = Mem31[r3_6:word32]
	word32 r0_40 = Mem31[r1_39:word32]
	word32 r2_42 = Mem31[0x00001728:word32]
	word32 r5_44 = Mem31[r1_39 + 0x00000008:word32]
	word32 r6_45 = Mem31[r1_39 + 0x0000000C:word32]
	word32 r7_46 = Mem31[r1_39 + 0x00000010:word32]
	word32 r8_47 = Mem31[r1_39 + 0x00000014:word32]
	word32 r9_48 = Mem31[r1_39 + 0x00000018:word32]
	word32 r10_49 = Mem31[r1_39 + 0x0000001C:word32]
	word32 fp_50 = Mem31[r1_39 + 0x00000020:word32]
	Mem52[r2_42:word32] = Mem31[r1_39 + 0x00000004:word32]
	Mem53[r2_42 + 4:word32] = r5_44
	Mem54[r2_42 + 8:word32] = r6_45
	Mem55[r2_42 + 12:word32] = r7_46
	Mem56[r2_42 + 16:word32] = r8_47
	Mem57[r2_42 + 20:word32] = r9_48
	Mem58[r2_42 + 24:word32] = r10_49
	Mem59[r2_42 + 28:word32] = fp_50
	__msr(cpsr, Mem59[r0_40:word32])
	__msr(cpsr, r0_40 + 36)
	return
xPortPendSVHandler_exit:


void xPortSysTickHandler(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: r4 sp
xPortSysTickHandler_entry:
l000016E4:
	word32 r4_9 = __mrs(cpsr)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	branch xTaskIncrementTick() == 0x00000000 l00001708
l00001700:
	Mem19[Mem7[0x00001710:word32]:word32] = 0x10000000
l00001708:
	__msr(cpsr, r4_9)
	return
xPortSysTickHandler_exit:


void vPortSVCHandler(word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31]
// LiveOut:
// Trashed: NZCV fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Preserved: sp
vPortSVCHandler_entry:
l00001714:
	branch (lr & 0x00000004) != 0x00000000 l0000171E
l0000171A_1:
	__mrs(cpsr)
l0000171E:
	word32 r0_9 = __mrs(cpsr)
l00001722_thunk_prvSVCHandler:
	prvSVCHandler(r0_9, cpsr)
	return
vPortSVCHandler_exit:


word32 pvPortMalloc(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31]
// LiveOut: r0
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 sp
pvPortMalloc_entry:
l0000172C:
	word32 r4_13 = r0
	branch r0 << 29 == 0x00000000 l00001738
l00001734_1:
	r4_13 = r0 & ~0x00000007
l00001738:
	vTaskSuspendAll()
	word32 r3_24 = Mem7[0x0000177C:word32]
	word32 r4_15 = r4_13 + 0x00000008
	branch Mem7[r3_24:word32] == 0x00000000 l00001770
l00001770:
	Mem28[r3_24:word32] = r3_24 + 0x0000000C & ~0x00000007
l00001744:
	word32 r2_32 = Mem31[r3_24 + 1472:word32]
	word32 r4_34 = r4_15 + r2_32
	branch r4_34 >u 0x000005B3 l00001766
l00001752:
	branch r2_32 >=u r4_34 l00001766
l00001766:
	xTaskResumeAll(cpsr)
	return 0x00000000
l00001756:
	word32 r1_59 = Mem31[r3_24:word32]
	Mem60[r3_24 + 1472:word32] = r4_34
	xTaskResumeAll(cpsr)
	return r1_59 + r2_32
pvPortMalloc_exit:


void vPortFree()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
vPortFree_entry:
l00001780:
	return
vPortFree_exit:


void vPortInitialiseBlocks()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
vPortInitialiseBlocks_entry:
l00001784:
	Mem6[Mem0[0x00001790:word32] + 1472:word32] = 0x00000000
	return
vPortInitialiseBlocks_exit:


void xPortGetFreeHeapSize()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r3
// Preserved: sp
xPortGetFreeHeapSize_entry:
l00001794:
	return
xPortGetFreeHeapSize_exit:


void xEventGroupCreate(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed: NZCV r1 r2 r3
// Preserved: r4 sp
xEventGroupCreate_entry:
l000017A8:
	word32 r0_10 = pvPortMalloc(0x00000018, cpsr)
	branch r0_10 == 0x00000000 l000017BE
l000017B4:
	Mem20[r0_10:word32] = 0x00000000
	vListInitialise(r0_10 + 4)
l000017BE:
	return
xEventGroupCreate_exit:


void xEventGroupWaitBits(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr, word32 dwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31] Stack +0000:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
xEventGroupWaitBits_entry:
l000017C4:
	bool C_28 = vTaskSuspendAll()
	word32 r5_112 = r1
	word32 r4_157 = Mem15[r0:word32]
	branch r3 != 0x00000000 l000017F2
l000017F2:
	branch (r1 & ~r4_157) == 0x00000000 l000017DC
l000017D8:
	r4_157 = r4_157 + r1 + C_28
	branch r4_157 == 0x00000000 l000017F8
l000017F8:
	branch dwArg00 == 0x00000000 l000017E8
l000017FE:
	branch r2 != 0x00000000 l00001806
l00001804_1:
l00001806:
	word32 r1_46 = 0x01000000
	branch r3 != 0x00000000 l0000183E
l0000183E:
	r1_46 = 0x05000000
l0000180C:
	vTaskPlaceOnUnorderedEventList(r0 + 0x00000004, r1_46 | r1, dwArg00)
	branch xTaskResumeAll(cpsr) != 0x00000000 l0000182C
l0000181C:
	Mem87[Mem15[0x00001870:word32]:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
l0000182C:
	branch uxTaskResetEventItemValue() << 6 >= 0x00000000 l00001844
l00001844:
	bool C_101 = vPortEnterCritical(cpsr)
	word32 r4_105 = Mem104[r0:word32]
	branch r3 != 0x00000000 l00001868
l00001868:
	branch (r1 & ~r4_105) != 0x00000000 l0000185C
l0000186E:
l0000184C:
	r5_112 = r1 + r4_105 + C_101
	branch r5_112 == 0x00000000 l0000185C
l00001850:
	branch r2 == 0x00000000 l0000185C
l00001856:
	Mem125[r0:word32] = r4_105 & ~r5_112
l0000185C:
	vPortExitCritical(cpsr)
	return
l00001836:
	return
l000017DC:
	branch r2 == 0x00000000 l000017E8
l000017E2:
	Mem161[r0:word32] = r4_157 & ~r1
l000017E8:
	xTaskResumeAll(cpsr)
	return
xEventGroupWaitBits_exit:


void xEventGroupClearBits(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2
// Preserved: r4 r5 r6 sp
xEventGroupClearBits_entry:
l00001874:
	vPortEnterCritical(cpsr)
	Mem25[r0:word32] = Mem11[r0:word32] & ~r1
	vPortExitCritical(cpsr)
	return
xEventGroupClearBits_exit:


void xEventGroupSetBits(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV lr r0 r1 r2
// Preserved: r3 r4 r5 r6 r7 sp
xEventGroupSetBits_entry:
l00001890:
	word32 r7_33
	vTaskSuspendAll()
	word32 r0_27 = Mem15[r0 + 16:word32]
	word32 r1_29 = Mem15[r0:word32] | r1
	Mem31[r0:word32] = r1_29
	branch r0 + 0x0000000C == r0_27 l000018F0
l000018F0:
	r7_33 = 0xFFFFFFFF
l000018AA:
	word32 r7_34 = 0x00000000
l000018C8:
	word32 r3_37 = Mem31[r0_27:word32]
	word32 r4_38 = Mem31[r0_27 + 4:word32]
	word32 r2_40 = r3_37 & ~0xFF000000
	branch (r3_37 & 0x04000000) == 0x00000000 l000018AE
l000018AE:
	r2_40 = r2_40 + r1_29 + ((r3_37 & 0x04000000) <u 0x00000000)
	branch r2_40 == 0x00000000 l000018C2
l000018D6:
	branch (r2_40 & ~r1_29) == 0x00000000 l000018B2
l000018B2:
	branch r3_37 << 7 >= 0x00000000 l000018B8
l000018B6:
	r7_34 = r7_34 | r2_40
l000018B8:
	xTaskRemoveFromUnorderedEventList(r0_27, r1_29 | 0x02000000)
	r1_29 = Mem31[r0:word32]
l000018C2:
	r0_27 = r4_38
	branch r0 + 0x0000000C == r4_38 l000018E2
l000018DC:
	r0_27 = r4_38
	branch r0 + 0x0000000C != r4_38 l000018C8
l000018E2:
	r7_33 = ~r7_34
l000018E4:
	Mem105[r0:word32] = r1_29 & r7_33
	xTaskResumeAll(cpsr)
	return
xEventGroupSetBits_exit:


void xEventGroupSync(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31]
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
xEventGroupSync_entry:
l000018F8:
	vTaskSuspendAll()
	word32 r4_33 = Mem15[r0:word32] | r1
	xEventGroupSetBits(r0, r1, cpsr)
	word32 r6_21 = r2
	branch (r2 & ~r4_33) == 0x00000000 l0000195E
l0000195E:
	Mem49[r0:word32] = Mem15[r0:word32] & ~r2
l0000191A:
	branch r3 != 0x00000000 l00001928
l00001928:
	vTaskPlaceOnUnorderedEventList(r0 + 0x00000004, r2 | 0x05000000, r3)
	branch xTaskResumeAll(cpsr) != 0x00000000 l0000194A
l0000193A:
	Mem71[Mem15[0x00001984:word32]:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
l0000194A:
	branch uxTaskResetEventItemValue() << 6 >= 0x00000000 l00001968
l00001968:
	vPortEnterCritical(cpsr)
	word32 r4_89 = Mem88[r0:word32]
	branch (r2 & ~r4_89) != 0x00000000 l00001978
l00001974_1:
	r6_21 = r4_89 & ~r2
l00001978:
	Mem97[r0:word32] = r6_21
	vPortExitCritical(cpsr)
l00001954:
l00001958:
	return
l0000191C:
l0000191E:
	xTaskResumeAll(cpsr)
	return
xEventGroupSync_exit:


void xEventGroupGetBitsFromISR(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed: r0 r2 r3
// Preserved: sp
xEventGroupGetBitsFromISR_entry:
l00001988:
	word32 r3_4 = __mrs(cpsr)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	__msr(cpsr, r3_4)
	return
xEventGroupGetBitsFromISR_exit:


void vEventGroupDelete(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 sp
vEventGroupDelete_entry:
l000019A4:
	vTaskSuspendAll()
	branch Mem7[r0 + 4:word32] == 0x00000000 l000019C0
l000019B0:
	xTaskRemoveFromUnorderedEventList(Mem7[r0 + 16:word32], 0x02000000)
	branch Mem7[r0 + 4:word32] != 0x00000000 l000019B0
l000019C0:
	vPortFree()
l000019CA_thunk_xTaskResumeAll:
	xTaskResumeAll(cpsr)
	return
vEventGroupDelete_exit:


void vEventGroupSetBitsCallback(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV lr r0 r1 r2
// Preserved: sp
vEventGroupSetBitsCallback_entry:
l000019D0:
l000019D0_thunk_xEventGroupSetBits:
	xEventGroupSetBits(r0, r1, cpsr)
	return
vEventGroupSetBitsCallback_exit:


void vEventGroupClearBitsCallback(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2
// Preserved: lr r3 r4 r5 sp
vEventGroupClearBitsCallback_entry:
l000019D4:
	vPortEnterCritical(cpsr)
	Mem25[r0:word32] = Mem11[r0:word32] & ~r1
l000019EA_thunk_vPortExitCritical:
	vPortExitCritical(cpsr)
	return
vEventGroupClearBitsCallback_exit:


void NmiSR()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
NmiSR_exit:
NmiSR_entry:
l00008000:


void FaultISR()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
FaultISR_exit:
FaultISR_entry:
l00008004:


void ResetISR(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
ResetISR_exit:
ResetISR_entry:
l00008008:
	word32 r3_16 = Mem0[0x0000802C:word32]
	word32 r0_5 = Mem0[0x00008030:word32]
	branch r3_16 >=u r0_5 l00008026
l00008010:
	word32 r2_13 = (~r3_16 + r0_5 & ~0x00000003) + 0x00000004 + r3_16
l0000801E:
	Mem17[r3_16:word32] = 0x00000000
	r3_16 = r3_16 + 4
	branch r3_16 != r2_13 l0000801E
l00008026:
l00008026_thunk_Main:
	Main(cpsr)


void raise()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
raise_exit:
raise_entry:
l00008034:


void vPrintTask(word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31]
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
vPrintTask_exit:
vPrintTask_entry:
l00008038:
	word32 r4_10 = 0x00000000
	word32 r5_11 = Mem9[0x00008064:word32]
l00008040:
	lr = MPU_xQueueGenericReceive(Mem9[r5_11:word32], fp - 20, 0xFFFFFFFF, 0x00000000, lr, cpsr)
	OSRAMClear()
	r4_10 = r4_10 + 0x00000001
	OSRAMStringDraw(dwLoc14, r4_10 & 0x0000003F, r4_10 & 0x00000001)


void vCheckTask(word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31]
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
vCheckTask_exit:
vCheckTask_entry:
l00008068:
	MPU_xTaskGetTickCount(cpsr)
	word32 r5_20 = Mem12[0x0000809C:word32]
l0000807C:
	MPU_vTaskDelayUntil(fp - 24, 0x00001388, cpsr)
	lr = MPU_xQueueGenericSend(Mem23[r5_20:word32], fp - 20, 0xFFFFFFFF, 0x00000000, lr, cpsr)


void Main(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
Main_exit:
Main_entry:
l000080A0:
	MPU_xQueueGenericCreate(0x00000003, 0x00000004, cpsr)
	Mem19[Mem5[0x000080F0:word32]:word32] = 0x00000003
	OSRAMInit(0x00000000)
	MPU_xTaskCreate(Mem34[0x000080F8:word32], Mem31[0x000080F4:word32], 0x0000003B, 0x00000000, cpsr, 0x00000003, 0x00000000)
	MPU_xTaskCreate(Mem47[0x00008100:word32], Mem34[0x000080FC:word32], 0x0000003B, 0x00000000, cpsr, 0x00000002, 0x00000000)
	vTaskStartScheduler(cpsr)
	OSRAMStringDraw(Mem47[0x00008104:word32], 0x00000000, 0x00000000)
l000080EC:


void vUART_ISR(word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31]
// LiveOut:
// Trashed: NZC r0 r1 r2 r3
// Preserved: V lr r4 r5 r6 sp
vUART_ISR_entry:
l00008108:
	word32 r5_13 = Mem11[0x00008174:word32]
	word32 r0_18 = UARTIntStatus(r5_13, 0x00000001)
	UARTIntClear(r5_13, r0_18)
	branch r0_18 << 27 >= 0x00000000 l00008130
l00008128:
	branch Mem17[Mem17[0x00008178:word32]:word32] << 25 < 0x00000000 l0000815E
l0000815E:
	xQueueGenericSendFromISR(fp - 0x00000015, r0_18, fp - 20, 0x00000000, lr, cpsr)
l00008130:
	branch r0_18 << 26 >= 0x00000000 l0000813C
l00008134:
	word32 r2_49 = Mem48[0x0000817C:word32]
	word32 r3_50 = (word32) Mem48[r2_49:byte]
	branch r3_50 <=u 0x0000007A l0000814C
l0000814C:
	word32 r1_54 = Mem48[Mem48[0x00008178:word32]:word32]
	word32 r1_55 = r1_54 << 26
	branch r1_54 << 26 < 0x00000000 l00008156
l00008154_1:
	r1_55 = Mem48[0x00008174:word32]
l00008156:
	Mem61[r1_55:word32] = r3_50
	Mem65[r2_49:byte] = (byte) (r3_50 + 0x00000001)
l0000813C:
	branch 0x00000000 == 0x00000000 l00008148
l00008140:
	Mem73[Mem69[0x00008180:word32]:word32] = 0x10000000
l00008148:
	return
vUART_ISR_exit:


word32 vSetErrorLED(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut: r0
// Trashed: NZCV r0 r1 r2 r3
// Preserved: sp
vSetErrorLED_entry:
l00008184:
l00008188_thunk_vParTestSetLED:
	return vParTestSetLED(0x00000007, 0x00000001, cpsr)
vSetErrorLED_exit:


word32 prvSetAndCheckRegisters(word32 cpsr, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & r8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut: r0 r4 r5 r6 r7 r8
// Trashed: NZCV fp ip r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Preserved: lr sp
prvSetAndCheckRegisters_entry:
l0000818C:
	branch false l00008200
l000081C6:
	branch false l00008200
l000081CA:
	branch false l00008200
l000081CE:
	branch false l00008200
l000081D2:
	branch false l00008200
l000081D6:
	branch false l00008200
l000081DA:
	branch false l00008200
l000081DE:
	branch false l00008200
l000081E2:
	branch false l00008200
l000081E6:
	branch false l00008200
l000081EC:
	branch false l00008200
l000081F2:
	branch false l00008200
l000081F8:
	branch false l00008200
l00008200:
	word32 r0_50 = vSetErrorLED(cpsr)
	r4Out = <invalid>
	r5Out = <invalid>
	r6Out = <invalid>
	r7Out = <invalid>
	r8Out = <invalid>
	return r0_50
l000081FE:
	r4Out = <invalid>
	r5Out = <invalid>
	r6Out = <invalid>
	r7Out = <invalid>
	r8Out = <invalid>
	return 0x0000000B
prvSetAndCheckRegisters_exit:


void vApplicationIdleHook(word32 r0, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31] r0:[0..31] r4:[0..31] r5:[0..31] r6:[0..31] r7:[0..31] r8:[0..31]
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
vApplicationIdleHook_exit:
vApplicationIdleHook_entry:
l00008210:
l00008212:
	lr = vCoRoutineSchedule(r0, r4, r5, r6, r7, r8, lr, cpsr, out cpsr)
	r0 = prvSetAndCheckRegisters(cpsr, out r4, out r5, out r6, out r7, out r8)


void PDCInit()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 r5 sp
PDCInit_entry:
l00008220:
	SysCtlPeripheralEnable(Mem9[0x0000828C:word32])
	SysCtlPeripheralEnable(Mem9[0x00008290:word32])
	GPIODirModeSet(0x40004000, 0x00000034, 0x00000002)
	GPIODirModeSet(0x40004000, 0x00000008, 0x00000001)
	GPIOPadConfigSet(0x40004000, 0x00000004, 0x00000002, 0x0000000A)
	word32 r5_55 = Mem9[0x00008294:word32]
	SSIConfig(r5_55, 0x00000000, 0x00000000, Mem9[0x00008298:word32], 0x00000008)
	SSIEnable(r5_55)
	GPIOPinWrite(0x40004000, 0x00000008, 0x00000000)
l00008288_thunk_GPIOPinWrite:
	GPIOPinWrite(0x40004000, 0x00000008, 0x00000008)
	return
PDCInit_exit:


word32 PDCWrite(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut: r0
// Trashed: NZC r0 r1 r2 r3
// Preserved: r4 r5 sp
PDCWrite_entry:
l0000829C:
	word32 r4_12 = Mem9[0x000082CC:word32]
	SSIDataPut(r4_12, r0 & 0x0000000F)
	SSIDataPut(r4_12, r1)
	SSIDataGet(r4_12, fp - 20)
	SSIDataGet(r4_12, fp - 20)
	return r4_12
PDCWrite_exit:


void vListInitialise(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r1 r2 r3
// Preserved: sp
vListInitialise_entry:
l000082D0:
	Mem7[r0 + 8:word32] = 0xFFFFFFFF
	Mem8[r0:word32] = 0x00000000
	Mem9[r0 + 4:word32] = r0 + 0x00000008
	Mem10[r0 + 12:word32] = r0 + 0x00000008
	Mem11[r0 + 16:word32] = r0 + 0x00000008
	return
vListInitialise_exit:


void vListInitialiseItem(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
vListInitialiseItem_entry:
l000082E8:
	Mem5[r0 + 16:word32] = 0x00000000
	return
vListInitialiseItem_exit:


void vListInsertEnd(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r2 r3
// Preserved: r4 sp
vListInsertEnd_entry:
l000082F0:
	word32 r3_6 = Mem0[r0 + 4:word32]
	word32 r2_5 = Mem0[r0:word32]
	Mem14[r1 + 8:word32] = Mem9[r3_6 + 8:word32]
	word32 r4_15 = Mem14[r3_6 + 8:word32]
	Mem16[r1 + 4:word32] = r3_6
	Mem17[r4_15 + 4:word32] = r1
	Mem18[r3_6 + 8:word32] = r1
	Mem21[r1 + 16:word32] = r0
	Mem22[r0:word32] = r2_5 + 0x00000001
	return
vListInsertEnd_exit:


bool vListInsert(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut: Z
// Trashed: NZCV r2 r3
// Preserved: r4 r5 sp
vListInsert_entry:
l0000830C:
	word32 r2_13
	word32 r3_14
	word32 r5_9 = Mem7[r1:word32]
	branch Z l00008338
l00008338:
	r2_13 = Mem7[r0 + 16:word32]
	r3_14 = Mem7[r2_13 + 4:word32]
l00008314:
	r2_13 = r0 + 0x00000008
l0000831C:
	r3_14 = Mem7[r2_13 + 4:word32]
	branch r5_9 >=u Mem7[r3_14:word32] l0000831A
l0000831A:
	r2_13 = r3_14
l00008324:
	word32 r4_27 = Mem7[r0:word32]
	Mem31[r1 + 4:word32] = r3_14
	Mem34[r3_14 + 8:word32] = r1
	Mem36[r1 + 8:word32] = r2_13
	Mem37[r2_13 + 4:word32] = r1
	Mem38[r1 + 16:word32] = r0
	Mem39[r0:word32] = r4_27 + 0x00000001
	return SLICE(cond(r4_27 + 0x00000001), bool, 2)
vListInsert_exit:


word32 uxListRemove(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut: r0
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 sp
uxListRemove_entry:
l00008340:
	word32 r2_5 = Mem0[r0 + 16:word32]
	word32 r3_6 = Mem0[r0 + 4:word32]
	Mem11[r3_6 + 8:word32] = Mem0[r0 + 8:word32]
	word32 r4_12 = Mem11[r2_5 + 4:word32]
	word32 r1_13 = Mem11[r0 + 8:word32]
	Mem15[r1_13 + 4:word32] = r3_6
	branch r0 != r4_12 l00008356
l00008354_1:
	Mem17[r2_5 + 4:word32] = r1_13
l00008356:
	word32 r3_21 = Mem20[r2_5:word32]
	Mem23[r0 + 16:word32] = 0x00000000
	Mem25[r2_5:word32] = r3_21 - 0x00000001
	return r3_21 - 0x00000001
uxListRemove_exit:


bool xQueueCRSend(word32 r0, word32 r1, word32 r2, word32 r7, word32 lr, word32 cpsr, ptr32 & r0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31] r7:[0..31]
// LiveOut: Z r0
// Trashed: NZCV lr r0 r1 r2 r3 r7
// Preserved: r4 r5 r6 sp
xQueueCRSend_entry:
l00008364:
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	vPortEnterCritical(cpsr)
	branch Mem11[r0 + 56:word32] == Mem11[r0 + 60:word32] l000083B2
l000083B2:
	bool Z_33 = vPortExitCritical(cpsr)
	branch r2 != 0x00000000 l000083D8
l000083D8:
	bool Z_43 = vCoRoutineAddToDelayedList(r2, r0 + 0x00000010)
	__msr(cpsr, 0x00000000)
	r0Out = ~0x00000003
	return Z_43
l000083B8:
	__msr(cpsr, r2)
	r0Out = r2
	return Z_33
l00008388:
	vPortExitCritical(cpsr)
	__msr(cpsr, 0x00000000)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	word32 r2_65 = Mem11[r0 + 56:word32]
	word32 r3_66 = Mem11[r0 + 60:word32]
	word32 r0_136 = 0x00000000
	bool Z_157 = SLICE(cond(r2_65 - r3_66), bool, 2)
	branch r2_65 <u r3_66 l000083C0
l000083C0:
	word32 lr_73
	word32 r7_78
	word32 r0_161
	Z_157 = prvCopyDataToQueue(r0, r1, 0x00000000, r7, lr, out r0_161, out r7_78, out lr_73)
	branch Mem11[r0 + 36:word32] != 0x00000000 l000083EE
l000083EE:
	word32 r0_85
	xCoRoutineRemoveFromEventList(r0 + 0x00000024, out r0_85)
	Z_157 = SLICE(cond(r0_85), bool, 2) (alias)
	branch r0_85 == 0x00000000 l000083CE
l000083FA:
	r0_136 = ~0x00000004
l000083CE:
	__msr(cpsr, 0x00000000)
	r0Out = 0x00000001
	return Z_157
l000083AA:
	__msr(cpsr, 0x00000000)
	r0Out = r0_136
	return Z_157
xQueueCRSend_exit:


bool xQueueCRReceive(word32 r0, word32 r1, word32 r2, word32 r6, word32 r7, word32 lr, word32 cpsr, ptr32 & r0Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & lrOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31] r6:[0..31] r7:[0..31]
// LiveOut: Z lr r0 r6 r7
// Trashed: NZCV lr r0 r1 r2 r6 r7
// Preserved: r3 r4 r5 sp
xQueueCRReceive_entry:
l00008400:
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	word32 r5_16 = Mem11[r0 + 56:word32]
	branch r5_16 != 0x00000000 l00008424
l00008424:
	word32 r0_158
	__msr(cpsr, 0x00000000)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	word32 r2_19 = Mem11[r0 + 56:word32]
	branch r2_19 != 0x00000000 l00008448
l00008448:
	word32 r1_30
	word32 r2_22 = Mem11[r0 + 64:word32]
	word32 r3_24 = Mem11[r0 + 4:word32]
	word32 r1_25 = Mem11[r0 + 12:word32] + r2_22
	word32 r3_27 = Mem11[r0 + 56:word32]
	Mem28[r0 + 12:word32] = r1_25
	r1_30 = r1_25
	branch r1_25 <u r3_24 l0000845C
l0000845A_1:
	r1_30 = Mem28[r0:word32]
l0000845C:
	Mem34[r0 + 56:word32] = r3_27 + 0xFFFFFFFF
	branch r1_25 <u r3_24 l00008466
l00008464_1:
	Mem37[r0 + 12:word32] = r1_30
l00008466:
	word32 r4_59
	word32 r5_189
	Z = memcpy(r1, r1_30, r2_22, r0, r5_16, r6, r7, lr, out r4_59, out r5_189, out r6, out r7, out lr)
	branch Mem67[r4_59 + 16:word32] != 0x00000000 l00008478
l00008478:
	word32 r0_70
	xCoRoutineRemoveFromEventList(r4_59 + 0x00000010, out r0_70)
	Z = SLICE(cond(r0_70), bool, 2) (alias)
	branch r0_70 == 0x00000000 l0000846E
l00008484:
	r0_158 = ~0x00000004
l0000846E:
	__msr(cpsr, 0x00000000)
	r0Out = 0x00000001
	r6Out = r6
	r7Out = r7
	lrOut = lr
	return Z
l0000843E:
	r0_158 = r2_19
l00008440:
	__msr(cpsr, 0x00000000)
	r0Out = r0_158
	r6Out = r6
	r7Out = r7
	lrOut = lr
	return Z
l00008418:
	bool Z_105 = SLICE(cond(r2), bool, 2)
	branch r2 != 0x00000000 l0000848A
l0000848A:
	bool Z_113 = vCoRoutineAddToDelayedList(r2, r0 + 0x00000024)
	__msr(cpsr, r5_16)
	r0Out = ~0x00000003
	r6Out = r6
	r7Out = r7
	lrOut = lr
	return Z_113
l0000841C:
	__msr(cpsr, r2)
	r0Out = r2
	r6Out = r6
	r7Out = r7
	lrOut = lr
	return Z_105
xQueueCRReceive_exit:


void xQueueCRSendFromISR(word32 r0, word32 r1, word32 r2, word32 r7, word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  lr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31] r7:[0..31]
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3 r7
// Preserved: r4 r5 r6 sp
xQueueCRSendFromISR_entry:
l000084A0:
	branch Mem11[r0 + 56:word32] <u Mem11[r0 + 60:word32] l000084B0
l000084B0:
	word32 lr_23
	word32 r7_28
	word32 r0_97
	prvCopyDataToQueue(r0, r1, 0x00000000, r7, lr, out r0_97, out r7_28, out lr_23)
	branch r2 != 0x00000000 l000084AC
l000084BC:
	branch Mem11[r0 + 36:word32] == 0x00000000 l000084AC
l000084C2:
	word32 r0_39
	branch xCoRoutineRemoveFromEventList(r0 + 0x00000024, out r0_39) l000084D0
l000084CE_1:
l000084D0:
l000084AC:
	return
xQueueCRSendFromISR_exit:


void xQueueCRReceiveFromISR(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31] r2:[0..31]
// LiveOut:
// Trashed: NZCV lr r0 r1 r2
// Preserved: r3 r4 r5 r6 r7 sp
xQueueCRReceiveFromISR_entry:
l000084D4:
	branch Mem15[r0 + 56:word32] == 0x00000000 l00008514
l00008514:
	return
l000084DA:
	word32 r3_38
	word32 lr_26 = Mem15[r0 + 64:word32]
	word32 r4_27 = Mem15[r0 + 4:word32]
	word32 r3_28 = Mem15[r0 + 12:word32] + lr_26
	word32 r7_35 = Mem15[r0 + 56:word32]
	Mem36[r0 + 12:word32] = r3_28
	r3_38 = r3_28
	branch r3_28 <u r4_27 l000084F4
l000084F2_1:
	r3_38 = Mem36[r0:word32]
l000084F4:
	branch r3_28 <u r4_27 l000084FC
l000084FA_1:
	Mem44[r0 + 12:word32] = r3_38
l000084FC:
	Mem56[r0 + 56:word32] = r7_35 + 0xFFFFFFFF
	word32 r6_153
	word32 r4_64
	word32 r5_65
	word32 r7_154
	word32 lr_155
	memcpy(r1, r3_38, lr_26, r0, r2, r1, r7_35 + 0xFFFFFFFF, lr_26, out r4_64, out r5_65, out r6_153, out r7_154, out lr_155)
	branch Mem56[r5_65:word32] != 0x00000000 l00008510
l0000850C:
	branch Mem56[r4_64 + 16:word32] != 0x00000000 l00008518
l00008518:
	word32 r0_75
	xCoRoutineRemoveFromEventList(r4_64 + 0x00000010, out r0_75)
	branch r0_75 == 0x00000000 l00008510
l00008524:
	Mem86[r5_65:word32] = 0x00000001
	return
l00008510:
	return
xQueueCRReceiveFromISR_exit:


void prvIdleTask(word32 r0, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31] r0:[0..31] r4:[0..31] r5:[0..31] r6:[0..31] r7:[0..31] r8:[0..31]
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
prvIdleTask_exit:
prvIdleTask_entry:
l0000852C:
l0000852E:
	vApplicationIdleHook(r0, r4, r5, r6, r7, r8, lr, cpsr)


void xTaskNotifyStateClear(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2
// Preserved: r3 r4 r5 sp
xTaskNotifyStateClear_entry:
l00008534:
	word32 r4_14
	branch r0 == 0x00000000 l00008558
l00008558:
	r4_14 = Mem11[Mem11[0x00008560:word32] + 4:word32]
l00008538:
	r4_14 = r0
l0000853A:
	vPortEnterCritical(cpsr)
	word32 r3_26 = (word32) Mem11[r4_14 + 100:byte]
	branch r3_26 != 0x00000002 l00008548
l00008546_1:
	r3_26 = 0x00000000
l00008548:
	Mem33[r4_14 + 100:byte] = (byte) r3_26
	vPortExitCritical(cpsr)
	return
xTaskNotifyStateClear_exit:


word32 xPortRaisePrivilege(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut: r0
// Trashed: NZC r0
// Preserved: sp
xPortRaisePrivilege_entry:
l00008564:
	branch (__mrs(cpsr) & 0x00000001) == 0x00000000 l00008570
l0000856E_1:
l00008570:
	__syscall(0x00000002)
	return 0x00000001
xPortRaisePrivilege_exit:


bool vPortEnterCritical(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut: C
// Trashed: NZCV r0 r2
// Preserved: r3 sp
vPortEnterCritical_entry:
l00008578:
	word32 r0_9 = xPortRaisePrivilege(cpsr)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	word32 r2_14 = Mem7[0x000085AC:word32]
	Mem18[r2_14:word32] = Mem7[r2_14:word32] + 0x00000001
	bool C_30 = SLICE(cond(r0_9 - 0x00000001), bool, 1)
	branch r0_9 == 0x00000001 l000085A8
l0000859C:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l000085A8:
	return C_30
vPortEnterCritical_exit:


bool vPortExitCritical(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut: Z
// Trashed: NZCV r0 r2
// Preserved: r3 sp
vPortExitCritical_entry:
l000085B0:
	word32 r0_9 = xPortRaisePrivilege(cpsr)
	word32 r2_13 = Mem7[0x000085D8:word32]
	word32 r3_14 = Mem7[r2_13:word32]
	Mem17[r2_13:word32] = r3_14 - 0x00000001
	branch r3_14 != 0x00000001 l000085C4
l000085C0:
	__msr(cpsr, r3_14 - 0x00000001)
l000085C4:
	bool Z_20 = SLICE(cond(r0_9 - 0x00000001), bool, 2)
	branch r0_9 == 0x00000001 l000085D4
l000085C8:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l000085D4:
	return Z_20
vPortExitCritical_exit:


void vParTestInitialise()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr sp
vParTestInitialise_entry:
l000085DC:
	PDCInit()
	word32 r1_18 = (word32) Mem7[Mem7[0x000085F0:word32]:byte]
l000085EC_thunk_PDCWrite:
	PDCWrite(0x00000005, r1_18)
	return
vParTestInitialise_exit:


word32 vParTestSetLED(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut: r0
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 r5 sp
vParTestSetLED_entry:
l000085F4:
	word32 r0_17 = MPU_vTaskSuspendAll(cpsr)
	branch r0 >u 0x00000007 l0000861C
l00008602:
	word32 r3_28 = Mem11[0x0000862C:word32]
	word32 r0_29 = (uint32) (byte) (0x00000001 << r0)
	word32 r2_30 = (word32) Mem11[r3_28:byte]
	branch r1 == 0x00000000 l00008624
l00008624:
	Mem32[r3_28:byte] = (byte) (r2_30 & ~r0_29)
l00008610:
	Mem35[r3_28:byte] = (byte) (r0_29 | r2_30)
l00008614:
	r0_17 = PDCWrite(0x00000005, (word32) Mem37[r3_28:byte])
l0000861C:
l00008620_thunk_MPU_xTaskResumeAll:
	MPU_xTaskResumeAll(cpsr)
	return r0_17
vParTestSetLED_exit:


void vParTestToggleLED(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 sp
vParTestToggleLED_entry:
l00008630:
	MPU_vTaskSuspendAll(cpsr)
	branch r0 >u 0x00000007 l0000865A
l0000863C:
	word32 r3_21 = Mem7[0x0000866C:word32]
	word32 r0_22 = 0x00000001 << r0
	word32 r2_26 = (uint32) (byte) r0_22 + (word32) Mem7[r3_21:byte] + (r0 <u 0x00000007)
	branch r2_26 != 0x00000000 l00008662
l00008662:
	Mem31[r3_21:byte] = (byte) ((word32) Mem7[r3_21:byte] & ~r0_22)
l0000864C:
	Mem35[r3_21:byte] = (byte) (r2_26 | (word32) Mem7[r3_21:byte])
l00008652:
	PDCWrite(0x00000005, (word32) Mem37[r3_21:byte])
l0000865A:
l0000865E_thunk_MPU_xTaskResumeAll:
	MPU_xTaskResumeAll(cpsr)
	return
vParTestToggleLED_exit:


void prvFlashCoRoutine(word32 r0, word32 r7, word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31] r0:[0..31] r7:[0..31]
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3 r7
// Preserved: cpsr r4 r5 r6 sp
prvFlashCoRoutine_entry:
l00008670:
	word32 r5_107
	word32 r6_105
	word32 r0_26
	word32 r3_13 = (word32) Mem11[r0 + 52:word16]
	branch r3_13 == 0x000001C2 l000086B6
l000086B6:
	r5_107 = Mem11[0x000086E0:word32]
	branch xQueueCRReceive(Mem11[r5_107:word32], fp - 20, 0x00000000, fp - 20, r7, lr, cpsr, out r0_26, out r6_105, out r7, out lr) l000086AA
l0000867E:
	branch r3_13 == 0x000001C3 l0000868C
l0000868C:
	r5_107 = Mem11[0x000086E0:word32]
	r6_105 = fp - 20
l00008686:
	branch r3_13 == 0x00000000 l000086D2
l000086D2:
	r5_107 = Mem11[0x000086E0:word32]
	r6_105 = fp - 20
l00008696:
	bool Z_59 = xQueueCRReceive(Mem47[r5_107:word32], r6_105, 0xFFFFFFFF, r6_105, r7, lr, cpsr, out r0_26, out r6_105, out r7, out lr)
	branch Z_59 l000086D8
l000086D8:
	Mem65[r0 + 52:word16] = 0x01C2
l000086A6:
	branch Z_59 l000086C8
l000086C8:
	Mem69[r0 + 52:word16] = 0x01C3
	return
l000086AA:
	branch r0_26 == 0x00000001 l00008690
l00008690:
	vParTestToggleLED(dwLoc14, cpsr)
l000086AE:
	Mem97[Mem83[0x000086E4:word32]:word32] = 0x00000000
l00008688:
	return
prvFlashCoRoutine_exit:


void prvFixedDelayCoRoutine(word32 r0, word32 r1, word32 r7, word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31] r0:[0..31] r1:[0..31] r7:[0..31]
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3 r7
// Preserved: r4 sp
prvFixedDelayCoRoutine_entry:
l000086E8:
	word32 r0_81
	bool Z_29
	word32 r0_22
	word32 r3_9 = (word32) Mem7[r0 + 52:word16]
	branch r3_9 == 0x00000182 l00008750
l00008750:
	Z_29 = xQueueCRSend(Mem14[Mem14[0x0000877C:word32]:word32], fp - 12, 0x00000000, r7, lr, cpsr, out r0_22)
l000086F8:
	branch r3_9 <=u 0x00000182 l00008748
l00008748:
	branch r3_9 == 0x00000000 l0000871C
l0000874C:
	return
l000086FA:
	branch r3_9 != 0x00000183 l00008716
l00008716:
	branch r3_9 != 0x00000196 l00008712
l0000871C:
	Z_29 = xQueueCRSend(Mem14[Mem14[0x0000877C:word32]:word32], fp - 12, 0x00000000, r7, lr, cpsr, out r0_22)
	branch Z_29 l0000876E
l0000876E:
	Mem65[r0 + 52:word16] = 0x0182
l0000872C:
	branch Z_29 l00008766
l00008766:
	Mem71[r0 + 52:word16] = 0x0183
l00008730:
	branch r0_22 == 0x00000001 l00008702
l00008734:
	Mem77[Mem14[0x00008780:word32]:word32] = 0x00000000
	r0_81 = Mem77[Mem77[0x00008778:word32] + (r1 << 2):word32]
	branch r0_81 == 0x00000000 l0000870C
l00008746:
l00008702:
	r0_81 = Mem14[Mem14[0x00008778:word32] + (r1 << 2):word32]
	branch r0_81 != 0x00000000 l0000875E
l0000875E:
	vCoRoutineAddToDelayedList(r0_81, 0x00000000)
l0000870C:
	Mem103[r0 + 52:word16] = 0x0196
l00008712:
	return
prvFixedDelayCoRoutine_exit:


void vStartFlashCoRoutines(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 r5 r6 sp
vStartFlashCoRoutines_entry:
l00008784:
	branch r0 <u 0x00000008 l0000878A
l00008788_1:
	r0 = 0x00000008
l0000878A:
	MPU_xQueueGenericCreate(0x00000001, 0x00000004, cpsr)
	Mem35[Mem20[0x000087C4:word32]:word32] = 0x00000001
	branch 0x00000001 == 0x00000000 l000087C2
l000087C2:
	return
l0000879E:
	branch r0 == 0x00000000 l000087B4
l000087A0:
	word32 r4_40 = 0x00000000
	word32 r6_41 = Mem35[0x000087C8:word32]
l000087A4:
	xCoRoutineCreate(r6_41, 0x00000000, r4_40, cpsr)
	r4_40 = r4_40 + 0x00000001
	branch r4_40 != r0 l000087A4
l000087B4:
	word32 r0_71 = Mem35[0x000087CC:word32]
l000087BE_thunk_xCoRoutineCreate:
	xCoRoutineCreate(r0_71, 0x00000001, 0x00000000, cpsr)
	return
vStartFlashCoRoutines_exit:


void xAreFlashCoRoutinesStillRunning()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
xAreFlashCoRoutinesStillRunning_entry:
l000087D0:
	return
xAreFlashCoRoutinesStillRunning_exit:


void MPU_xTaskCreateRestricted(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV lr r1 r2 r3
// Preserved: r4 r5 r6 sp
MPU_xTaskCreateRestricted_entry:
l000087DC:
	word32 r0_17 = xPortRaisePrivilege(cpsr)
	xTaskCreateRestricted(r0, r1, cpsr)
	branch r0_17 == 0x00000001 l00008802
l000087F6:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008802:
	return
MPU_xTaskCreateRestricted_exit:


void MPU_xTaskCreate(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr, word32 dwArg00, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31] Stack +0000:[0..31] Stack +0004:[0..31]
// LiveOut:
// Trashed: NZCV r1 r2 r3
// Preserved: r10 r4 r5 r6 r7 r8 r9 sp
MPU_xTaskCreate_entry:
l00008808:
	word32 r0_32 = xPortRaisePrivilege(cpsr)
	xTaskCreate(r0, r1, r2, r3, cpsr, dwArg00, dwArg04)
	branch r0_32 == 0x00000001 l00008842
l00008836:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008842:
	return
MPU_xTaskCreate_exit:


void MPU_vTaskAllocateMPURegions(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 sp
MPU_vTaskAllocateMPURegions_entry:
l0000884C:
	word32 r0_17 = xPortRaisePrivilege(cpsr)
	vTaskAllocateMPURegions(r0, r1)
	branch r0_17 == 0x00000001 l00008870
l00008864:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008870:
	return
MPU_vTaskAllocateMPURegions_exit:


void MPU_vTaskDelayUntil(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 sp
MPU_vTaskDelayUntil_entry:
l00008874:
	word32 r0_17 = xPortRaisePrivilege(cpsr)
	vTaskDelayUntil(r0, r1, cpsr)
	branch r0_17 == 0x00000001 l00008898
l0000888C:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008898:
	return
MPU_vTaskDelayUntil_exit:


void MPU_vTaskDelay(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: r3 r4 r5 sp
MPU_vTaskDelay_entry:
l0000889C:
	word32 r0_15 = xPortRaisePrivilege(cpsr)
	vTaskDelay(r0, cpsr)
	branch r0_15 == 0x00000001 l000088BC
l000088B0:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l000088BC:
	return
MPU_vTaskDelay_exit:


word32 MPU_vTaskSuspendAll(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut: r0
// Trashed: NZCV r0 r2 r3
// Preserved: r4 sp
MPU_vTaskSuspendAll_entry:
l000088C0:
	word32 r0_23 = xPortRaisePrivilege(cpsr)
	vTaskSuspendAll()
	branch r0_23 == 0x00000001 l000088DC
l000088D0:
	word32 r0_22 = __mrs(cpsr)
	__msr(cpsr, r0_22 | 0x00000001)
	r0_23 = r0_22 | 0x00000001
l000088DC:
	return r0_23
MPU_vTaskSuspendAll_exit:


void MPU_xTaskResumeAll(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed: NZCV r1 r2 r3
// Preserved: r4 sp
MPU_xTaskResumeAll_entry:
l000088E0:
	word32 r0_9 = xPortRaisePrivilege(cpsr)
	xTaskResumeAll(cpsr)
	branch r0_9 == 0x00000001 l000088FE
l000088F2:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l000088FE:
	return
MPU_xTaskResumeAll_exit:


void MPU_xTaskGetTickCount(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed: NZCV r3
// Preserved: r4 sp
MPU_xTaskGetTickCount_entry:
l00008904:
	word32 r0_9 = xPortRaisePrivilege(cpsr)
	xTaskGetTickCount()
	branch r0_9 == 0x00000001 l00008922
l00008916:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008922:
	return
MPU_xTaskGetTickCount_exit:


void MPU_uxTaskGetNumberOfTasks(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed: NZCV r3
// Preserved: r4 sp
MPU_uxTaskGetNumberOfTasks_entry:
l00008928:
	word32 r0_9 = xPortRaisePrivilege(cpsr)
	uxTaskGetNumberOfTasks()
	branch r0_9 == 0x00000001 l00008946
l0000893A:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008946:
	return
MPU_uxTaskGetNumberOfTasks_exit:


void MPU_pcTaskGetName(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31]
// LiveOut:
// Trashed: NZCV
// Preserved: r3 r4 r5 sp
MPU_pcTaskGetName_entry:
l0000894C:
	word32 r0_15 = xPortRaisePrivilege(cpsr)
	pcTaskGetName(r0)
	branch r0_15 == 0x00000001 l0000896E
l00008962:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l0000896E:
	return
MPU_pcTaskGetName_exit:


void MPU_vTaskSetTimeOutState(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2
// Preserved: r3 r4 r5 sp
MPU_vTaskSetTimeOutState_entry:
l00008974:
	word32 r0_15 = xPortRaisePrivilege(cpsr)
	vTaskSetTimeOutState(r0)
	branch r0_15 == 0x00000001 l00008994
l00008988:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008994:
	return
MPU_vTaskSetTimeOutState_exit:


void MPU_xTaskCheckForTimeOut(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r1 r2 r3
// Preserved: r4 r5 r6 sp
MPU_xTaskCheckForTimeOut_entry:
l00008998:
	word32 r0_17 = xPortRaisePrivilege(cpsr)
	xTaskCheckForTimeOut(r0, r1, cpsr)
	branch r0_17 == 0x00000001 l000089BE
l000089B2:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l000089BE:
	return
MPU_xTaskCheckForTimeOut_exit:


void MPU_xTaskGenericNotify(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31]
// LiveOut:
// Trashed: NZCV lr r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
MPU_xTaskGenericNotify_entry:
l000089C4:
	word32 r0_25 = xPortRaisePrivilege(cpsr)
	xTaskGenericNotify(r0, r1, r2, r3, cpsr)
	branch r0_25 == 0x00000001 l000089F4
l000089E8:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l000089F4:
	return
MPU_xTaskGenericNotify_exit:


void MPU_xTaskNotifyWait(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31]
// LiveOut:
// Trashed: NZCV r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
MPU_xTaskNotifyWait_entry:
l000089FC:
	word32 r0_25 = xPortRaisePrivilege(cpsr)
	xTaskNotifyWait(r0, r1, r2, r3, cpsr)
	branch r0_25 == 0x00000001 l00008A2C
l00008A20:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008A2C:
	return
MPU_xTaskNotifyWait_exit:


void MPU_ulTaskNotifyTake(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r2 r3
// Preserved: r1 r4 r5 r6 sp
MPU_ulTaskNotifyTake_entry:
l00008A34:
	word32 r0_17 = xPortRaisePrivilege(cpsr)
	ulTaskNotifyTake(r0, r1, cpsr)
	branch r0_17 == 0x00000001 l00008A5A
l00008A4E:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008A5A:
	return
MPU_ulTaskNotifyTake_exit:


void MPU_xTaskNotifyStateClear(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31]
// LiveOut:
// Trashed: NZCV r2
// Preserved: r3 r4 r5 sp
MPU_xTaskNotifyStateClear_entry:
l00008A60:
	word32 r0_15 = xPortRaisePrivilege(cpsr)
	xTaskNotifyStateClear(r0, cpsr)
	branch r0_15 == 0x00000001 l00008A82
l00008A76:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008A82:
	return
MPU_xTaskNotifyStateClear_exit:


void MPU_xQueueGenericCreate(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r1 r2
// Preserved: r0 r3 r4 r5 r6 r7 sp
MPU_xQueueGenericCreate_entry:
l00008A88:
	word32 r0_23 = xPortRaisePrivilege(cpsr)
	xQueueGenericCreate(r0, r1, cpsr)
	branch r0_23 == 0x00000001 l00008AB2
l00008AA6:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008AB2:
	return
MPU_xQueueGenericCreate_exit:


void MPU_xQueueGenericReset(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r1 r2 r3
// Preserved: r4 r5 r6 sp
MPU_xQueueGenericReset_entry:
l00008AB8:
	word32 r0_17 = xPortRaisePrivilege(cpsr)
	xQueueGenericReset(r0, r1, cpsr)
	branch r0_17 == 0x00000001 l00008ADE
l00008AD2:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008ADE:
	return
MPU_xQueueGenericReset_exit:


word32 MPU_xQueueGenericSend(word32 r0, word32 r1, word32 r2, word32 r3, word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31]
// LiveOut: lr
// Trashed: NZCV lr r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
MPU_xQueueGenericSend_entry:
l00008AE4:
	word32 r0_25 = xPortRaisePrivilege(cpsr)
	word32 lr_34 = xQueueGenericSend(r0, r1, r2, r3, lr, cpsr)
	branch r0_25 == 0x00000001 l00008B14
l00008B08:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008B14:
	return lr_34
MPU_xQueueGenericSend_exit:


void MPU_uxQueueMessagesWaiting(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed: NZCV r2
// Preserved: r3 r4 r5 sp
MPU_uxQueueMessagesWaiting_entry:
l00008B1C:
	word32 r0_15 = xPortRaisePrivilege(cpsr)
	uxQueueMessagesWaiting(cpsr)
	branch r0_15 == 0x00000001 l00008B3E
l00008B32:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008B3E:
	return
MPU_uxQueueMessagesWaiting_exit:


void MPU_uxQueueSpacesAvailable(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed: NZCV r2
// Preserved: r3 r4 r5 sp
MPU_uxQueueSpacesAvailable_entry:
l00008B44:
	word32 r0_15 = xPortRaisePrivilege(cpsr)
	uxQueueSpacesAvailable(cpsr)
	branch r0_15 == 0x00000001 l00008B66
l00008B5A:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008B66:
	return
MPU_uxQueueSpacesAvailable_exit:


word32 MPU_xQueueGenericReceive(word32 r0, word32 r1, word32 r2, word32 r3, word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31]
// LiveOut: lr
// Trashed: NZCV lr r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
MPU_xQueueGenericReceive_entry:
l00008B6C:
	word32 r0_25 = xPortRaisePrivilege(cpsr)
	word32 lr_34
	xQueueGenericReceive(r0, r1, r2, r3, lr, cpsr, out lr_34)
	branch r0_25 == 0x00000001 l00008B9C
l00008B90:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008B9C:
	return lr_34
MPU_xQueueGenericReceive_exit:


void MPU_xQueuePeekFromISR(word32 r0, word32 r1, word32 r7, word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31] r0:[0..31] r1:[0..31] r7:[0..31]
// LiveOut:
// Trashed: NZCV lr r1 r2 r3 r7
// Preserved: r4 r5 r6 sp
MPU_xQueuePeekFromISR_entry:
l00008BA4:
	word32 r0_17 = xPortRaisePrivilege(cpsr)
	xQueuePeekFromISR(r0, r1, r7, lr, cpsr)
	branch r0_17 == 0x00000001 l00008BCA
l00008BBE:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008BCA:
	return
MPU_xQueuePeekFromISR_exit:


void MPU_xQueueGetMutexHolder(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31]
// LiveOut:
// Trashed: NZCV r2
// Preserved: r3 r4 r5 sp
MPU_xQueueGetMutexHolder_entry:
l00008BD0:
	word32 r0_15 = xPortRaisePrivilege(cpsr)
	xQueueGetMutexHolder(r0, cpsr)
	branch r0_15 == 0x00000001 l00008BF2
l00008BE6:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008BF2:
	return
MPU_xQueueGetMutexHolder_exit:


void MPU_xQueueCreateMutex(word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31]
// LiveOut:
// Trashed: NZCV lr r1 r2
// Preserved: r3 r4 r5 sp
MPU_xQueueCreateMutex_entry:
l00008BF8:
	word32 r0_15 = xPortRaisePrivilege(cpsr)
	xQueueCreateMutex(lr, cpsr)
	branch r0_15 == 0x00000001 l00008C1A
l00008C0E:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008C1A:
	return
MPU_xQueueCreateMutex_exit:


void MPU_xQueueTakeMutexRecursive(word32 r0, word32 r1, word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV lr r1 r2 r3
// Preserved: r4 r5 r6 sp
MPU_xQueueTakeMutexRecursive_entry:
l00008C20:
	word32 r0_17 = xPortRaisePrivilege(cpsr)
	xQueueTakeMutexRecursive(r0, r1, lr, cpsr)
	branch r0_17 == 0x00000001 l00008C46
l00008C3A:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008C46:
	return
MPU_xQueueTakeMutexRecursive_exit:


void MPU_xQueueGiveMutexRecursive(word32 r0, word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31] r0:[0..31]
// LiveOut:
// Trashed: NZCV lr r1 r2
// Preserved: r3 r4 r5 sp
MPU_xQueueGiveMutexRecursive_entry:
l00008C4C:
	word32 r0_15 = xPortRaisePrivilege(cpsr)
	xQueueGiveMutexRecursive(r0, lr, cpsr)
	branch r0_15 == 0x00000001 l00008C6E
l00008C62:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008C6E:
	return
MPU_xQueueGiveMutexRecursive_exit:


void MPU_vQueueDelete(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed: NZCV r0
// Preserved: r3 r4 r5 sp
MPU_vQueueDelete_entry:
l00008C74:
	word32 r0_15 = xPortRaisePrivilege(cpsr)
	vQueueDelete()
	branch r0_15 == 0x00000001 l00008C94
l00008C88:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008C94:
	return
MPU_vQueueDelete_exit:


void MPU_pvPortMalloc(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31]
// LiveOut:
// Trashed: NZCV r1 r2
// Preserved: r3 r4 r5 sp
MPU_pvPortMalloc_entry:
l00008C98:
	word32 r0_15 = xPortRaisePrivilege(cpsr)
	pvPortMalloc(r0, cpsr)
	branch r0_15 == 0x00000001 l00008CBA
l00008CAE:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008CBA:
	return
MPU_pvPortMalloc_exit:


void MPU_vPortFree(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed: NZCV r0
// Preserved: r3 r4 r5 sp
MPU_vPortFree_entry:
l00008CC0:
	word32 r0_15 = xPortRaisePrivilege(cpsr)
	vPortFree()
	branch r0_15 == 0x00000001 l00008CE0
l00008CD4:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008CE0:
	return
MPU_vPortFree_exit:


void MPU_vPortInitialiseBlocks(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: r4 sp
MPU_vPortInitialiseBlocks_entry:
l00008CE4:
	word32 r0_9 = xPortRaisePrivilege(cpsr)
	vPortInitialiseBlocks()
	branch r0_9 == 0x00000001 l00008D00
l00008CF4:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008D00:
	return
MPU_vPortInitialiseBlocks_exit:


void MPU_xPortGetFreeHeapSize(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed: NZCV r3
// Preserved: r4 sp
MPU_xPortGetFreeHeapSize_entry:
l00008D04:
	word32 r0_9 = xPortRaisePrivilege(cpsr)
	xPortGetFreeHeapSize()
	branch r0_9 == 0x00000001 l00008D22
l00008D16:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008D22:
	return
MPU_xPortGetFreeHeapSize_exit:


void MPU_xEventGroupCreate(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed: NZCV r1 r2 r3
// Preserved: r4 sp
MPU_xEventGroupCreate_entry:
l00008D28:
	word32 r0_9 = xPortRaisePrivilege(cpsr)
	xEventGroupCreate(cpsr)
	branch r0_9 == 0x00000001 l00008D46
l00008D3A:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008D46:
	return
MPU_xEventGroupCreate_exit:


void MPU_xEventGroupWaitBits(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr, word32 dwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31] Stack +0000:[0..31]
// LiveOut:
// Trashed: NZCV r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 r9 sp
MPU_xEventGroupWaitBits_entry:
l00008D4C:
	word32 r0_29 = xPortRaisePrivilege(cpsr)
	xEventGroupWaitBits(r0, r1, r2, r3, cpsr, dwArg00)
	branch r0_29 == 0x00000001 l00008D82
l00008D76:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008D82:
	return
MPU_xEventGroupWaitBits_exit:


void MPU_xEventGroupClearBits(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r2 r3
// Preserved: r1 r4 r5 r6 sp
MPU_xEventGroupClearBits_entry:
l00008D8C:
	word32 r0_17 = xPortRaisePrivilege(cpsr)
	xEventGroupClearBits(r0, r1, cpsr)
	branch r0_17 == 0x00000001 l00008DB2
l00008DA6:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008DB2:
	return
MPU_xEventGroupClearBits_exit:


void MPU_xEventGroupSetBits(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV lr r1 r2 r3
// Preserved: r4 r5 r6 sp
MPU_xEventGroupSetBits_entry:
l00008DB8:
	word32 r0_17 = xPortRaisePrivilege(cpsr)
	xEventGroupSetBits(r0, r1, cpsr)
	branch r0_17 == 0x00000001 l00008DDE
l00008DD2:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008DDE:
	return
MPU_xEventGroupSetBits_exit:


void MPU_xEventGroupSync(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31]
// LiveOut:
// Trashed: NZCV lr r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
MPU_xEventGroupSync_entry:
l00008DE4:
	word32 r0_25 = xPortRaisePrivilege(cpsr)
	xEventGroupSync(r0, r1, r2, r3, cpsr)
	branch r0_25 == 0x00000001 l00008E14
l00008E08:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008E14:
	return
MPU_xEventGroupSync_exit:


void MPU_vEventGroupDelete(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: r3 r4 r5 sp
MPU_vEventGroupDelete_entry:
l00008E1C:
	word32 r0_15 = xPortRaisePrivilege(cpsr)
	vEventGroupDelete(r0, cpsr)
	branch r0_15 == 0x00000001 l00008E3C
l00008E30:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
l00008E3C:
	return
MPU_vEventGroupDelete_exit:


void xCoRoutineCreate(word32 r0, word32 r1, word32 r2, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: fp r10 r3 r4 r5 r6 r7 r8 r9 sp
xCoRoutineCreate_entry:
l00008E40:
	word32 r5_28 = r1
	word32 r0_32 = pvPortMalloc(0x00000038, cpsr)
	branch r0_32 == 0x00000000 l00008EE4
l00008EE4:
	return
l00008E54:
	word32 r7_53 = Mem23[0x00008EEC:word32]
	branch Mem23[r7_53:word32] == 0x00000000 l00008EAC
l00008EAC:
	Mem57[r7_53:word32] = r0_32
	vListInitialise(r7_53 + 4)
	vListInitialise(r7_53 + 0x00000018)
	vListInitialise(r7_53 + 0x0000002C)
	vListInitialise(r7_53 + 0x00000040)
	vListInitialise(r7_53 + 0x00000054)
	Mem81[r7_53 + 104:word32] = r7_53 + 0x0000002C
	Mem82[r7_53 + 108:word32] = r7_53 + 0x00000040
l00008E5C:
l00008E60:
	branch r1 <u 0x00000001 l00008E66
l00008E64_1:
	r5_28 = 0x00000001
l00008E66:
	Mem92[r0_32 + 52:word16] = 0x0000
	Mem94[r0_32 + 44:word32] = r5_28
	Mem97[r0_32 + 48:word32] = r2
	Mem100[r0_32:word32] = r0
	vListInitialiseItem(r0_32 + 4)
	vListInitialiseItem(r0_32 + 0x00000018)
	word32 r0_106 = Mem100[r0_32 + 44:word32]
	word32 r5_110 = 0x00000002 - r5_28
	branch r0_106 <=u Mem100[r7_53 + 112:word32] l00008E92
l00008E90_1:
	Mem113[r7_53 + 112:word32] = r0_106
l00008E92:
	Mem122[r0_32 + 24:word32] = r5_110
	Mem123[r0_32 + 16:word32] = r0_32
	Mem124[r0_32 + 36:word32] = r0_32
	vListInsertEnd(r7_53 + 0x00000004 + r0_106 * 0x00000014, r0_32 + 4)
	return
xCoRoutineCreate_exit:


bool vCoRoutineAddToDelayedList(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut: Z
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 r5 r6 sp
vCoRoutineAddToDelayedList_entry:
l00008EF0:
	word32 r4_14 = Mem11[0x00008F28:word32]
	word32 r5_18 = Mem11[r4_14 + 116:word32] + r0
	uxListRemove(Mem11[r4_14:word32] + 0x00000004)
	word32 r3_29 = Mem11[r4_14 + 116:word32]
	word32 r1_30 = Mem11[r4_14:word32]
	Mem32[r1_30 + 4:word32] = r5_18
	branch r5_18 >=u r3_29 l00008F0E
l00008F0C_1:
l00008F0E:
	bool Z_44 = vListInsert(Mem32[r4_14 + 104:word32], r1_30 + 0x00000004)
	branch r1 == 0x00000000 l00008F26
l00008F26:
	return Z_44
l00008F18:
	word32 r1_53 = Mem32[r4_14:word32]
l00008F22_thunk_vListInsert:
	return vListInsert(r1, r1_53 + 0x00000018)
vCoRoutineAddToDelayedList_exit:


word32 vCoRoutineSchedule(word32 r0, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 lr, word32 cpsr, ptr32 & cpsrOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31] r0:[0..31] r4:[0..31] r5:[0..31] r6:[0..31] r7:[0..31] r8:[0..31]
// LiveOut: cpsr lr
// Trashed: NZCV cpsr lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8
// Preserved: sp
vCoRoutineSchedule_entry:
l00008F2C:
	word32 r5_16 = Mem15[0x00009088:word32]
	branch Mem15[r5_16 + 84:word32] == 0x00000000 l00008F82
l00008F36:
l00008F3C:
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	word32 r4_25 = Mem23[Mem23[r5_16 + 96:word32] + 12:word32]
	uxListRemove(r4_25 + 0x00000018)
	__msr(cpsr, 0x00000000)
	uxListRemove(r4_25 + 0x00000004)
	word32 r3_46 = Mem23[r4_25 + 44:word32]
	r0 = r5_16 + 0x00000004 + r3_46 * 0x00000014
	branch r3_46 <=u Mem23[r5_16 + 112:word32] l00008F78
l00008F76_1:
	Mem54[r5_16 + 112:word32] = r3_46
l00008F78:
	vListInsertEnd(r0, r4_25 + 0x00000004)
	branch Mem64[r5_16 + 84:word32] != 0x00000000 l00008F3C
l00008F82:
	MPU_xTaskGetTickCount(cpsr)
	word32 r3_171 = Mem78[r5_16 + 116:word32]
	word32 r0_179 = r0 - Mem78[r5_16 + 120:word32]
	word32 r8_84 = Mem78[0x00009090:word32]
	Mem85[r5_16 + 124:word32] = r0_179
l00008F94:
	branch r0_179 == 0x00000000 l00009014
l00008F98:
	word32 r2_102
	r3_171 = r3_171 + 0x00000001
	Mem94[r5_16 + 116:word32] = r3_171
	r0_179 = r0_179 - 0x00000001
	Mem95[r5_16 + 124:word32] = r0_179
	branch r3_171 == 0x00000000 l0000904C
l0000904C:
	r2_102 = Mem95[r5_16 + 108:word32]
	Mem100[r5_16 + 108:word32] = Mem95[r5_16 + 104:word32]
	Mem101[r5_16 + 104:word32] = r2_102
l00008FA4:
	r2_102 = Mem95[r5_16 + 104:word32]
l00008FA6:
	branch Mem104[r2_102:word32] == 0x00000000 l00008F94
l00008FAC:
	word32 r4_109 = Mem104[Mem104[r2_102 + 12:word32] + 12:word32]
	branch r3_171 >=u Mem104[r4_109 + 4:word32] l00008FC4
l00008FC4:
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	word32 r6_117 = r4_109 + 0x00000004
	uxListRemove(r6_117)
	word32 r0_129 = r4_109 + 0x00000018
	branch Mem127[r4_109 + 40:word32] == 0x00000000 l00008FE8
l00008FE4:
	uxListRemove(r0_129)
l00008FE8:
	__msr(cpsr, 0x00000000)
	word32 r3_143 = Mem127[r4_109 + 44:word32]
	word32 r0_153 = r8_84 + r3_143 * 0x00000014
	branch r3_143 <=u Mem127[r5_16 + 112:word32] l00009000
l00008FFE_1:
	Mem155[r5_16 + 112:word32] = r3_143
l00009000:
	vListInsertEnd(r0_153, r6_117)
	word32 r3_166 = Mem165[r5_16 + 104:word32]
	branch Mem165[r3_166:word32] != 0x00000000 l00008FB8
l00008FB8:
	r4_109 = Mem165[Mem165[r3_166 + 12:word32] + 12:word32]
	r3_171 = Mem165[r5_16 + 116:word32]
	branch Mem165[r4_109 + 4:word32] >u r3_171 l0000900E
l0000900C:
	r3_171 = Mem165[r5_16 + 116:word32]
l0000900E:
	r0_179 = Mem165[r5_16 + 124:word32]
	branch r0_179 != 0x00000000 l00008F98
l00009014:
	word32 r2_197
	word32 r1_186 = Mem184[r5_16 + 112:word32]
	Mem190[r5_16 + 120:word32] = r3_171
	word32 r3_191 = r1_186 << 2
	branch Mem190[r5_16 + r1_186 * 0x00000014 + 4:word32] != 0x00000000 l00009084
l00009084:
	r2_197 = r1_186
l00009026:
	branch r1_186 == 0x00000000 l00009080
l00009080:
	cpsrOut = cpsr
	return lr
l00009028:
	r3_191 = r1_186 - 0x00000001 << 2
	r2_197 = r1_186 - 0x00000001
	branch Mem190[r5_16 + (r3_191 + (r1_186 - 0x00000001) << 0x00000002) + 4:word32] != 0x00000000 l00009056
l00009036:
	branch r1_186 == 0x00000001 l00009046
l00009038:
	r3_191 = r1_186 - 0x00000002 << 2
	r2_197 = r1_186 - 0x00000002
	branch Mem190[r5_16 + (r3_191 + (r1_186 - 0x00000002) << 0x00000002) + 4:word32] != 0x00000000 l00009056
l00009056:
	Mem226[r5_16 + 112:word32] = r2_197
l00009058:
	word32 r2_242
	word32 r3_230 = r3_191 + r2_197
	word32 r1_233 = r5_16 + (r3_230 << 2)
	word32 r2_237 = Mem234[Mem234[r1_233 + 8:word32] + 4:word32]
	word32 r3_238 = (r3_230 << 2) + Mem234[0x0000908C:word32]
	Mem240[r1_233 + 8:word32] = r2_237
	r2_242 = r2_237
	branch r2_237 != r3_238 l0000906E
l0000906C_1:
	r2_242 = Mem240[r2_237 + 4:word32]
l0000906E:
	word32 r0_245 = Mem240[r2_242 + 12:word32]
	branch r2_237 != r3_238 l00009074
l00009072_1:
	Mem248[r1_233 + 8:word32] = r2_242
l00009074:
	Mem252[r5_16:word32] = r0_245
	word32 lr_280
	word32 pc_281
	word32 cpsr_283
	call Mem252[r0_245:word32] (retsize: 0;)
		uses: cpsr:cpsr,lr:lr,pc:pc_281,r0:r0_245,r1:Mem252[r0_245 + 48:word32],r4:r4,r5:r5,r6:r6,r7:r7,r8:r8
		defs: cpsr:cpsr_283,lr:lr_280,pc:pc_281
	cpsrOut = cpsr_283
	return lr_280
l00009046:
	Mem290[r5_16 + 112:word32] = r2_197
	cpsrOut = cpsr
	return lr
vCoRoutineSchedule_exit:
l00008FB6:


bool xCoRoutineRemoveFromEventList(word32 r0, ptr32 & r0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut: Z r0
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 sp
xCoRoutineRemoveFromEventList_entry:
l00009094:
	word32 r4_15 = Mem14[Mem0[r0 + 12:word32] + 12:word32]
	word32 r5_16 = Mem14[0x000090C0:word32]
	uxListRemove(r4_15 + 0x00000018)
	vListInsertEnd(r5_16 + 0x00000054, r4_15 + 0x00000018)
	word32 r0_36 = Mem14[r4_15 + 44:word32]
	word32 r3_37 = Mem14[Mem14[r5_16:word32] + 44:word32]
	bool Z_64 = SLICE(cond(r0_36 - r3_37), bool, 2)
	branch r0_36 >=u r3_37 l000090BC
l000090BA_1:
l000090BC:
	r0Out = 0x00000001
	return Z_64
xCoRoutineRemoveFromEventList_exit:


void GPIOGetIntNumber(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r3
// Preserved: sp
GPIOGetIntNumber_entry:
l000090C4:
	word32 r3_4 = Mem0[0x00009104:word32]
	branch r0 == r3_4 l000090FE
l000090FE:
	return
l000090CA:
	branch r0 >u r3_4 l000090DE
l000090DE:
	word32 r3_10 = Mem0[0x00009108:word32]
	branch r0 == r3_10 l000090F6
l000090F6:
	return
l000090E4:
	branch r0 != r3_10 + 0x0001D000 l000090F0
l000090EC:
	return
l000090CC:
	branch r0 == 0x40004000 l000090FA
l000090FA:
	return
l000090D2:
	branch r0 != r3_4 - 0x00001000 l000090F0
l000090F0:
	return
l000090DA:
	return
GPIOGetIntNumber_exit:


void GPIODirModeSet(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31] r2:[0..31]
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: sp
GPIODirModeSet_entry:
l0000910C:
	word32 r3_10 = Mem0[r0 + 1024:word32]
	branch (r2 & 0x00000001) == 0x00000000 l00009118
l00009116_1:
	r3_10 = r3_10 | r1
l00009118:
	Mem15[r0 + 1024:word32] = r3_10 & ~r1
	word32 r3_16 = Mem15[r0 + 1056:word32]
	branch r2 << 30 >= 0x00000000 l00009128
l00009126_1:
	r1 = r1 | r3_16
l00009128:
	Mem26[r0 + 1056:word32] = r3_16 & ~r1
	return
GPIODirModeSet_exit:


void GPIODirModeGet(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 sp
GPIODirModeGet_entry:
l00009134:
	word32 r1_11 = (uint32) (byte) (0x00000001 << r1)
	word32 r2_12 = Mem6[r0 + 1056:word32]
	word32 r4_14 = Mem6[r0 + 1024:word32] + r1_11 + C
	branch r4_14 != 0x00000000 l0000914C
l0000914A_1:
l0000914C:
	branch r2_12 + r1_11 + (r4_14 <u 0x00000000) == 0x00000000 l00009152
l00009150_1:
l00009152:
	return
GPIODirModeGet_exit:


void GPIOIntTypeSet(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31] r2:[0..31]
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: sp
GPIOIntTypeSet_entry:
l0000915C:
	word32 r3_10 = Mem0[r0 + 1032:word32]
	branch (r2 & 0x00000001) == 0x00000000 l00009168
l00009166_1:
	r3_10 = r3_10 | r1
l00009168:
	Mem15[r0 + 1032:word32] = r3_10 & ~r1
	word32 r3_16 = Mem15[r0 + 1028:word32]
	branch (r2 & 0x00000002) == 0x00000000 l0000917A
l00009178_1:
	r3_16 = r3_16 | r1
l0000917A:
	Mem25[r0 + 1028:word32] = r3_16 & ~r1
	word32 r3_26 = Mem25[r0 + 1036:word32]
	branch r2 << 29 >= 0x00000000 l0000918A
l00009188_1:
	r1 = r1 | r3_26
l0000918A:
	Mem36[r0 + 1036:word32] = r3_26 & ~r1
	return
GPIOIntTypeSet_exit:


void GPIOIntTypeGet(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: sp
GPIOIntTypeGet_entry:
l00009194:
	word32 r1_9 = (uint32) (byte) (0x00000001 << r1)
	word32 r3_10 = Mem0[r0 + 1028:word32]
	word32 r2_12 = Mem0[r0 + 1032:word32] + r1_9 + C
	word32 r0_14 = Mem0[r0 + 1036:word32]
	branch r2_12 == 0x00000000 l000091AE
l000091AC_1:
l000091AE:
	word32 r3_22 = r3_10 + r1_9 + (r2_12 <u 0x00000000)
	branch r3_22 == 0x00000000 l000091B6
l000091B4_1:
l000091B6:
	branch r0_14 + r1_9 + (r3_22 <u 0x00000000) == 0x00000000 l000091BE
l000091BC_1:
l000091BE:
	return
GPIOIntTypeGet_exit:


void GPIOPadConfigSet(word32 r0, word32 r1, word32 r2, word32 r3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31]
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: r4 sp
GPIOPadConfigSet_entry:
l000091C8:
	word32 r4_12 = Mem5[r0 + 1280:word32]
	branch (r2 & 0x00000001) == 0x00000000 l000091D6
l000091D4_1:
	r4_12 = r4_12 | r1
l000091D6:
	Mem17[r0 + 1280:word32] = r4_12 & ~r1
	word32 r4_18 = Mem17[r0 + 1284:word32]
	branch (r2 & 0x00000002) == 0x00000000 l000091E8
l000091E6_1:
	r4_18 = r4_18 | r1
l000091E8:
	Mem27[r0 + 1284:word32] = r4_18 & ~r1
	word32 r4_28 = Mem27[r0 + 1288:word32]
	branch (r2 & 0x00000004) == 0x00000000 l000091FA
l000091F8_1:
	r4_28 = r4_28 | r1
l000091FA:
	Mem37[r0 + 1288:word32] = r4_28 & ~r1
	word32 r2_40 = Mem37[r0 + 1304:word32]
	branch (r2 & 0x00000008) == 0x00000000 l0000920C
l0000920A_1:
	r2_40 = r2_40 | r1
l0000920C:
	Mem47[r0 + 1304:word32] = r2_40 & ~r1
	word32 r2_48 = Mem47[r0 + 1292:word32]
	branch r3 << 31 >= 0x00000000 l0000921C
l0000921A_1:
	r2_48 = r2_48 | r1
l0000921C:
	Mem62[r0 + 1292:word32] = r2_48 & ~r1
	word32 r2_63 = Mem62[r0 + 1296:word32]
	branch r3 << 30 >= 0x00000000 l0000922C
l0000922A_1:
	r2_63 = r2_63 | r1
l0000922C:
	Mem73[r0 + 1296:word32] = r2_63 & ~r1
	word32 r2_74 = Mem73[r0 + 1300:word32]
	branch r3 << 29 >= 0x00000000 l0000923C
l0000923A_1:
	r2_74 = r2_74 | r1
l0000923C:
	Mem84[r0 + 1300:word32] = r2_74 & ~r1
	word32 r3_87 = Mem84[r0 + 1308:word32]
	branch (r3 & 0x00000008) == 0x00000000 l00009250
l0000924E_1:
	r1 = r1 | r3_87
l00009250:
	Mem103[r0 + 1308:word32] = r3_87 & ~r1
	return
GPIOPadConfigSet_exit:


void GPIOPadConfigGet(word32 r0, word32 r1, word32 r2, word32 r3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: r4 r5 r6 r7 sp
GPIOPadConfigGet_entry:
l0000925C:
	word32 r1_17 = (uint32) (byte) (0x00000001 << r1)
	word32 r4_18 = Mem11[r0 + 1284:word32]
	word32 r5_20 = Mem11[r0 + 1280:word32] + r1_17 + C
	word32 r5_22 = Mem11[r0 + 1288:word32]
	branch r5_20 == 0x00000000 l00009278
l00009276_1:
l00009278:
	word32 r4_30 = r4_18 + r1_17 + (r5_20 <u 0x00000000)
	word32 r4_34 = Mem11[r0 + 1304:word32]
	branch r4_30 == 0x00000000 l00009284
l00009282_1:
l00009284:
	word32 r5_43 = r5_22 + r1_17 + (r4_30 <u 0x00000000)
	branch r5_43 == 0x00000000 l0000928C
l0000928A_1:
l0000928C:
	branch r4_34 + r1_17 + (r5_43 <u 0x00000000) == 0x00000000 l00009294
l00009292_1:
l00009294:
	Mem73[r2:word32] = 0x00000000
	word32 r5_130 = 0x00000000
	word32 r4_78 = Mem73[r0 + 1296:word32]
	word32 r1_81 = r1_17 + Mem73[r0 + 1292:word32]
	word32 r6_83 = Mem73[r0 + 1300:word32]
	branch r1_81 == 0x00000000 l000092B0
l000092AE_1:
	r5_130 = 0x00000001
l000092B0:
	word32 r2_88 = Mem73[r0 + 1308:word32]
	branch r1_81 != 0x00000000 l000092B8
l000092B6_1:
	r5_130 = 0x00000000
l000092B8:
	word32 r1_98 = r1_81 + r4_78 + (r1_81 <u 0x00000000)
	branch r1_98 == 0x00000000 l000092BE
l000092BC_1:
l000092BE:
	word32 r1_109 = r1_98 + r6_83 + (r1_98 <u 0x00000000)
	branch r1_109 == 0x00000000 l000092C6
l000092C4_1:
l000092C6:
	branch r1_109 + r2_88 + (r1_109 <u 0x00000000) == 0x00000000 l000092CE
l000092CC_1:
l000092CE:
	Mem147[r3:word32] = r5_130
	return
GPIOPadConfigGet_exit:


void GPIOPinIntEnable(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r1 r3
// Preserved: sp
GPIOPinIntEnable_entry:
l000092E0:
	Mem9[r0 + 1040:word32] = r1 | Mem0[r0 + 1040:word32]
	return
GPIOPinIntEnable_exit:


void GPIOPinIntDisable(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: r1 r3
// Preserved: sp
GPIOPinIntDisable_entry:
l000092EC:
	Mem8[r0 + 1040:word32] = Mem0[r0 + 1040:word32] & ~r1
	return
GPIOPinIntDisable_exit:


void GPIOPinIntStatus(word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r1:[0..31]
// LiveOut:
// Trashed: r0
// Preserved: sp
GPIOPinIntStatus_entry:
l000092FC:
	branch r1 != 0x00000000 l00009304
l00009304:
	return
l000092FE:
	return
GPIOPinIntStatus_exit:


void GPIOPinIntClear(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
GPIOPinIntClear_entry:
l0000930C:
	Mem5[r0 + 1052:word32] = r1
	return
GPIOPinIntClear_exit:


void GPIOPortIntRegister(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr r4 sp
GPIOPortIntRegister_entry:
l00009314:
	word32 r3_4 = Mem0[0x000093A8:word32]
	branch r0 == r3_4 l00009396
l00009396:
	IntRegister(0x00000012, r1)
l000093A4_thunk_IntEnable:
	IntEnable(0x00000012)
	return
l0000931C:
	branch r0 >u r3_4 l0000933E
l0000933E:
	word32 r3_34 = Mem9[0x000093AC:word32]
	branch r0 == r3_34 l00009372
l00009372:
	IntRegister(0x00000013, r1)
l00009380_thunk_IntEnable:
	IntEnable(0x00000013)
	return
l00009344:
	branch r0 != r3_34 + 0x0001D000 l0000935E
l0000934C:
	IntRegister(0x00000014, r1)
l0000935A_thunk_IntEnable:
	IntEnable(0x00000014)
	return
l0000931E:
	branch r0 == 0x40004000 l00009384
l00009384:
	IntRegister(0x00000010, r1)
l00009392_thunk_IntEnable:
	IntEnable(0x00000010)
	return
l00009324:
	branch r0 != r3_4 - 0x00001000 l0000935E
l0000935E:
	IntRegister(0xFFFFFFFF, r1)
l0000936E_thunk_IntEnable:
	IntEnable(0xFFFFFFFF)
	return
l0000932C:
	IntRegister(0x00000011, r1)
l0000933A_thunk_IntEnable:
	IntEnable(0x00000011)
	return
GPIOPortIntRegister_exit:


void GPIOPortIntUnregister(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr r4 sp
GPIOPortIntUnregister_entry:
l000093B0:
	word32 r3_4 = Mem0[0x00009444:word32]
	branch r0 == r3_4 l00009432
l00009432:
	IntDisable(0x00000012)
l00009440_thunk_IntUnregister:
	IntUnregister(0x00000012)
	return
l000093B8:
	branch r0 >u r3_4 l000093DA
l000093DA:
	word32 r3_29 = Mem9[0x00009448:word32]
	branch r0 == r3_29 l0000940E
l0000940E:
	IntDisable(0x00000013)
l0000941C_thunk_IntUnregister:
	IntUnregister(0x00000013)
	return
l000093E0:
	branch r0 != r3_29 + 0x0001D000 l000093FA
l000093E8:
	IntDisable(0x00000014)
l000093F6_thunk_IntUnregister:
	IntUnregister(0x00000014)
	return
l000093BA:
	branch r0 == 0x40004000 l00009420
l00009420:
	IntDisable(0x00000010)
l0000942E_thunk_IntUnregister:
	IntUnregister(0x00000010)
	return
l000093C0:
	branch r0 != r3_4 - 0x00001000 l000093FA
l000093FA:
	IntDisable(0xFFFFFFFF)
l0000940A_thunk_IntUnregister:
	IntUnregister(0xFFFFFFFF)
	return
l000093C8:
	IntDisable(0x00000011)
l000093D6_thunk_IntUnregister:
	IntUnregister(0x00000011)
	return
GPIOPortIntUnregister_exit:


void GPIOPinRead()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0
// Preserved: sp
GPIOPinRead_entry:
l0000944C:
	return
GPIOPinRead_exit:


void GPIOPinWrite(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31] r2:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
GPIOPinWrite_entry:
l00009454:
	Mem6[r0 + (r1 << 2):word32] = r2
	return
GPIOPinWrite_exit:


void GPIOPinTypeComparator(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r1 r2 r3
// Preserved: r4 r5 r6 sp
GPIOPinTypeComparator_entry:
l0000945C:
	word32 r5_11 = ~r1
	Mem17[r0 + 1024:word32] = Mem9[r0 + 1024:word32] & r5_11
	Mem22[r0 + 1056:word32] = r5_11 & Mem17[r0 + 1056:word32]
l0000947A_thunk_GPIOPadConfigSet:
	GPIOPadConfigSet(r0, r1, 0x00000001, 0x00000000)
	return
GPIOPinTypeComparator_exit:


void GPIOPinTypeI2C(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: r4 r5 r6 sp
GPIOPinTypeI2C_entry:
l00009480:
	Mem16[r0 + 1024:word32] = Mem9[r0 + 1024:word32] & ~r1
	Mem21[r0 + 1056:word32] = r1 | Mem16[r0 + 1056:word32]
l000094A0_thunk_GPIOPadConfigSet:
	GPIOPadConfigSet(r0, r1, 0x00000001, 0x0000000B)
	return
GPIOPinTypeI2C_exit:


void GPIOPinTypeQEI(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: r4 r5 r6 sp
GPIOPinTypeQEI_entry:
l000094A4:
	Mem16[r0 + 1024:word32] = Mem9[r0 + 1024:word32] & ~r1
	Mem21[r0 + 1056:word32] = r1 | Mem16[r0 + 1056:word32]
l000094C4_thunk_GPIOPadConfigSet:
	GPIOPadConfigSet(r0, r1, 0x00000001, 0x0000000A)
	return
GPIOPinTypeQEI_exit:


void GPIOPinTypeUART(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: r4 r5 r6 sp
GPIOPinTypeUART_entry:
l000094C8:
	Mem16[r0 + 1024:word32] = Mem9[r0 + 1024:word32] & ~r1
	Mem21[r0 + 1056:word32] = r1 | Mem16[r0 + 1056:word32]
l000094E8_thunk_GPIOPadConfigSet:
	GPIOPadConfigSet(r0, r1, 0x00000001, 0x00000008)
	return
GPIOPinTypeUART_exit:


void GPIOPinTypeTimer(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: sp
GPIOPinTypeTimer_entry:
l000094EC:
l000094EC_thunk_GPIOPinTypeUART:
	GPIOPinTypeUART(r0, r1)
	return
GPIOPinTypeTimer_exit:


void GPIOPinTypeSSI(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: sp
GPIOPinTypeSSI_entry:
l000094F0:
l000094F0_thunk_GPIOPinTypeUART:
	GPIOPinTypeUART(r0, r1)
	return
GPIOPinTypeSSI_exit:


void GPIOPinTypePWM(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: sp
GPIOPinTypePWM_entry:
l000094F4:
l000094F4_thunk_GPIOPinTypeUART:
	GPIOPinTypeUART(r0, r1)
	return
GPIOPinTypePWM_exit:


void IntDefaultHandler()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
IntDefaultHandler_exit:
IntDefaultHandler_entry:
l000094F8:


void IntMasterEnable()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
IntMasterEnable_entry:
l000094FC:
l000094FC_thunk_CPUcpsie:
	CPUcpsie()
	return
IntMasterEnable_exit:


void IntMasterDisable()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
IntMasterDisable_entry:
l00009500:
l00009500_thunk_CPUcpsid:
	CPUcpsid()
	return
IntMasterDisable_exit:


void IntRegister(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r2 r3
// Preserved: r4 r5 sp
IntRegister_entry:
l00009504:
	word32 r4_11 = Mem9[0x00009534:word32]
	branch Mem9[Mem0[0x00009530:word32]:word32] == r4_11 l00009526
l00009510:
	word32 r3_14 = r4_11
l00009516:
	Mem21[r3_14:word32] = Mem19[r3_14 - r4_11:word32]
	r3_14 = r3_14 + 4
	branch r3_14 != r4_11 + 0x000000B8 l00009516
l00009522:
	Mem27[Mem21[0x00009530:word32]:word32] = r4_11
l00009526:
	Mem35[r4_11 + (r0 << 2):word32] = r1
	return
IntRegister_exit:


void IntUnregister(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
IntUnregister_entry:
l00009538:
	Mem7[Mem0[0x00009544:word32] + (r0 << 2):word32] = Mem0[0x00009548:word32]
	return
IntUnregister_exit:


void IntPriorityGroupingSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
IntPriorityGroupingSet_entry:
l0000954C:
	Mem10[Mem0[0x00009564:word32]:word32] = Mem0[Mem0[0x00009560:word32] + (r0 << 2):word32] | 0x05F80000 | 0x00020000
	return
IntPriorityGroupingSet_exit:


void IntPriorityGroupingGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: sp
IntPriorityGroupingGet_entry:
l00009568:
	word32 r3_11 = 0x00000700
	word32 r0_15 = 0x00000000
	word32 r1_7 = Mem0[Mem0[0x00009588:word32]:word32]
	word32 r2_19 = Mem0[0x0000958C:word32]
l0000957C:
	branch r3_11 == (r1_7 & 0x00000700) l00009586
l00009580:
	r0_15 = r0_15 + 0x00000001
	branch r0_15 != 0x00000008 l00009578
l00009578:
	r2_19 = r2_19 + 4
	r3_11 = Mem0[r2_19:word32]
l00009586:
	return
IntPriorityGroupingGet_exit:


void IntPrioritySet(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: r4 sp
IntPrioritySet_entry:
l00009590:
	word32 r4_13 = Mem8[Mem0[0x000095B8:word32] + (r0 & ~0x00000003) + 32:word32]
	word32 r0_16 = (r0 & 0x00000003) << 3
	Mem23[r4_13:word32] = r1 << r0_16 | Mem8[r4_13:word32] & ~(0x000000FF << r0_16)
	return
IntPrioritySet_exit:


void IntPriorityGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: sp
IntPriorityGet_entry:
l000095BC:
	return
IntPriorityGet_exit:


void IntEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: sp
IntEnable_entry:
l000095DC:
	branch r0 == 0x00000004 l00009608
l00009608:
	word32 r2_7 = Mem0[0x00009634:word32]
	Mem10[r2_7:word32] = Mem0[r2_7:word32] | 0x00010000
	return
l000095E0:
	branch r0 == 0x00000005 l00009614
l00009614:
	word32 r2_13 = Mem0[0x00009634:word32]
	Mem16[r2_13:word32] = Mem0[r2_13:word32] | 0x00020000
	return
l000095E4:
	branch r0 == 0x00000006 l00009620
l00009620:
	word32 r2_19 = Mem0[0x00009634:word32]
	Mem22[r2_19:word32] = Mem0[r2_19:word32] | 0x00040000
	return
l000095E8:
	branch r0 == 0x0000000F l000095FC
l000095FC:
	word32 r2_25 = Mem0[0x00009630:word32]
	Mem28[r2_25:word32] = Mem0[r2_25:word32] | 0x00000002
	return
l000095EC:
	branch r0 <=u 0x0000000F l000095FA
l000095EE:
	Mem35[Mem0[0x0000962C:word32]:word32] = 0x00000001 << r0 - 0x00000010
l000095FA:
	return
IntEnable_exit:


void IntDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: sp
IntDisable_entry:
l00009638:
	branch r0 == 0x00000004 l00009664
l00009664:
	word32 r2_7 = Mem0[0x00009690:word32]
	Mem10[r2_7:word32] = Mem0[r2_7:word32] & ~0x00010000
	return
l0000963C:
	branch r0 == 0x00000005 l00009670
l00009670:
	word32 r2_13 = Mem0[0x00009690:word32]
	Mem16[r2_13:word32] = Mem0[r2_13:word32] & ~0x00020000
	return
l00009640:
	branch r0 == 0x00000006 l0000967C
l0000967C:
	word32 r2_19 = Mem0[0x00009690:word32]
	Mem22[r2_19:word32] = Mem0[r2_19:word32] & ~0x00040000
	return
l00009644:
	branch r0 == 0x0000000F l00009658
l00009658:
	word32 r2_25 = Mem0[0x0000968C:word32]
	Mem28[r2_25:word32] = Mem0[r2_25:word32] & ~0x00000002
	return
l00009648:
	branch r0 <=u 0x0000000F l00009656
l0000964A:
	Mem35[Mem0[0x00009688:word32]:word32] = 0x00000001 << r0 - 0x00000010
l00009656:
	return
IntDisable_exit:


void OSRAMDelay(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV r0
// Preserved: sp
OSRAMDelay_entry:
l00009694:
	r0 = r0 - 0x00000001
	branch r0 != 0x00000000 l00009694
l00009698:
	return
OSRAMDelay_exit:


void OSRAMWriteFirst(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r0 r1 r2
// Preserved: lr r3 r4 r5 sp
OSRAMWriteFirst_entry:
l0000969C:
	word32 r4_14 = Mem11[0x000096C0:word32]
	I2CMasterSlaveAddrSet(r4_14, 0x0000003D, 0x00000000)
	I2CMasterDataPut(r4_14, r0)
l000096BC_thunk_I2CMasterControl:
	I2CMasterControl(r4_14, 0x00000003)
	return
OSRAMWriteFirst_exit:


void OSRAMWriteArray(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1
// Preserved: r3 r4 r5 r6 r7 sp
OSRAMWriteArray_entry:
l000096C4:
	branch r1 == 0x00000000 l000096FA
l000096FA:
	return
l000096C6:
	word32 r5_18 = r0
	word32 r7_19 = Mem16[0x000096FC:word32]
	word32 r4_20 = Mem16[0x00009700:word32]
	word32 r6_21 = r0 + r1
l000096D0:
	branch I2CMasterIntStatus(r4_20, 0x00000000) == 0x00000000 l000096D0
l000096DC:
	OSRAMDelay(Mem16[r7_19:word32])
	I2CMasterDataPut(r4_20, (word32) Mem16[r5_18:byte])
	I2CMasterControl(r4_20, 0x00000001)
	r5_18 = r5_18 + 1
	branch r6_21 != r5_18 l000096D0
l000096F8:
	return
OSRAMWriteArray_exit:


void OSRAMWriteByte(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r3
// Preserved: lr r4 sp
OSRAMWriteByte_entry:
l00009704:
l00009708:
	branch I2CMasterIntStatus(Mem7[0x00009730:word32], 0x00000000) == 0x00000000 l00009708
l00009714:
	OSRAMDelay(Mem7[Mem7[0x00009734:word32]:word32])
	I2CMasterDataPut(Mem7[0x00009730:word32], r0)
	word32 r0_35 = Mem7[0x00009730:word32]
l0000972C_thunk_I2CMasterControl:
	I2CMasterControl(r0_35, 0x00000001)
	return
OSRAMWriteByte_exit:


void OSRAMWriteFinal(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1
// Preserved: lr r4 r5 r6 sp
OSRAMWriteFinal_entry:
l00009738:
	word32 r4_14 = Mem11[0x00009778:word32]
l0000973E:
	branch I2CMasterIntStatus(r4_14, 0x00000000) == 0x00000000 l0000973E
l0000974A:
	word32 r5_26 = Mem11[0x0000977C:word32]
	word32 r4_27 = Mem11[0x00009778:word32]
	OSRAMDelay(Mem11[r5_26:word32])
	I2CMasterDataPut(r4_27, r0)
	I2CMasterControl(r4_27, 0x00000005)
l00009764:
	branch I2CMasterIntStatus(r4_27, 0x00000000) == 0x00000000 l00009764
l00009770:
	word32 r0_51 = Mem11[r5_26:word32]
l00009776_thunk_OSRAMDelay:
	OSRAMDelay(r0_51)
	return
OSRAMWriteFinal_exit:


void OSRAMClear()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 sp
OSRAMClear_entry:
l00009780:
	OSRAMWriteFirst(0x00000080)
	OSRAMWriteArray(Mem7[0x000097C4:word32], 0x00000006)
	word32 r4_20 = 0x0000005F
l00009792:
	OSRAMWriteByte(0x00000000)
	r4_20 = r4_20 - 0x00000001
	branch r4_20 != 0x00000000 l00009792
l0000979C:
	OSRAMWriteFinal(r4_20)
	OSRAMWriteFirst(0x00000080)
	OSRAMWriteArray(Mem7[0x000097C8:word32], 0x00000006)
	word32 r4_53 = 0x0000005F
l000097B2:
	OSRAMWriteByte(0x00000000)
	r4_53 = r4_53 - 0x00000001
	branch r4_53 != 0x00000000 l000097B2
l000097BC:
l000097C2_thunk_OSRAMWriteFinal:
	OSRAMWriteFinal(r4_53)
	return
OSRAMClear_exit:


void OSRAMStringDraw(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31] r2:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 r5 r6 sp
OSRAMStringDraw_entry:
l000097CC:
	OSRAMWriteFirst(0x00000080)
	word32 r4_100 = r1
	word32 r5_104 = r0
	branch r2 != 0x00000000 l000097E0
l000097DE_1:
l000097E0:
	OSRAMWriteByte(0x000000B1)
	OSRAMWriteByte(0x00000080)
	OSRAMWriteByte(r1 + 0x00000024 & 0x0000000F)
	OSRAMWriteByte(0x00000080)
	OSRAMWriteByte((uint32) SLICE(r1 + 0x00000024, ui4, 4) | 0x00000010)
	OSRAMWriteByte(0x00000040)
	word32 r3_117 = (word32) Mem11[r0:byte]
	branch r3_117 == 0x00000000 l00009876
l00009876:
	return
l00009814:
	word32 r6_85 = Mem11[0x00009878:word32]
	branch r1 <=u 0x0000005A l00009830
l00009830:
	OSRAMWriteArray(r6_85 + (r3_117 - 0x00000020) * 0x00000005, 0x00000005)
	branch r4_100 != 0x0000005A l0000981C
l0000981C:
	r5_104 = r5_104 + 1
	r4_100 = r4_100 + 0x00000006
	branch (word32) Mem11[r5_104:byte] == 0x00000000 l00009846
l00009824:
	OSRAMWriteByte(0x00000000)
	r3_117 = (word32) Mem11[r5_104:byte]
	branch r3_117 == 0x00000000 l00009874
l00009874:
	return
l0000982C:
	branch r4_100 >u 0x0000005A l0000984C
l00009846:
l0000984A_thunk_OSRAMWriteFinal:
	OSRAMWriteFinal(0x00000000)
	return
l0000981A:
l0000984C:
	word32 r4_144 = 0x0000005F - r4_100
	OSRAMWriteArray(r6_85 + (r3_117 - 0x00000020) * 0x00000005, r4_144)
	word32 r3_156 = (word32) Mem11[r5_104:byte]
	word32 r0_163 = (word32) Mem11[r3_156 - 0x00000020 + (r3_156 - 0x00000020 << 0x00000002) + Mem11[0x0000987C:word32] + r4_144 + 16:byte]
l00009872_thunk_OSRAMWriteFinal:
	OSRAMWriteFinal(r0_163)
	return
OSRAMStringDraw_exit:


void OSRAMImageDraw(word32 r0, word32 r1, word32 r2, word32 r3, word32 dwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31] Stack +0000:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r10 r4 r5 r6 r7 r8 r9 sp
OSRAMImageDraw_entry:
l00009880:
	branch dwArg00 == 0x00000000 l000098EA
l00009888:
	word32 r5_103 = r0
	word32 r4_112 = r2
	word32 r8_29 = (uint32) SLICE(r1 + 0x00000024, ui4, 4)
	word32 r6_30 = dwArg00 + r2
	word32 r7_33 = r1 + 0x00000024 & 0x0000000F
l000098A2:
	OSRAMWriteFirst(0x00000080)
	branch r4_112 == 0x00000000 l000098AE
l000098AC_1:
l000098AE:
	OSRAMWriteByte(0x000000B0)
	OSRAMWriteByte(0x00000080)
	OSRAMWriteByte(r7_33)
	OSRAMWriteByte(0x00000080)
	OSRAMWriteByte(r8_29 | 0x00000010)
	OSRAMWriteByte(0x00000040)
	OSRAMWriteArray(r5_103, r3 + 0xFFFFFFFF)
	r5_103 = r5_103 + r3
	OSRAMWriteFinal((word32) Mem19[r5_103 - 1:byte])
	r4_112 = r4_112 + 0x00000001
	branch r6_30 != r4_112 l000098A2
l000098EA:
	return
OSRAMImageDraw_exit:


void OSRAMInit(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 r5 r6 r7 r8 sp
OSRAMInit_entry:
l000098F0:
	SysCtlPeripheralEnable(0x10001000)
	SysCtlPeripheralEnable(Mem15[0x00009960:word32])
	GPIOPinTypeI2C(Mem15[0x00009964:word32], 0x0000000C)
	I2CMasterInit(Mem15[0x00009968:word32], r0)
	word32 r7_51 = Mem15[0x00009970:word32]
	Mem56[Mem15[0x0000996C:word32]:word32] = 0x00000001
	word32 r6_52 = 0x000000E3
	word32 r4_53 = 0x00000004
	word32 r0_54 = 0x00000080
	word32 r5_55 = 0x00000000
l00009938:
	OSRAMWriteFirst(r0_54)
	OSRAMWriteArray(r5_55 + 0x00000002 + (r7_51 + 0x000001EC), r4_53 - 0x00000002)
	OSRAMWriteFinal(r6_52)
	r5_55 = r5_55 + (r4_53 + 0x00000001)
	word32 r3_88 = r7_51 + r5_55
	branch r5_55 <=u 0x00000070 l0000992A
l0000992A:
	r4_53 = (word32) Mem56[r3_88 + 492:byte]
	r0_54 = (word32) Mem56[r3_88 + 493:byte]
	r6_52 = (word32) Mem56[r3_88 + r4_53 + 492:byte]
l00009958:
l0000995C_thunk_OSRAMClear:
	OSRAMClear()
	return
OSRAMInit_exit:


void OSRAMDisplayOn()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
OSRAMDisplayOn_entry:
l00009974:
	word32 r7_16 = Mem15[0x000099BC:word32]
	word32 r6_17 = 0x000000E3
	word32 r4_18 = 0x00000004
	word32 r0_19 = 0x00000080
	word32 r5_20 = 0x00000000
l00009996:
	OSRAMWriteFirst(r0_19)
	OSRAMWriteArray(r5_20 + 0x00000002 + (r7_16 + 0x000001EC), r4_18 - 0x00000002)
	OSRAMWriteFinal(r6_17)
	r5_20 = r5_20 + (r4_18 + 0x00000001)
	word32 r3_52 = r7_16 + r5_20
	branch r5_20 <=u 0x00000070 l00009988
l00009988:
	r4_18 = (word32) Mem15[r3_52 + 492:byte]
	r0_19 = (word32) Mem15[r3_52 + 493:byte]
	r6_17 = (word32) Mem15[r3_52 + r4_18 + 492:byte]
l000099B6:
	return
OSRAMDisplayOn_exit:


void OSRAMDisplayOff()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: lr r3 sp
OSRAMDisplayOff_entry:
l000099C0:
	OSRAMWriteFirst(0x00000080)
	OSRAMWriteByte(0x000000AE)
	OSRAMWriteByte(0x00000080)
	OSRAMWriteByte(0x000000AD)
	OSRAMWriteByte(0x00000080)
l000099E6_thunk_OSRAMWriteFinal:
	OSRAMWriteFinal(0x0000008A)
	return
OSRAMDisplayOff_exit:


void SSIConfig(word32 r0, word32 r1, word32 r2, word32 r3, word32 dwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31] Stack +0000:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
SSIConfig_entry:
l000099E8:
	word32 r7_17 = r2
	word32 r0_25 = SysCtlClockGet()
	branch r2 == 0x00000002 l00009A30
l00009A30:
	r7_17 = 0x0000000C
l000099FE:
	branch r2 == 0x00000000 l00009A04
l00009A02_1:
	r7_17 = 0x00000004
l00009A04:
	Mem45[r0 + 4:word32] = r7_17
	word32 r3_41 = r0_25 /u r3
	word32 r4_42 = 0x00000000
l00009A0C:
	r4_42 = r4_42 + 0x00000002
	word32 r2_49 = r3_41 /u r4_42
	branch r2_49 >u 0x00000100 l00009A0C
l00009A18:
	Mem65[r0 + 16:word32] = r4_42
	Mem66[r0:word32] = dwArg00 - 0x00000001 | (r1 & 0x00000030 | r1 << 0x00000006) | r2_49 - 0x00000001 << 0x00000008
	return
SSIConfig_exit:


void SSIEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
SSIEnable_entry:
l00009A34:
	Mem7[r0 + 4:word32] = Mem0[r0 + 4:word32] | 0x00000002
	return
SSIEnable_exit:


void SSIDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
SSIDisable_entry:
l00009A40:
	Mem7[r0 + 4:word32] = Mem0[r0 + 4:word32] & ~0x00000002
	return
SSIDisable_exit:


void SSIIntRegister(word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r1:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr sp
SSIIntRegister_entry:
l00009A4C:
	IntRegister(0x00000017, r1)
l00009A5A_thunk_IntEnable:
	IntEnable(0x00000017)
	return
SSIIntRegister_exit:


void SSIIntUnregister()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr sp
SSIIntUnregister_entry:
l00009A60:
	IntDisable(0x00000017)
l00009A6E_thunk_IntUnregister:
	IntUnregister(0x00000017)
	return
SSIIntUnregister_exit:


void SSIIntEnable(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r1 r3
// Preserved: sp
SSIIntEnable_entry:
l00009A74:
	Mem9[r0 + 20:word32] = r1 | Mem0[r0 + 20:word32]
	return
SSIIntEnable_exit:


void SSIIntDisable(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: r1 r3
// Preserved: sp
SSIIntDisable_entry:
l00009A7C:
	Mem8[r0 + 20:word32] = Mem0[r0 + 20:word32] & ~r1
	return
SSIIntDisable_exit:


void SSIIntStatus(word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r1:[0..31]
// LiveOut:
// Trashed: r0
// Preserved: sp
SSIIntStatus_entry:
l00009A88:
	branch r1 != 0x00000000 l00009A8E
l00009A8E:
	return
l00009A8A:
	return
SSIIntStatus_exit:


void SSIIntClear(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
SSIIntClear_entry:
l00009A94:
	Mem5[r0 + 32:word32] = r1
	return
SSIIntClear_exit:


void SSIDataPut(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r2 r3
// Preserved: sp
SSIDataPut_entry:
l00009A98:
l00009A9C:
	branch Mem0[r0 + 0x0000000C:word32] << 30 >= 0x00000000 l00009A9C
l00009AA2:
	Mem14[r0 + 8:word32] = r1
	return
SSIDataPut_exit:


void SSIDataNonBlockingPut(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r0 r3
// Preserved: sp
SSIDataNonBlockingPut_entry:
l00009AA8:
	branch (Mem0[r0 + 12:word32] & 0x00000002) == 0x00000000 l00009AB2
l00009AB0_1:
	Mem10[r0 + 8:word32] = r1
l00009AB2:
	return
SSIDataNonBlockingPut_exit:


void SSIDataGet(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r2 r3
// Preserved: sp
SSIDataGet_entry:
l00009AB8:
l00009ABC:
	branch Mem0[r0 + 0x0000000C:word32] << 29 >= 0x00000000 l00009ABC
l00009AC2:
	Mem15[r1:word32] = Mem0[r0 + 8:word32]
	return
SSIDataGet_exit:


void SSIDataNonBlockingGet(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r0 r3
// Preserved: sp
SSIDataNonBlockingGet_entry:
l00009AC8:
	word32 r3_5 = Mem0[r0 + 12:word32]
	word32 r3_10 = r3_5 & 0x00000004
	branch (r3_5 & 0x00000004) == 0x00000000 l00009AD2
l00009AD0_1:
	r3_10 = Mem0[r0 + 8:word32]
l00009AD2:
	Mem13[r1:word32] = r3_10
	return
SSIDataNonBlockingGet_exit:


void SysCtlSRAMSizeGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
SysCtlSRAMSizeGet_entry:
l00009ADC:
	return
SysCtlSRAMSizeGet_exit:


void SysCtlFlashSizeGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
SysCtlFlashSizeGet_entry:
l00009AF4:
	return
SysCtlFlashSizeGet_exit:


void SysCtlPinPresent(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r3
// Preserved: sp
SysCtlPinPresent_entry:
l00009B0C:
	branch Mem0[Mem0[0x00009B1C:word32]:word32] + r0 + C == 0x00000000 l00009B16
l00009B14_1:
l00009B16:
	return
SysCtlPinPresent_exit:


void SysCtlPeripheralPresent(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: sp
SysCtlPeripheralPresent_entry:
l00009B20:
	branch (r0 & ~0xF0000000) + Mem0[Mem0[Mem0[0x00009B38:word32] + ((r0 >>u 28) << 2):word32]:word32] + (r0 >>u 28 <u 0x00000000) == 0x00000000 l00009B34
l00009B32_1:
l00009B34:
	return
SysCtlPeripheralPresent_exit:


void SysCtlPeripheralReset(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 sp
SysCtlPeripheralReset_entry:
l00009B3C:
	word32 r2_12 = Mem10[Mem0[0x00009B78:word32] + ((r0 >>u 28) << 0x00000002) + 16:word32]
	Mem17[r2_12:word32] = r0 & ~0xF0000000 | Mem10[r2_12:word32]
	word32 dwLoc0C_43 = 0x00000000
	branch true l00009B6A
l00009B5E:
	dwLoc0C_43 = dwLoc0C_43 + 0x00000001
	branch dwLoc0C_43 <=u 0x0000000F l00009B5E
l00009B6A:
	Mem37[r2_12:word32] = Mem32[r2_12:word32] & ~r0
	return
SysCtlPeripheralReset_exit:


void SysCtlPeripheralEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlPeripheralEnable_entry:
l00009B7C:
	word32 r3_8 = Mem0[Mem0[0x00009B94:word32] + ((r0 >>u 28) << 0x00000002) + 28:word32]
	Mem13[r3_8:word32] = r0 & ~0xF0000000 | Mem0[r3_8:word32]
	return
SysCtlPeripheralEnable_exit:


void SysCtlPeripheralDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlPeripheralDisable_entry:
l00009B98:
	word32 r2_9 = Mem0[Mem0[0x00009BB0:word32] + ((r0 >>u 28) << 0x00000002) + 28:word32]
	Mem13[r2_9:word32] = Mem0[r2_9:word32] & ~(r0 & ~0xF0000000)
	return
SysCtlPeripheralDisable_exit:


void SysCtlPeripheralSleepEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlPeripheralSleepEnable_entry:
l00009BB4:
	word32 r3_8 = Mem0[Mem0[0x00009BCC:word32] + ((r0 >>u 28) << 0x00000002) + 40:word32]
	Mem13[r3_8:word32] = r0 & ~0xF0000000 | Mem0[r3_8:word32]
	return
SysCtlPeripheralSleepEnable_exit:


void SysCtlPeripheralSleepDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlPeripheralSleepDisable_entry:
l00009BD0:
	word32 r2_9 = Mem0[Mem0[0x00009BE8:word32] + ((r0 >>u 28) << 0x00000002) + 40:word32]
	Mem13[r2_9:word32] = Mem0[r2_9:word32] & ~(r0 & ~0xF0000000)
	return
SysCtlPeripheralSleepDisable_exit:


void SysCtlPeripheralDeepSleepEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlPeripheralDeepSleepEnable_entry:
l00009BEC:
	word32 r3_8 = Mem0[Mem0[0x00009C04:word32] + ((r0 >>u 28) << 0x00000002) + 52:word32]
	Mem13[r3_8:word32] = r0 & ~0xF0000000 | Mem0[r3_8:word32]
	return
SysCtlPeripheralDeepSleepEnable_exit:


void SysCtlPeripheralDeepSleepDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlPeripheralDeepSleepDisable_entry:
l00009C08:
	word32 r2_9 = Mem0[Mem0[0x00009C20:word32] + ((r0 >>u 28) << 0x00000002) + 52:word32]
	Mem13[r2_9:word32] = Mem0[r2_9:word32] & ~(r0 & ~0xF0000000)
	return
SysCtlPeripheralDeepSleepDisable_exit:


void SysCtlPeripheralClockGating(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
SysCtlPeripheralClockGating_entry:
l00009C24:
	word32 r2_4 = Mem0[0x00009C3C:word32]
	word32 r3_5 = Mem0[r2_4:word32]
	branch r0 != 0x00000000 l00009C32
l00009C32:
	Mem8[r2_4:word32] = r3_5 | 0x08000000
	return
l00009C2A:
	Mem10[r2_4:word32] = r3_5 & ~0x08000000
	return
SysCtlPeripheralClockGating_exit:


void SysCtlIntRegister(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr sp
SysCtlIntRegister_entry:
l00009C40:
	IntRegister(0x0000002C, r0)
l00009C50_thunk_IntEnable:
	IntEnable(0x0000002C)
	return
SysCtlIntRegister_exit:


void SysCtlIntUnregister()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr sp
SysCtlIntUnregister_entry:
l00009C54:
	IntDisable(0x0000002C)
l00009C62_thunk_IntUnregister:
	IntUnregister(0x0000002C)
	return
SysCtlIntUnregister_exit:


void SysCtlIntEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlIntEnable_entry:
l00009C68:
	word32 r2_4 = Mem0[0x00009C74:word32]
	Mem9[r2_4:word32] = r0 | Mem0[r2_4:word32]
	return
SysCtlIntEnable_exit:


void SysCtlIntDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r0 r2 r3
// Preserved: sp
SysCtlIntDisable_entry:
l00009C78:
	word32 r2_4 = Mem0[0x00009C84:word32]
	Mem8[r2_4:word32] = Mem0[r2_4:word32] & ~r0
	return
SysCtlIntDisable_exit:


void SysCtlIntClear(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
SysCtlIntClear_entry:
l00009C88:
	Mem6[Mem0[0x00009C90:word32]:word32] = r0
	return
SysCtlIntClear_exit:


void SysCtlIntStatus(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
SysCtlIntStatus_entry:
l00009C94:
	branch r0 != 0x00000000 l00009C9C
l00009C9C:
	return
l00009C96:
	return
SysCtlIntStatus_exit:


void SysCtlLDOSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
SysCtlLDOSet_entry:
l00009CAC:
	Mem6[Mem0[0x00009CB4:word32]:word32] = r0
	return
SysCtlLDOSet_exit:


void SysCtlLDOGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
SysCtlLDOGet_entry:
l00009CB8:
	return
SysCtlLDOGet_exit:


void SysCtlLDOConfigSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
SysCtlLDOConfigSet_entry:
l00009CC4:
	Mem6[Mem0[0x00009CCC:word32]:word32] = r0
	return
SysCtlLDOConfigSet_exit:


void SysCtlReset()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
SysCtlReset_exit:
SysCtlReset_entry:
l00009CD0:
	Mem6[Mem0[0x00009CD8:word32]:word32] = Mem0[0x00009CDC:word32]
l00009CD6:


void SysCtlSleep()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
SysCtlSleep_entry:
l00009CE0:
l00009CE0_thunk_CPUwfi:
	CPUwfi()
	return
SysCtlSleep_exit:


void SysCtlDeepSleep()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r3
// Preserved: r4 sp
SysCtlDeepSleep_entry:
l00009CE4:
	word32 r4_8 = Mem7[0x00009D00:word32]
	Mem11[r4_8:word32] = Mem7[r4_8:word32] | 0x00000004
	CPUwfi()
	Mem14[r4_8:word32] = Mem11[r4_8:word32] & ~0x00000004
	return
SysCtlDeepSleep_exit:


void SysCtlResetCauseGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
SysCtlResetCauseGet_entry:
l00009D04:
	return
SysCtlResetCauseGet_exit:


void SysCtlResetCauseClear(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r0 r2 r3
// Preserved: sp
SysCtlResetCauseClear_entry:
l00009D10:
	word32 r2_4 = Mem0[0x00009D1C:word32]
	Mem8[r2_4:word32] = Mem0[r2_4:word32] & ~r0
	return
SysCtlResetCauseClear_exit:


void SysCtlBrownOutConfigSet(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: r1 r3
// Preserved: sp
SysCtlBrownOutConfigSet_entry:
l00009D20:
	Mem8[Mem0[0x00009D2C:word32]:word32] = r0 | r1 << 0x00000002
	return
SysCtlBrownOutConfigSet_exit:


void SysCtlClockSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV r1 r2 r3
// Preserved: r0 r4 r5 r6 r7 sp
SysCtlClockSet_entry:
l00009D30:
	word32 r4_15 = Mem12[0x00009DE0:word32]
	word32 r3_17 = Mem12[r4_15:word32]
	word32 r5_25 = Mem12[0x00009DE8:word32]
	word32 r2_28 = r0 & 0x000033F0 | (Mem12[0x00009DE4:word32] & r3_17 | 0x00000800) & (r0 | ~0x00000003)
	Mem29[r4_15:word32] = r3_17 & ~0x00400000 | 0x00000800
	Mem30[r5_25:word32] = 0x00000040
	Mem31[r4_15:word32] = r2_28
	word32 dwLoc14_117 = 0x00000000
	branch true l00009D76
l00009D6A:
	dwLoc14_117 = dwLoc14_117 + 0x00000001
	branch dwLoc14_117 <=u 0x0000000F l00009D6A
l00009D76:
	word32 r2_52 = r2_28 & ~0x00000003 | r0 & 0x00000003
	Mem55[Mem47[0x00009DE0:word32]:word32] = r2_52
	word32 r1_58 = r0 & 0x07C00000 | r2_52 & ~0x07C00000
	branch r0 << 20 < 0x00000000 l00009DBE
l00009D94:
	word32 dwLoc14_120 = 0x00008000
	branch 0x00008000 == 0x00000000 l00009DBA
l00009D9E:
	word32 r2_64 = Mem62[0x00009DEC:word32]
	branch Mem62[r2_64:word32] << 25 >= 0x00000000 l00009DAE
l00009DAE:
	dwLoc14_120 = dwLoc14_120 - 0x00000001
	branch dwLoc14_120 != 0x00000000 l00009DA8
l00009DA8:
	branch Mem73[r2_64:word32] << 25 < 0x00000000 l00009DBA
l00009DA6:
l00009DBA:
	r1_58 = r1_58 & ~0x00000800
l00009DBE:
	Mem90[Mem86[0x00009DE0:word32]:word32] = r1_58
	word32 dwLoc14_123 = 0x00000000
	branch true l00009DD8
l00009DCC:
	dwLoc14_123 = dwLoc14_123 + 0x00000001
	branch dwLoc14_123 <=u 0x0000000F l00009DCC
l00009DD8:
	return
SysCtlClockSet_exit:


word32 SysCtlClockGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: r0
// Trashed: NZCV r0 r1 r2 r3
// Preserved: sp
SysCtlClockGet_entry:
l00009DF0:
	word32 r0_12
	word32 r3_5 = Mem0[Mem0[0x00009E54:word32]:word32]
	branch (r3_5 & 0x00000030) == 0x00000010 l00009E4E
l00009E4E:
	r0_12 = Mem0[0x00009E64:word32]
l00009DFC:
	branch (r3_5 & 0x00000030) == 0x00000020 l00009E4A
l00009E4A:
	r0_12 = Mem0[0x00009E60:word32]
l00009E00:
	branch (r3_5 & 0x00000030) == 0x00000000 l00009E06
l00009E06:
	r0_12 = Mem0[Mem0[0x00009E58:word32] + ((uint32) SLICE(r3_5, ui4, 6) << 0x00000002) + 48:word32]
l00009E12:
	branch r3_5 << 20 < 0x00000000 l00009E3A
l00009E16:
	word32 r2_23 = Mem0[Mem0[0x00009E5C:word32]:word32]
	r0_12 = r0_12 * ((uint32) SLICE(r2_23, ui9, 5) + 0x00000002) /u ((r2_23 & 0x0000001F) + 0x00000002)
	branch r2_23 << 17 >= 0x00000000 l00009E34
l00009E32_1:
	r0_12 = r0_12 >>u 1
l00009E34:
	branch r2_23 << 16 >= 0x00000000 l00009E3A
l00009E38_1:
	r0_12 = r0_12 >>u 2
l00009E3A:
	branch r3_5 << 9 >= 0x00000000 l00009E04
l00009E3E:
	return r0_12 /u ((uint32) SLICE(r3_5, ui4, 23) + 0x00000001)
l00009E02:
	r0_12 = 0x00000000
l00009E04:
	return r0_12
SysCtlClockGet_exit:


void SysCtlPWMClockSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlPWMClockSet_entry:
l00009E68:
	word32 r2_4 = Mem0[0x00009E78:word32]
	Mem10[r2_4:word32] = r0 | Mem0[r2_4:word32] & ~0x001E0000
	return
SysCtlPWMClockSet_exit:


void SysCtlPWMClockGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
SysCtlPWMClockGet_entry:
l00009E7C:
	return
SysCtlPWMClockGet_exit:


void SysCtlADCSpeedSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZC r0 r1 r2 r3
// Preserved: r4 sp
SysCtlADCSpeedSet_entry:
l00009E8C:
	word32 r4_6 = Mem5[0x00009EB8:word32]
	word32 r1_7 = Mem5[0x00009EBC:word32]
	word32 r2_9 = Mem5[0x00009EC0:word32]
	Mem13[r4_6:word32] = Mem5[r4_6:word32] & ~0x00000F00 | r0
	Mem19[r1_7:word32] = Mem13[r1_7:word32] & ~0x00000F00 | r0
	Mem24[r2_9:word32] = r0 | Mem19[r2_9:word32] & ~0x00000F00
	return
SysCtlADCSpeedSet_exit:


void SysCtlADCSpeedGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
SysCtlADCSpeedGet_entry:
l00009EC4:
	return
SysCtlADCSpeedGet_exit:


void SysCtlIOSCVerificationSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
SysCtlIOSCVerificationSet_entry:
l00009ED4:
	word32 r2_4 = Mem0[0x00009EEC:word32]
	word32 r3_5 = Mem0[r2_4:word32]
	branch r0 != 0x00000000 l00009EE2
l00009EE2:
	Mem8[r2_4:word32] = r3_5 | 0x00000008
	return
l00009EDA:
	Mem10[r2_4:word32] = r3_5 & ~0x00000008
	return
SysCtlIOSCVerificationSet_exit:


void SysCtlMOSCVerificationSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
SysCtlMOSCVerificationSet_entry:
l00009EF0:
	word32 r2_4 = Mem0[0x00009F08:word32]
	word32 r3_5 = Mem0[r2_4:word32]
	branch r0 != 0x00000000 l00009EFE
l00009EFE:
	Mem8[r2_4:word32] = r3_5 | 0x00000004
	return
l00009EF6:
	Mem10[r2_4:word32] = r3_5 & ~0x00000004
	return
SysCtlMOSCVerificationSet_exit:


void SysCtlPLLVerificationSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
SysCtlPLLVerificationSet_entry:
l00009F0C:
	word32 r2_4 = Mem0[0x00009F24:word32]
	word32 r3_5 = Mem0[r2_4:word32]
	branch r0 != 0x00000000 l00009F1A
l00009F1A:
	Mem8[r2_4:word32] = r3_5 | 0x00000400
	return
l00009F12:
	Mem10[r2_4:word32] = r3_5 & ~0x00000400
	return
SysCtlPLLVerificationSet_exit:


void SysCtlClkVerificationClear()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r1 r2 r3
// Preserved: sp
SysCtlClkVerificationClear_entry:
l00009F28:
	word32 r3_6 = Mem0[0x00009F34:word32]
	Mem7[r3_6:word32] = 0x00000001
	Mem8[r3_6:word32] = 0x00000000
	return
SysCtlClkVerificationClear_exit:


void UARTParityModeSet(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r1 r3
// Preserved: sp
UARTParityModeSet_entry:
l00009F38:
	Mem10[r0 + 44:word32] = r1 | Mem0[r0 + 44:word32] & ~0x00000086
	return
UARTParityModeSet_exit:


void UARTParityModeGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0
// Preserved: sp
UARTParityModeGet_entry:
l00009F44:
	return
UARTParityModeGet_exit:


void UARTConfigSet(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31] r2:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: r3 r4 r5 r6 r7 sp
UARTConfigSet_entry:
l00009F4C:
l00009F56:
	word32 r4_26 = Mem15[r0 + 0x00000018:word32]
	branch (r4_26 & 0x00000008) != 0x00000000 l00009F56
l00009F5E:
	Mem33[r0 + 44:word32] = Mem15[r0 + 44:word32] & ~0x00000010
	Mem37[r0 + 48:word32] = Mem33[r0 + 48:word32] & ~0x00000300 & ~0x00000001
	word32 r0_38 = SysCtlClockGet()
	word32 r2_48 = r0_38 /u (r1 << 4)
	Mem56[r0 + 36:word32] = r2_48
	Mem57[r0 + 40:word32] = (r0_38 - (r1 << 4) * r2_48 << 3) /u r1 + 0x00000001 >>u 1
	Mem59[r0 + 44:word32] = r2
	Mem60[r0 + 24:word32] = r4_26 & 0x00000008
	Mem63[r0 + 44:word32] = Mem60[r0 + 44:word32] | 0x00000010
	Mem67[r0 + 48:word32] = Mem63[r0 + 48:word32] | 0x00000300 | 0x00000001
	return
UARTConfigSet_exit:


void UARTConfigGet(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31] r2:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
UARTConfigGet_entry:
l00009FA8:
	Mem36[r1:word32] = (SysCtlClockGet() << 2) /u (Mem15[r0 + 40:word32] + (Mem15[r0 + 36:word32] << 0x00000006))
	Mem39[r2:word32] = Mem36[r0 + 44:word32] & 0x000000EE
	return
UARTConfigGet_exit:


void UARTEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
UARTEnable_entry:
l00009FD4:
	Mem7[r0 + 44:word32] = Mem0[r0 + 44:word32] | 0x00000010
	Mem11[r0 + 48:word32] = Mem7[r0 + 48:word32] | 0x00000300 | 0x00000001
	return
UARTEnable_exit:


void UARTDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZC r2 r3
// Preserved: sp
UARTDisable_entry:
l00009FEC:
l00009FF0:
	branch Mem0[r0 + 0x00000018:word32] << 28 < 0x00000000 l00009FF0
l00009FF6:
	Mem14[r0 + 44:word32] = Mem0[r0 + 44:word32] & ~0x00000010
	Mem18[r0 + 48:word32] = Mem14[r0 + 48:word32] & ~0x00000300 & ~0x00000001
	return
UARTDisable_exit:


void UARTCharsAvail()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0
// Preserved: sp
UARTCharsAvail_entry:
l0000A00C:
	return
UARTCharsAvail_exit:


void UARTSpaceAvail()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0
// Preserved: sp
UARTSpaceAvail_entry:
l0000A018:
	return
UARTSpaceAvail_exit:


void UARTCharNonBlockingGet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZC r0 r3
// Preserved: sp
UARTCharNonBlockingGet_entry:
l0000A024:
	branch Mem0[r0 + 24:word32] << 27 < 0x00000000 l0000A02C
l0000A02A_1:
l0000A02C:
	return
UARTCharNonBlockingGet_exit:


void UARTCharGet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
UARTCharGet_entry:
l0000A034:
l0000A038:
	branch Mem0[r0 + 0x00000018:word32] << 27 < 0x00000000 l0000A038
l0000A03E:
	return
UARTCharGet_exit:


void UARTCharNonBlockingPut(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r0 r3
// Preserved: sp
UARTCharNonBlockingPut_entry:
l0000A044:
	branch Mem0[r0 + 24:word32] << 26 < 0x00000000 l0000A04C
l0000A04A_1:
	Mem10[r0:word32] = r1
l0000A04C:
	return
UARTCharNonBlockingPut_exit:


void UARTCharPut(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r2 r3
// Preserved: sp
UARTCharPut_entry:
l0000A054:
l0000A058:
	branch Mem0[r0 + 0x00000018:word32] << 26 < 0x00000000 l0000A058
l0000A05E:
	Mem14[r0:word32] = r1
	return
UARTCharPut_exit:


void UARTBreakCtl(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
UARTBreakCtl_entry:
l0000A064:
	word32 r3_5 = Mem0[r0 + 44:word32]
	branch r1 != 0x00000000 l0000A070
l0000A070:
	Mem8[r0 + 44:word32] = r3_5 | 0x00000001
	return
l0000A068:
	Mem10[r0 + 44:word32] = r3_5 & ~0x00000001
	return
UARTBreakCtl_exit:


void UARTIntRegister(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr r4 sp
UARTIntRegister_entry:
l0000A078:
	branch r0 != Mem7[0x0000A094:word32] l0000A082
l0000A080_1:
l0000A082:
	IntRegister(0x00000016, r1)
l0000A090_thunk_IntEnable:
	IntEnable(0x00000016)
	return
UARTIntRegister_exit:


void UARTIntUnregister(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr r4 sp
UARTIntUnregister_entry:
l0000A098:
	branch r0 != Mem7[0x0000A0B4:word32] l0000A0A2
l0000A0A0_1:
l0000A0A2:
	IntDisable(0x00000016)
l0000A0B0_thunk_IntUnregister:
	IntUnregister(0x00000016)
	return
UARTIntUnregister_exit:


void UARTIntEnable(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r1 r3
// Preserved: sp
UARTIntEnable_entry:
l0000A0B8:
	Mem9[r0 + 56:word32] = r1 | Mem0[r0 + 56:word32]
	return
UARTIntEnable_exit:


void UARTIntDisable(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: r1 r3
// Preserved: sp
UARTIntDisable_entry:
l0000A0C0:
	Mem8[r0 + 56:word32] = Mem0[r0 + 56:word32] & ~r1
	return
UARTIntDisable_exit:


word32 UARTIntStatus(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut: r0
// Trashed: r0
// Preserved: sp
UARTIntStatus_entry:
l0000A0CC:
	branch r1 != 0x00000000 l0000A0D2
l0000A0D2:
	return Mem0[r0 + 64:word32]
l0000A0CE:
	return Mem0[r0 + 60:word32]
UARTIntStatus_exit:


void UARTIntClear(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
UARTIntClear_entry:
l0000A0D8:
	Mem5[r0 + 68:word32] = r1
	return
UARTIntClear_exit:


void CPUcpsie()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
CPUcpsie_entry:
l0000A0DC:
	__cps()
	return
CPUcpsie_exit:


void CPUcpsid()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
CPUcpsid_entry:
l0000A0E4:
	__cps()
	return
CPUcpsid_exit:


void CPUwfi()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
CPUwfi_entry:
l0000A0EC:
	__wait_for_interrupt()
	return
CPUwfi_exit:


void I2CMasterInit(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: r3 r4 r5 sp
I2CMasterInit_entry:
l0000A0F4:
	Mem18[r0 + 32:word32] = Mem11[r0 + 32:word32] | 0x00000010
	word32 r0_19 = SysCtlClockGet()
	word32 r3_27 = Mem18[0x0000A120:word32]
	word32 r2_28 = Mem18[0x0000A124:word32]
	branch r1 != 0x00000001 l0000A112
l0000A110_1:
	r3_27 = r2_28
l0000A112:
	Mem40[r0 + 12:word32] = (r0_19 - 0x00000001 + r3_27) /u r3_27 - 0x00000001
	return
I2CMasterInit_exit:


void I2CSlaveInit(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: r2 r3
// Preserved: r4 sp
I2CSlaveInit_entry:
l0000A128:
	Mem11[r0 - 0x000007E0:word32] = Mem5[r0 - 0x000007E0:word32] | 0x00000020
	Mem12[r0 + 4:word32] = 0x00000001
	Mem14[r0:word32] = r1
	return
I2CSlaveInit_exit:


void I2CMasterEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CMasterEnable_entry:
l0000A140:
	Mem7[r0 + 32:word32] = Mem0[r0 + 32:word32] | 0x00000010
	return
I2CMasterEnable_exit:


void I2CSlaveEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r1 r2 r3
// Preserved: sp
I2CSlaveEnable_entry:
l0000A14C:
	Mem9[r0 - 0x000007E0:word32] = Mem0[r0 - 0x000007E0:word32] | 0x00000020
	Mem10[r0 + 4:word32] = 0x00000001
	return
I2CSlaveEnable_exit:


void I2CMasterDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CMasterDisable_entry:
l0000A160:
	Mem7[r0 + 32:word32] = Mem0[r0 + 32:word32] & ~0x00000010
	return
I2CMasterDisable_exit:


void I2CSlaveDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
I2CSlaveDisable_entry:
l0000A16C:
	Mem6[r0 + 4:word32] = 0x00000000
	Mem9[r0 - 0x000007E0:word32] = Mem6[r0 - 0x000007E0:word32] & ~0x00000020
	return
I2CSlaveDisable_exit:


void I2CIntRegister(word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r1:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr sp
I2CIntRegister_entry:
l0000A180:
	IntRegister(0x00000018, r1)
l0000A18E_thunk_IntEnable:
	IntEnable(0x00000018)
	return
I2CIntRegister_exit:


void I2CIntUnregister()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr sp
I2CIntUnregister_entry:
l0000A194:
	IntDisable(0x00000018)
l0000A1A2_thunk_IntUnregister:
	IntUnregister(0x00000018)
	return
I2CIntUnregister_exit:


void I2CMasterIntEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CMasterIntEnable_entry:
l0000A1A8:
	Mem5[r0 + 16:word32] = 0x00000001
	return
I2CMasterIntEnable_exit:


void I2CSlaveIntEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CSlaveIntEnable_entry:
l0000A1B0:
	Mem5[r0 + 12:word32] = 0x00000001
	return
I2CSlaveIntEnable_exit:


void I2CMasterIntDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CMasterIntDisable_entry:
l0000A1B8:
	Mem5[r0 + 16:word32] = 0x00000000
	return
I2CMasterIntDisable_exit:


void I2CSlaveIntDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CSlaveIntDisable_entry:
l0000A1C0:
	Mem5[r0 + 12:word32] = 0x00000000
	return
I2CSlaveIntDisable_exit:


word32 I2CMasterIntStatus(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut: r0
// Trashed: NZCV r0
// Preserved: sp
I2CMasterIntStatus_entry:
l0000A1C8:
	branch r1 != 0x00000000 l0000A1D4
l0000A1D4:
	word32 r0_6 = Mem0[r0 + 24:word32]
	word32 r0_10 = r0_6
	branch r0_6 == 0x00000000 l0000A1DC
l0000A1DA_1:
	r0_10 = 0x00000001
l0000A1DC:
	return r0_10
l0000A1CA:
	word32 r0_11 = Mem0[r0 + 20:word32]
	word32 r0_12 = r0_11
	branch r0_11 == 0x00000000 l0000A1D2
l0000A1D0_1:
	r0_12 = 0x00000001
l0000A1D2:
	return r0_12
I2CMasterIntStatus_exit:


void I2CSlaveIntStatus(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r0
// Preserved: sp
I2CSlaveIntStatus_entry:
l0000A1E0:
	branch r1 != 0x00000000 l0000A1EC
l0000A1EC:
	branch Mem0[r0 + 20:word32] == 0x00000000 l0000A1F4
l0000A1F2_1:
l0000A1F4:
	return
l0000A1E2:
	branch Mem0[r0 + 16:word32] == 0x00000000 l0000A1EA
l0000A1E8_1:
l0000A1EA:
	return
I2CSlaveIntStatus_exit:


void I2CMasterIntClear(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CMasterIntClear_entry:
l0000A1F8:
	Mem5[r0 + 28:word32] = 0x00000001
	Mem6[r0 + 24:word32] = 0x00000001
	return
I2CMasterIntClear_exit:


void I2CSlaveIntClear(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CSlaveIntClear_entry:
l0000A200:
	Mem5[r0 + 24:word32] = 0x00000001
	return
I2CSlaveIntClear_exit:


void I2CMasterSlaveAddrSet(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31] r2:[0..31]
// LiveOut:
// Trashed: r2
// Preserved: sp
I2CMasterSlaveAddrSet_entry:
l0000A208:
	Mem7[r0:word32] = r2 | r1 << 0x00000001
	return
I2CMasterSlaveAddrSet_exit:


void I2CMasterBusy()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0
// Preserved: sp
I2CMasterBusy_entry:
l0000A210:
	return
I2CMasterBusy_exit:


void I2CMasterBusBusy()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0
// Preserved: sp
I2CMasterBusBusy_entry:
l0000A218:
	return
I2CMasterBusBusy_exit:


void I2CMasterControl(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
I2CMasterControl_entry:
l0000A220:
	Mem5[r0 + 4:word32] = r1
	return
I2CMasterControl_exit:


void I2CMasterErr(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
I2CMasterErr_entry:
l0000A224:
	word32 r3_5 = Mem0[r0 + 4:word32]
	branch r3_5 << 31 < 0x00000000 l0000A236
l0000A236:
l0000A22A:
	branch (r3_5 & 0x00000002) == 0x00000000 l0000A238
l0000A238:
	return
l0000A230:
	return
I2CMasterErr_exit:


void I2CMasterDataPut(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
I2CMasterDataPut_entry:
l0000A23C:
	Mem5[r0 + 8:word32] = r1
	return
I2CMasterDataPut_exit:


void I2CMasterDataGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0
// Preserved: sp
I2CMasterDataGet_entry:
l0000A240:
	return
I2CMasterDataGet_exit:


void I2CSlaveStatus()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0
// Preserved: sp
I2CSlaveStatus_entry:
l0000A244:
	return
I2CSlaveStatus_exit:


void I2CSlaveDataPut(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
I2CSlaveDataPut_entry:
l0000A248:
	Mem5[r0 + 8:word32] = r1
	return
I2CSlaveDataPut_exit:


void I2CSlaveDataGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0
// Preserved: sp
I2CSlaveDataGet_entry:
l0000A24C:
	return
I2CSlaveDataGet_exit:


bool memcpy(word32 r0, word32 r1, word32 r2, word32 r4, word32 r5, word32 r6, word32 r7, word32 lr, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & lrOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  lr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31] r4:[0..31] r5:[0..31] r6:[0..31] r7:[0..31]
// LiveOut: Z lr r4 r5 r6 r7
// Trashed: NZCV lr r0 r1 r2 r3 r4 r5 r6 r7
// Preserved: sp
memcpy_entry:
l0000A5C4:
	word32 r5_146 = r0
	branch r2 <=u 0x0000000F l0000A62C
l0000A5CC:
	branch (r1 | r0) << 30 != 0x00000000 l0000A642
l0000A642:
	r5_146 = r0
l0000A5D4:
	word32 r4_27 = r1
	word32 r3_28 = r0
	word32 r5_35 = r0 + ((r2 - 0x00000010 >>u 4) + 0x00000001 << 4)
l0000A5E4:
	Mem40[r3_28:word32] = Mem37[r4_27:word32]
	Mem42[r3_28 + 4:word32] = Mem40[r4_27 + 4:word32]
	Mem44[r3_28 + 8:word32] = Mem42[r4_27 + 8:word32]
	Mem46[r3_28 + 12:word32] = Mem44[r4_27 + 12:word32]
	r3_28 = r3_28 + 0x00000010
	r4_27 = r4_27 + 0x00000010
	branch r5_35 != r3_28 l0000A5E4
l0000A5FC:
	word32 r6_54 = r2 - 0x00000010 & ~0x0000000F
	r5_146 = r0 + (r6_54 + 0x00000010)
	r1 = r1 + (r6_54 + 0x00000010)
	branch (r2 & 0x0000000F) <=u 0x00000003 l0000A646
l0000A646:
	r2 = r2 & 0x0000000F
l0000A60C:
	word32 r6_65 = (r2 & 0x0000000F) - 0x00000004
	word32 r3_66 = 0x00000000
	word32 r4_68 = (r6_65 >>u 2) + 0x00000001
l0000A616:
	Mem77[r5_146 + r3_66:word32] = Mem74[r1 + r3_66:word32]
	r3_66 = r3_66 + 0x00000004
	branch r3_66 != r4_68 << 2 l0000A616
l0000A620:
	word32 r6_84 = r6_65 & ~0x00000003
	r2 = r2 & 0x00000003
	r1 = r1 + (r6_84 + 0x00000004)
	r5_146 = r5_146 + (r6_84 + 0x00000004)
l0000A62C:
	branch r2 == 0x00000000 l0000A63C
l0000A630:
	word32 r3_101 = 0x00000000
l0000A632:
	Mem100[r5_146 + r3_101:byte] = (byte) (word32) Mem97[r1 + r3_101:byte]
	r3_101 = r3_101 + 0x00000001
	branch r3_101 != r2 l0000A632
l0000A63C:
	word32 r4_133
	word32 r5_134
	word32 r6_135
	word32 r7_136
	word32 lr_137
	byte NZCV_142
	call lr (retsize: 0;)
		uses: lr:lr,r0:r0,r1:lr,r2:r2_131,r4:r4,r5:r5,r6:r6,r7:r7
		defs: lr:lr_137,NZCV:NZCV_142,r4:r4_133,r5:r5_134,r6:r6_135,r7:r7_136
	r4Out = r4_133
	r5Out = r5_134
	r6Out = r6_135
	r7Out = r7_136
	lrOut = lr_137
	return SLICE(NZCV_142, bool, 2)
memcpy_exit:


