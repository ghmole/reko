void fn000015E8(word32 d3, word32 a2, word32 a5, word32 a6, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a2:[0..31] a5:[0..31] a6:[0..31] d3:[0..31] Stack +0004:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a2 a5 a6 a7 d0 d3
// Preserved:
fn000015E8_entry:
l000015E8:
	word32 a7_20
	word32 a6_21
	word32 d0_25
	word32 a5_24
	word32 a2_23
	call a5 + 130<i32> (retsize: 4;)
		uses: a2:dwArg04,a5:a5,a6:fp - 4<32>,d3:d3,Stack +0004:Mem13[dwArg04 + 16<i32>:word32],Stack +0008:a2,Stack +000C:d3,Stack +0010:a6,Stack +0018:dwArg04
		defs: a2:a2_23,a5:a5_24,a6:a6_21,a7:a7_20,d0:d0_25
	branch d0_25 == 0<32> l0000162A
l00001602:
	word32 d3_41
	branch a2_23 - (a5_24 + -2656<i32>) != 0<32> l00001610
l00001610:
	branch a2_23 - (a5_24 + -2624<i32>) != 0<32> l00001628
l00001618:
	d3_41 = 1<i32>
l0000160A:
	d3_41 = 0<i32>
l0000161A:
	Mem48[a5_24 + -1368<i32>:word32] = Mem17[a5_24 + -1368<i32>:word32] + 1<32>
	branch (Mem48[a2_23 + 0xC<32>:word16] & 0x10C<16>) == 0<16> l00001634
l00001634:
	branch Mem48[a5_24 + -2696<i32> + d3_41 * 4<i32>:word32] != 0<32> l00001652
l0000163E:
	Mem67[a7_20:word32] = 0x00000200<p32>
	word32 d0_74
	call a5_24 + 114<i32> (retsize: 4;)
		uses: a2:a2_23,a5:a5_24,a6:a6_21,d3:d3_60,Stack +0008:dwArg04
		defs: a2:a2_72,a5:a5_73,d0:d0_74,d3:d3_71
	Mem79[a5_24 + -2696<i32> + d3_41 * 4<i32>:word32] = d0_74
	branch d0_74 == 0<32> l0000162A
l00001652:
	word32 d0_86 = Mem85[a5_24 + -2696<i32> + d3_41 * 4<i32>:word32]
	Mem88[a2_23 + 8<i32>:word32] = d0_86
	Mem89[a2_23:word32] = d0_86
	Mem90[a2_23 + 24<i32>:word32] = 0x200<32>
	Mem91[a2_23 + 4<i32>:word32] = 0x200<32>
	Mem93[a2_23 + 14<i32>:word16] = Mem91[a2_23 + 14<i32>:word16] | 0x1102<16>
	return
l00001628:
l0000162A:
	return
fn000015E8_exit:


void fn00001680(word32 a5, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut:
// Trashed: CVZN a2 a5 a6 a7 d0 d1 d2 d3 d4
// Preserved: X
fn00001680_entry:
l00001680:
	branch dwArg04 == 0<32> l000016B8
l000016B8:
	branch __btst(Mem10[dwArg08 + 14<i32>:byte], 4<16>) l000016C8
l000016C0:
	word32 d3_120
	word32 d4_121
	word32 a2_122
	word32 a5_123
	word32 a6_124
	fn00001D80(a5, dwArg08, out d3_120, out d4_121, out a2_122, out a5_123, out a6_124)
l00001690:
	branch __btst(Mem10[dwArg08 + 14<i32>:byte], 4<16>) l000016C8
l000016C8:
	return
l00001698:
	word32 a2_48
	word32 a6_54
	word32 d3_117
	word32 d4_118
	word32 a5_119
	fn00001D80(a5, dwArg08, out d3_117, out d4_118, out a2_48, out a5_119, out a6_54)
	Mem64[a2_48 + 14<i32>:word16] = Mem46[a2_48 + 14<i32>:word16] & 0xEEFF<16>
	Mem66[a2_48 + 24<i32>:word32] = 0<i32>
	Mem67[a2_48:word32] = 0<i32>
	Mem68[a2_48 + 8<i32>:word32] = 0<i32>
	return
fn00001680_exit:


void fn000016D0(word32 d6, word32 a5, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5:[0..31] d6:[8..31] Stack +0008:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a2 a3 a4 a5 a6 d0 d2 d3 d4 d5 d6 d7
// Preserved: a7
fn000016D0_entry:
l000016D0:
	byte v15_39 = Mem37[dwArg08:byte]
	word32 dwLoc0C_199 = 0<i32>
	word32 d6_115 = SEQ(SLICE(d6, word24, 8), v15_39)
	word32 dwArg08_201 = dwArg08 + 1<32>
	branch v15_39 == 0<8> l00001C34
l000016FA:
l0000170E:
	branch false l00001C34
l00001716:
	word32 d0_69
	branch SLICE(d6_115, byte, 0) < 0x20<8> l00001734
l0000171C:
	branch SLICE(d6_115, byte, 0) > 0x78<8> l00001734
l00001734:
	d0_69 = 0<i32>
l00001722:
	d0_69 = (int32) (Mem56[a5 + -2072<i32> + (int32) SLICE(d6_115, byte, 0):byte] & 0xF<8>)
l00001736:
	word32 d0_104 = (int32) (Mem56[a5 + -2040<i32> + ((d0_69 << 3<32>) + dwLoc0C_199):byte] >> 4<8>)
	dwLoc0C_199 = d0_104
	branch d0_104 >u 7<i32> l00001C24
l00001C24:
	byte v42_111 = Mem105[dwArg08_201:byte]
	d6_115 = SEQ(SLICE(d6_115, word24, 8), v42_111)
	dwArg08_201 = dwArg08_201 + 1<32>
	branch v42_111 != 0<8> l0000170E
l00001C34:
	return
l00001750:
	word16 v40_149 = Mem105[0x00001758<p32> + (int32) ((int16) d0_104) * 2<i32>:word16]
	word32 d0_151 = SEQ(SLICE(d0_104, word16, 16), v40_149)
	word32 d2_186
	call 0x00001758<p32> + (int32) v40_149 (retsize: 0;)
		uses: a2:a5 + -2072<i32>,a3:a5 + -2040<i32>,a4:dwLoc1C,a5:a5,a6:fp - 4<32>,d0:d0_151,d2:d2_186,d3:dwLoc10,d4:dwLoc14,d5:dwLoc18,d6:d6_62,d7:dwLoc20,Stack +0224:dwLoc20,Stack +0228:dwLoc1C,Stack +022C:dwLoc18,Stack +0230:dwLoc14,Stack +0234:dwLoc10,Stack +024C:dwArg08_213
		defs: d2:d2_186
	return
fn000016D0_exit:


word32 fn00001C40(word32 a5, byte bArg04, word32 dwArg08, ptr32 & d4Out, ptr32 & d5Out, ptr32 & a5Out, ptr32 & a6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00001C84
//      fn00001CC4
// MayUse:  a5:[0..31] Stack +0004:[0..7] Stack +0008:[0..31]
// LiveOut: a5 a6 a7 d3 d4 d5
// Trashed: CVZNX a0 a1 a2 a3 a5 a6 a7 d0 d1 d2 d3 d4 d5
// Preserved:
fn00001C40_entry:
	byte bArg07_74 = SLICE(dwArg04, byte, 0)
l00001C40:
	word32 d0_20
	word32 v5_9 = Mem5[dwArg08 + 4<i32>:word32] - 1<32>
	Mem10[dwArg08 + 4<i32>:word32] = v5_9
	word32 a6_26 = fp - 4<32>
	branch v5_9 < 0<32> l00001C60
l00001C60:
	word32 a5_25
	word32 d3_29
	word32 d4_30
	word32 d5_31
	d0_20 = fn00001E94(a5, dwArg08, out d3_29, out d4_30, out d5_31, out a5_25, out a6_26)
l00001C4E:
	Mem40[Mem10[dwArg08:word32]:byte] = bArg07_74
	word32 a0_41 = Mem40[dwArg08:word32]
	d0_20 = (int32) (int16) (uint32) (uint8) Mem40[a0_41:byte]
	Mem48[dwArg08:word32] = a0_41 + 1<i32>
l00001C6C:
	word32 a0_56 = Mem55[a6_26 + 16<i32>:word32]
	branch d0_20 != -1<i32> l00001C7C
l00001C7C:
	Mem59[a0_56:word32] = Mem55[a0_56:word32] + 1<32>
	word32 a6_62 = Mem59[a6_26:word32]
	d4Out = <invalid>
	d5Out = <invalid>
	a5Out = <invalid>
	a6Out = a6_62
	return <invalid>
l00001C76:
	Mem64[a0_56:word32] = d0_20
	word32 a6_67 = Mem64[a6_26:word32]
	d4Out = <invalid>
	d5Out = <invalid>
	a5Out = <invalid>
	a6Out = a6_67
	return <invalid>
fn00001C40_exit:


void fn00001C84(word32 a5, word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5:[0..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 a2 a3 a5 a6 a7 d0 d1 d2 d3 d4 d5 d6
// Preserved:
fn00001C84_entry:
l00001C84:
	word32 a7_17 = fp - 0x14<32>
	branch dwArg08 <= 0<32> l00001CBA
l00001C98:
	word32 d3_28 = dwArg04
	word32 d4_29 = dwArg0C
l00001CA4:
	word32 a7_33 = a7_17 - 4<i32>
	Mem35[a7_33:word32] = dwArg10
	Mem38[a7_33 - 4<i32>:word32] = d4_29
	Mem41[a7_33 - 8<i32>:word32] = d3_28
	word32 a7_50 = <invalid>
	word32 d5_56
	word32 a6_118
	d3_28 = fn00001C40(a5, Mem41[a7_33 - 8<i32>:word32], Mem41[a7_33 - 4<i32>:word32], out d4_29, out d5_56, out a5, out a6_118)
	a7_17 = a7_50 + 12<i32>
	branch d5_56 > 0<32> l00001CA4
l00001CBA:
	return
fn00001C84_exit:


void fn00001CC4(word32 a5, word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5:[0..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 a2 a3 a5 a6 a7 d0 d1 d2 d3 d4 d5 d6
// Preserved:
fn00001CC4_entry:
l00001CC4:
	word32 a7_17 = fp - 0x14<32>
	branch dwArg08 <= 0<32> l00001D02
l00001CD8:
	word32 d3_28 = dwArg04
	word32 d4_29 = dwArg0C
l00001CE4:
	word32 a7_37 = a7_17 - 4<i32>
	Mem39[a7_37:word32] = dwArg10
	Mem42[a7_37 - 4<i32>:word32] = d4_29
	Mem49[a7_37 - 8<i32>:word32] = (int32) Mem42[d3_28:byte]
	word32 a7_58 = <invalid>
	word32 d5_64
	word32 a6_126
	d3_28 = fn00001C40(a5, Mem49[a7_37 - 8<i32>:word32], Mem49[a7_37 - 4<i32>:word32], out d4_29, out d5_64, out a5, out a6_126)
	a7_17 = a7_58 + 12<i32>
	branch d5_64 > 0<32> l00001CE4
l00001D02:
	return
fn00001CC4_exit:


void fn00001D0C(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed: CVZN a0 a1 d0
// Preserved: a6 a7
fn00001D0C_entry:
l00001D0C:
	Mem10[dwArg04:word32] = Mem5[dwArg04:word32] + 4<i32>
	return
fn00001D0C_exit:


word32 fn00001D24(word32 a5, word32 dwArg04, ptr32 & d3Out, ptr32 & d4Out, ptr32 & d5Out, ptr32 & d6Out, ptr32 & d7Out, ptr32 & a2Out, ptr32 & a5Out, ptr32 & a6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00001E04
// MayUse:  a5:[0..31] Stack +0004:[0..31]
// LiveOut: a2 a5 a6 a7 d0 d3 d4 d5 d6 d7
// Trashed: CVZNX a2 a5 a6 a7 d0 d1 d2 d3 d4
// Preserved:
fn00001D24_entry:
l00001D24:
	branch dwArg04 != 0<32> l00001D44
l00001D44:
	word32 a7_26 = <invalid>
	word32 a2_19
	word32 d4_23
	word32 a5_24
	word32 a6_25
	word32 d3_27
	branch fn00001D80(a5, dwArg04, out d3_27, out d4_23, out a2_19, out a5_24, out a6_25) == 0<32> l00001D58
l00001D58:
	branch __btst(Mem16[a2_19 + 14<i32>:byte], 6<16>) l00001D78
l00001D78:
	word32 a2_42 = Mem16[a7_26 + 4<i32>:word32]
	word32 a6_44 = Mem16[a6_25:word32]
	d3Out = d3_27
	d4Out = d4_23
	d5Out = <invalid>
	d6Out = <invalid>
	d7Out = <invalid>
	a2Out = a2_42
	a5Out = a5_24
	a6Out = a6_44
	return 0<i32>
l00001D60:
	Mem48[a7_26:word32] = Mem16[a2_19 + 16<i32>:word32]
	word32 a7_50
	word32 a6_51
	word32 d0_53
	word32 a5_55
	word32 d4_57
	word32 d3_58
	call a5_24 + 138<i32> (retsize: 4;)
		uses: a2:a2_19,a5:a5_24,a6:a6_25,Stack +0008:dwArg04
		defs: a5:a5_55,a6:a6_51,a7:a7_50,d0:d0_53,d3:d3_58,d4:d4_57
	word32 a2_70 = Mem48[a7_50 + 4<i32>:word32]
	word32 a6_72 = Mem48[a6_51:word32]
	d3Out = d3_58
	d4Out = d4_57
	d5Out = <invalid>
	d6Out = <invalid>
	d7Out = <invalid>
	a2Out = a2_70
	a5Out = a5_55
	a6Out = a6_72
	return (int32) (d0_53 != 0<32> ? 0xFF<8> : 0<8>)
l00001D50:
	word32 a2_77 = Mem16[a7_26 + 4<i32>:word32]
	word32 a6_79 = Mem16[a6_25:word32]
	d3Out = d3_27
	d4Out = d4_23
	d5Out = <invalid>
	d6Out = <invalid>
	d7Out = <invalid>
	a2Out = a2_77
	a5Out = a5_24
	a6Out = a6_79
	return -1<i32>
l00001D32:
	word32 a6_86
	word32 a5_90
	word32 d4_92
	word32 d3_93
	word32 d0_88 = fn00001E04(a5, 0<i32>, out d3_93, out d4_92, out a5_90, out a6_86)
	word32 a6_99 = Mem83[a6_86:word32]
	d3Out = d3_93
	d4Out = d4_92
	d5Out = <invalid>
	d6Out = <invalid>
	d7Out = <invalid>
	a2Out = a2
	a5Out = a5_90
	a6Out = a6_99
	return d0_88
fn00001D24_exit:


word32 fn00001D80(word32 a5, word32 dwArg04, ptr32 & d3Out, ptr32 & d4Out, ptr32 & a2Out, ptr32 & a5Out, ptr32 & a6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00001680
//      fn00001D24
//      fn00002068
// MayUse:  a5:[0..31] Stack +0004:[0..31]
// LiveOut: a2 a5 a6 a7 d0 d3 d4
// Trashed: CVZNX a2 a5 a6 a7 d0 d1 d2 d3 d4
// Preserved:
fn00001D80_entry:
l00001D80:
	word32 d1_19 = Mem16[dwArg04 + 12<i32>:word32]
	word32 a6_49 = fp - 4<32>
	word32 a7_14 = fp - 0x10<32>
	word32 d3_17 = 0<i32>
	word32 a2_18 = dwArg04
	branch (d1_19 & 3<i32>) != 2<i32> l00001DE0
l00001D9E:
	branch (SLICE(d1_19, word16, 0) & 0x108<16>) == 0<16> l00001DE0
l00001DA4:
	word32 d0_34 = Mem16[dwArg04 + 8<i32>:word32]
	word32 d4_36 = Mem16[dwArg04:word32] - d0_34
	branch d4_36 <= 0<32> l00001DE0
l00001DAE:
	word32 a7_48
	word32 d4_51
	word32 d0_54
	call a5 + 146<i32> (retsize: 4;)
		uses: a2:dwArg04,a5:a5,a6:fp - 4<32>,d3:0<i32>,d4:d4_36,Stack +0004:Mem42[dwArg04 + 16<i32>:word32],Stack +0008:d0_34,Stack +000C:d4_36,Stack +0024:dwArg04
		defs: a2:a2_50,a5:a5_56,a6:a6_49,a7:a7_48,d0:d0_54,d3:d3_52,d4:d4_51
	a7_14 = a7_48 + 12<i32>
	branch d0_54 - d4_51 != 0<32> l00001DD8
l00001DD8:
	__bset(Mem45[a2_18 + 15<i32>:byte], 5<16>, out Mem45[a2_18 + 15<i32>:byte])
	d3_17 = -1<i32>
l00001DC2:
	word32 d0_65 = Mem45[a2_18 + 12<i32>:word32]
	branch __btst(SLICE(d0_65, byte, 0), 7<16>) l00001DE0
l00001DCC:
	word32 d0_68
	__bclr(d0_65, 1<32>, out d0_68)
	Mem70[a2_18 + 12<i32>:word32] = d0_68
l00001DE0:
	Mem75[a2_18:word32] = Mem73[a2_18 + 8<i32>:word32]
	Mem77[a2_18 + 4<i32>:word32] = 0<i32>
	word32 a7_83 = a7_14 + 4<i32>
	word32 d4_84 = Mem77[a7_83:word32]
	word32 a2_86 = Mem77[a7_83 + 4<i32>:word32]
	word32 a6_89 = Mem77[a6_49:word32]
	d3Out = Mem77[a7_14:word32]
	d4Out = d4_84
	a2Out = a2_86
	a5Out = a5
	a6Out = a6_89
	return d3_17
fn00001D80_exit:


void fn00001DF4(word32 a5)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5:[0..31]
// LiveOut:
// Trashed: CVZNX a2 a5 a6 a7 d0 d2 d3 d4 d5 d6 d7
// Preserved:
fn00001DF4_entry:
l00001DF4:
	word32 a6_15
	word32 d3_33
	word32 d4_34
	word32 a5_35
	fn00001E04(a5, 1<i32>, out d3_33, out d4_34, out a5_35, out a6_15)
	return
fn00001DF4_exit:


word32 fn00001E04(word32 a5, word32 dwArg04, ptr32 & d3Out, ptr32 & d4Out, ptr32 & a5Out, ptr32 & a6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00001D24
//      fn00001DF4
// MayUse:  a5:[0..31] Stack +0004:[0..31]
// LiveOut: a5 a6 d0 d3 d4
// Trashed: CVZNX a2 a5 a6 a7 d0 d3 d4 d5 d6 d7
// Preserved:
fn00001E04_entry:
l00001E04:
	word32 d3_105
	word32 a6_154 = fp - 4<32>
	word32 a7_109 = fp - 0x1C<32>
	word32 d6_102 = 1<i32>
	word32 a2_100 = a5 + -2688<i32>
	word32 d4_104 = 0<i32>
	word32 d5_103 = 0<i32>
	branch a5 + -2688<i32> - Mem25[a5 + -2048<i32>:word32] >u 0<32> l00001E64
l00001E64:
	d3_105 = dwArg04
l00001E1E:
	d3_105 = dwArg04
l00001E22:
	branch d3_105 - d6_102 != 0<32> l00001E40
l00001E26:
	branch (Mem45[a2_100 + 0xC<32>:word16] & 0x83<16>) == 0<16> l00001E40
l00001E40:
	branch d3_105 != 0<32> l00001E58
l00001E44:
	branch __btst(Mem45[a2_100 + 15<i32>:word32], d6_102) l00001E58
l00001E4A:
	Mem66[a7_109 - 4<i32>:word32] = a2_100
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 a7_78 = <invalid>
	word32 d7_81
	word32 d0_87 = fn00001D24(a5, stackArg4, out d3_105, out d4_104, out d5_103, out d6_102, out d7_81, out a2_100, out a5, out a6_154)
	a7_109 = a7_78 + 4<i32>
	branch d0_87 - d7_81 != 0<32> l00001E58
l00001E56:
	d5_103 = d0_87
l00001E30:
	Mem96[a7_109 - 4<i32>:word32] = a2_100
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 a7_98 = <invalid>
	word32 stackArg4 = <invalid>
	a7_109 = a7_98 + 4<i32>
	word32 d7_101
	branch fn00001D24(a5, stackArg4, out d3_105, out d4_104, out d5_103, out d6_102, out d7_101, out a2_100, out a5, out a6_154) - d7_101 == 0<32> l00001E58
l00001E3C:
	d4_104 = d4_104 + d6_102
l00001E58:
	a2_100 = a2_100 + 32<i32>
	branch a2_100 - Mem118[a5 + -2048<i32>:word32] <=u 0<32> l00001E22
l00001E62:
l00001E68:
	branch d3_105 == 1<i32> l00001E70
l00001E6E:
	d4_104 = d5_103
l00001E70:
	word32 d4_144 = Mem141[a7_109 + 4<i32>:word32]
	word32 a6_157 = Mem141[a6_154:word32]
	d3Out = Mem141[a7_109:word32]
	d4Out = d4_144
	a5Out = a5
	a6Out = a6_157
	return d4_104
fn00001E04_exit:


word32 fn00001E94(word32 a5, word32 dwArg08, ptr32 & d3Out, ptr32 & d4Out, ptr32 & d5Out, ptr32 & a5Out, ptr32 & a6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00001C40
// MayUse:  a5:[0..31] Stack +0008:[0..31]
// LiveOut: a5 a6 d0 d3 d4 d5
// Trashed: CVZNX a0 a2 a3 a5 a6 a7 d0 d1 d2 d3 d4 d5
// Preserved:
fn00001E94_entry:
l00001E94:
	word32 d0_26 = Mem22[dwArg08 + 12<i32>:word32]
	word32 a6_113 = fp - 4<32>
	word32 a7_125 = fp - 0x1C<32>
	word32 a3_114 = dwArg08
	word32 d3_118 = Mem22[dwArg08 + 16<i32>:word32]
	word32 a2_115 = dwArg08 + 12<i32>
	branch (SLICE(d0_26, word16, 0) & 0x82<16>) == 0<16> l00001F5C
l00001EB4:
	branch __btst(SLICE(d0_26, byte, 0), 6<16>) l00001F5C
l00001EBC:
	branch __btst(SLICE(d0_26, byte, 0), 0<16>) l00001EDA
l00001EC2:
	Mem38[dwArg08 + 4<i32>:word32] = 0<i32>
	d0_26 = Mem38[dwArg08 + 12<i32>:word32]
	branch __btst(SLICE(d0_26, byte, 0), 4<16>) l00001F5C
l00001F5C:
	word32 d0_43
	__bset(d0_26, 5<16>, out d0_43)
	Mem46[dwArg08 + 12<i32>:word32] = d0_43
	d3Out = d3
	d4Out = d4
	d5Out = d5
	a5Out = a5
	a6Out = a6
	return -1<i32>
l00001ED2:
	Mem64[dwArg08:word32] = Mem38[dwArg08 + 8<i32>:word32]
	__bclr(Mem64[dwArg08 + 15<i32>:byte], 0<8>, out Mem64[dwArg08 + 15<i32>:byte])
l00001EDA:
	word32 d0_70
	__bset(Mem68[dwArg08 + 12<i32>:word32], 1<16>, out d0_70)
	Mem72[dwArg08 + 12<i32>:word32] = d0_70
	word32 d0_73
	__bclr(d0_70, 4<32>, out d0_73)
	Mem75[dwArg08 + 12<i32>:word32] = d0_73
	Mem78[dwArg08 + 4<i32>:word32] = 0<i32>
	word32 d4_117 = 0<i32>
	branch (Mem78[dwArg08 + 0xC<32>:word16] & 0x10C<16>) != 0<16> l00001F1C
l00001EF8:
	branch dwArg08 - (a5 + -2656<i32>) == 0<32> l00001F08
l00001F00:
	branch dwArg08 - (a5 + -2624<i32>) != 0<32> l00001F14
l00001F08:
	word32 a7_112
	word32 d0_119
	word32 a0_121
	word32 d2_123
	call a5 + 130<i32> (retsize: 4;)
		uses: a0:a0_121,a2:dwArg08 + 12<i32>,a3:dwArg08,a5:a5,a6:fp - 4<32>,d2:d2_123,d3:d3_24,d4:0<i32>,d5:0<i32>,Stack +0004:d3_24,Stack +002C:dwArg08
		defs: a0:a0_121,a2:a2_115,a3:a3_114,a5:a5_122,a6:a6_113,a7:a7_112,d0:d0_119,d2:d2_123,d3:d3_118,d4:d4_117
	a7_125 = a7_112 + 4<i32>
	branch d0_119 != 0<32> l00001F1C
l00001F14:
	word32 a7_131 = a7_125 - 4<i32>
	Mem133[a7_131:word32] = a3_114
	word32 a7_142 = <invalid>
	a2_115 = fn00002014(a2_115, a5, a6_113, Mem133[a7_131:word32], out a5, out a6_113)
	a7_125 = a7_142 + 4<i32>
l00001F1C:
	word32 d5_183
	branch (Mem152[a2_115:word16] & 0x108<16>) == 0<16> l00001F94
l00001F94:
	Mem164[a6_113 + -1<i32>:byte] = Mem152[a6_113 + 11<i32>:byte]
	word32 a7_166 = a7_125 - 4<i32>
	Mem167[a7_166:word32] = 1<i32>
	Mem169[a7_166 - 4<i32>:word32] = a6_113 + -1<i32>
	Mem173[a7_166 - 8<i32>:word32] = d3_118
	word32 a7_179
	word32 d0_186
	word32 a0_188
	word32 d2_190
	call a5 + 146<i32> (retsize: 4;)
		uses: a0:a0_188,a2:a2_151,a3:a3_176,a5:a5_175,a6:a6_162,d2:d2_190,d3:d3_171,d4:d4_177,d5:1<i32>,Stack +000C:dwArg08
		defs: a0:a0_188,a2:a2_182,a5:a5_189,a6:a6_180,a7:a7_179,d0:d0_186,d2:d2_190,d5:d5_183
	a7_125 = a7_179 + 12<i32>
	d4_117 = d0_186
l00001F24:
	word32 d0_195 = Mem152[a3_114 + 8<i32>:word32]
	d5_183 = Mem152[a3_114:word32] - d0_195
	Mem200[a3_114:word32] = d0_195 + 1<i32>
	Mem204[a3_114 + 4<i32>:word32] = Mem200[a3_114 + 24<i32>:word32] - 1<32>
	branch d5_183 <= 0<32> l00001F6C
l00001F6C:
	branch __btst(Mem204[a5 + -1704<i32> + d3_118:byte], 5<16>) l00001F8A
l00001F78:
	word32 a7_212 = a7_125 - 4<i32>
	Mem213[a7_212:word32] = 2<i32>
	Mem216[a7_212 - 4<i32>:word32] = 0<i32>
	Mem218[a7_212 - 8<i32>:word32] = d3_118
	word32 a7_220
	word32 a0_229
	call a5 + 154<i32> (retsize: 4;)
		uses: a0:a0_229,a2:a2_151,a3:a3_176,a5:a5_175,a6:a6_162,d1:0<i32>,d2:2<i32>,d3:d3_171,d4:d4_177,d5:d5_197,Stack +000C:dwArg08
		defs: a0:a0_229,a2:a2_223,a3:a3_222,a5:a5_230,a6:a6_221,a7:a7_220,d4:d4_225,d5:d5_224
	a7_125 = a7_220 + 12<i32>
l00001F8A:
	Mem239[Mem235[a3_114 + 8<i32>:word32]:byte] = Mem235[a6_113 + 11<i32>:byte]
l00001F40:
	word32 a7_241 = a7_125 - 4<i32>
	Mem242[a7_241:word32] = d5_183
	Mem245[a7_241 - 4<i32>:word32] = Mem242[a3_114 + 8<i32>:word32]
	Mem247[a7_241 - 8<i32>:word32] = d3_118
	word32 a7_249
	word32 a3_251
	word32 d0_256
	word32 d2_260
	call a5 + 146<i32> (retsize: 4;)
		uses: a0:a0_264,a2:a2_151,a3:a3_176,a5:a5_175,a6:a6_162,d2:d2_260,d3:d3_171,d4:d4_177,d5:d5_197,Stack +000C:dwArg08
		defs: a2:a2_252,a3:a3_251,a5:a5_259,a6:a6_250,a7:a7_249,d0:d0_256,d2:d2_260,d5:d5_253
	word32 a0_264 = Mem247[a3_251 + 8<i32>:word32]
	Mem266[a0_264:byte] = Mem247[a6_113 + 11<i32>:byte]
	a7_125 = a7_249 + 12<i32>
	d4_117 = d0_256
l00001FAE:
	branch d4_117 - d5_183 == 0<32> l00001FC4
l00001FC4:
	word32 a7_285 = a7_125 + 4<i32>
	word32 d0_278 = Mem276[a6_113 + 8<i32>:word32] & 0xFF<32>
	word32 d4_286 = Mem276[a7_285:word32]
	word32 d5_288 = Mem276[a7_285 + 4<i32>:word32]
	word32 a6_294 = Mem276[a6_113:word32]
	d3Out = Mem276[a7_125:word32]
	d4Out = d4_286
	d5Out = d5_288
	a5Out = a5
	a6Out = a6_294
	return d0_278
l00001FB2:
	__bset(Mem276[a2_115 + 3<i32>:byte], 5<16>, out Mem276[a2_115 + 3<i32>:byte])
	word32 a7_302 = a7_125 + 4<i32>
	word32 d4_303 = Mem276[a7_302:word32]
	word32 d5_305 = Mem276[a7_302 + 4<i32>:word32]
	word32 a6_311 = Mem276[a6_113:word32]
	d3Out = Mem276[a7_125:word32]
	d4Out = d4_303
	d5Out = d5_305
	a5Out = a5
	a6Out = a6_311
	return -1<i32>
fn00001E94_exit:


void fn00001FD8(word32 a5)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a2 a5 a6 a7 d0 d1 d2 d3 d4 d5 d6
// Preserved:
fn00001FD8_entry:
l00001FD8:
	word32 a7_17 = fp - 0x14<32>
	word32 d3_22 = 0<i32>
	word32 d4_25 = a5 + -2592<i32>
	branch a5 + -2592<i32> - Mem19[a5 + -2048<i32>:word32] >u 0<32> l00002008
l00001FF2:
	word32 a7_30 = a7_17 - 4<i32>
	Mem32[a7_30:word32] = d4_25
	word32 a7_42 = <invalid>
	a7_17 = a7_42 + 4<i32>
	word32 d4_44
	word32 a6_112
	branch fn00002068(d3_22, a5, Mem32[a7_30:word32], out d3_22, out d4_44, out a5, out a6_112) == -1<i32> l00002000
l00001FFE:
	d3_22 = d3_22 + 1<32>
l00002000:
	d4_25 = d4_44 + 32<i32>
	branch d4_44 + 32<i32> - Mem32[a5 + -2048<i32>:word32] <=u 0<32> l00001FF2
l00002008:
	return
fn00001FD8_exit:


word32 fn00002014(word32 a2, word32 a5, word32 a6, word32 dwArg04, ptr32 & a5Out, ptr32 & a6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00001E94
// MayUse:  a2:[0..31] a5:[0..31] a6:[0..31] Stack +0004:[0..31]
// LiveOut: a2 a5 a6 a7
// Trashed: CVZNX a0 a2 a5 a6 a7 d0 d2
// Preserved:
fn00002014_entry:
l00002014:
	Mem13[a5 + -1368<i32>:word32] = Mem10[a5 + -1368<i32>:word32] + 1<32>
	word32 a7_18
	word32 a6_19
	word32 a2_20
	word32 a5_21
	word32 d0_22
	call a5 + 114<i32> (retsize: 4;)
		uses: a2:dwArg04,a5:a5,a6:fp - 4<32>,Stack +0004:0x00000200<p32>,Stack +0008:a2,Stack +000C:a6,Stack +0014:dwArg04
		defs: a2:a2_20,a5:a5_21,a6:a6_19,a7:a7_18,d0:d0_22
	Mem27[a2_20 + 8<i32>:word32] = d0_22
	branch d0_22 == 0<32> l00002044
l00002044:
	__bset(Mem27[a2_20 + 15<i32>:byte], 2<16>, out Mem27[a2_20 + 15<i32>:byte])
	Mem32[a2_20 + 8<i32>:word32] = a2_20 + 20<i32>
	Mem34[a2_20 + 24<i32>:word32] = 1<i32>
l00002032:
	__bset(Mem27[a2_20 + 15<i32>:byte], 3<16>, out Mem27[a2_20 + 15<i32>:byte])
	Mem37[a2_20 + 24<i32>:word32] = 0x200<32>
l00002058:
	Mem42[a2_20:word32] = Mem40[a2_20 + 8<i32>:word32]
	Mem44[a2_20 + 4<i32>:word32] = 0<i32>
	word32 a2_48 = Mem44[a7_18 + 4<i32>:word32]
	word32 a6_51 = Mem44[a6_19:word32]
	a5Out = a5_21
	a6Out = a6_51
	return a2_48
fn00002014_exit:


word32 fn00002068(word32 d3, word32 a5, word32 dwArg04, ptr32 & d3Out, ptr32 & d4Out, ptr32 & a5Out, ptr32 & a6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00001FD8
// MayUse:  a5:[0..31] d3:[0..31] Stack +0004:[0..31]
// LiveOut: a5 a6 a7 d0 d3 d4
// Trashed: CVZNX a2 a5 a6 a7 d0 d1 d2 d3 d4
// Preserved:
fn00002068_entry:
l00002068:
	word32 d0_16 = Mem13[dwArg04 + 12<i32>:word32]
	word32 a6_115 = fp - 4<32>
	word32 a7_11 = fp - 0xC<32>
	word32 d3_116 = -1<i32>
	word32 a2_117 = dwArg04
	branch __btst(SLICE(d0_16, byte, 0), 6<16>) l00002090
l00002090:
	branch (SLICE(d0_16, word16, 0) & 0x83<16>) == 0<16> l000020E0
l00002096:
	word32 a2_30
	word32 a5_35
	word32 d3_200
	word32 d4_201
	word32 a6_202
	word32 d0_31 = fn00001D80(a5, dwArg04, out d3_200, out d4_201, out a2_30, out a5_35, out a6_202)
	word32 a7_37 = <invalid>
	Mem47[a7_37:word32] = a2_30
	word32 a5_52
	word32 a6_53
	word32 a2_51 = fn000020F0(a5_35, Mem47[a7_37:word32], out a5_52, out a6_53)
	word32 a7_54 = <invalid>
	Mem63[a7_54:word32] = Mem47[a2_51 + 16<i32>:word32]
	word32 a7_65
	word32 d0_69
	word32 d2_71
	word32 d1_72
	call a5_52 + 162<i32> (retsize: 4;)
		uses: a2:a2_51,a5:a5_52,a6:a6_53,d1:d1_72,d2:d2_71,d3:d0_31,d4:d4_73,Stack +0008:dwArg04
		defs: a2:a2_68,a5:a5_70,a6:a6_66,a7:a7_65,d0:d0_69,d1:d1_72,d2:d2_71,d3:d3_67,d4:d4_73
	a7_11 = a7_65 + 4<i32>
	branch d0_69 >= 0<32> l000020BC
l000020BC:
	word32 d0_81 = Mem63[a2_117 + 28<i32>:word32]
	branch d0_81 == 0<32> l000020E0
l000020C2:
	Mem85[a7_65:word32] = d0_81
	word32 a7_87
	word32 a6_88
	word32 a2_90
	word32 d0_91
	word32 a5_92
	word32 d2_93
	word32 d1_94
	word32 d4_95
	word32 d3_102
	call a5 + 178<i32> (retsize: 4;)
		uses: a2:a2_68,a5:a5_70,a6:a6_66,d1:d1_94,d2:d2_93,d3:d3_67,d4:d4_95,Stack +0008:dwArg04
		defs: a2:a2_90,a5:a5_92,a6:a6_88,a7:a7_87,d0:d0_91,d1:d1_94,d2:d2_93,d3:d3_89,d4:d4_95
	branch d0_91 == 0<32> l000020D0
l000020CE:
	d3_102 = -1<i32>
l000020D0:
	Mem109[a7_87:word32] = Mem85[a2_90 + 28<i32>:word32]
	word32 a7_114
	word32 d1_121
	call a5_92 + 122<i32> (retsize: 4;)
		uses: a2:a2_90,a5:a5_92,a6:a6_88,d1:d1_121,d2:0<i32>,d3:d3_113,d4:d4_122,Stack +0008:dwArg04
		defs: a2:a2_117,a5:a5_119,a6:a6_115,a7:a7_114,d1:d1_121,d3:d3_116,d4:d4_122
	Mem126[a2_117 + 28<i32>:word32] = 0<i32>
	a7_11 = a7_114 + 4<i32>
l000020B6:
	d3_116 = -1<i32>
l000020E0:
	Mem132[a2_117 + 12<i32>:word32] = 0<i32>
	word32 a6_144 = Mem132[a6_115:word32]
	d3Out = Mem132[a7_11 + 4<i32>:word32]
	d4Out = d4
	a5Out = a5
	a6Out = a6_144
	return d3_116
l00002080:
	Mem147[dwArg04 + 12<i32>:word32] = 0<i32>
	d3Out = d3
	d4Out = d4
	a5Out = a5
	a6Out = a6
	return -1<i32>
fn00002068_exit:


word32 fn000020F0(word32 a5, word32 dwArg04, ptr32 & a5Out, ptr32 & a6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00002068
// MayUse:  a5:[0..31] Stack +0004:[0..31]
// LiveOut: a2 a5 a6 a7
// Trashed: CVZN a2 a5 a6 a7 d0 d1 d2
// Preserved:
fn000020F0_entry:
l000020F0:
	word32 d0_12 = Mem10[dwArg04 + 12<i32>:word32]
	word32 a6_28 = fp - 4<32>
	word32 a7_35 = fp - 8<32>
	branch (SLICE(d0_12, word16, 0) & 0x83<16>) == 0<16> l00002128
l00002106:
	branch __btst(SLICE(d0_12, byte, 0), 3<16>) l00002128
l0000210C:
	word32 a7_27
	word32 a2_29
	call a5 + 122<i32> (retsize: 4;)
		uses: a2:dwArg04,a5:a5,a6:fp - 4<32>,d2:0<i32>,Stack +0004:Mem10[dwArg04 + 8<i32>:word32],Stack +0014:dwArg04
		defs: a2:a2_29,a5:a5_32,a6:a6_28,a7:a7_27
	__bclr(Mem24[a2_29 + 15<i32>:byte], 3<8>, out Mem24[a2_29 + 15<i32>:byte])
	Mem38[a2_29:word32] = 0<i32>
	Mem39[a2_29 + 8<i32>:word32] = 0<i32>
	Mem40[a2_29 + 4<i32>:word32] = 0<i32>
	a7_35 = a7_27 + 4<i32>
l00002128:
	word32 a2_45 = Mem43[a7_35:word32]
	word32 a6_48 = Mem43[a6_28:word32]
	a5Out = a5
	a6Out = a6_48
	return a2_45
fn000020F0_exit:


