void fn00001000(word32 d0, word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] d0:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d4 d5
// Preserved: a7 d7
fn00001000_entry:
l00001000:
l0000100A:
	word32 a6_9 = Mem0[0x00000004<p32>:word32]
	word32 d2_194 = d0
	word32 a2_271 = a0
	branch Mem0[a6_9 + 20<i32>:word16] >=u 0x24<16> l00001036
l00001020:
	word32 a0_13 = 0x00002B88<p32>
	word32 d0_16 = 0xC<u32>
l00001030:
	Mem19[a0_13:word32] = 0<32>
	a0_13 = a0_13 + 4<i32>
	d0_16 = d0_16 - 1<32>
	branch d0_16 != 0<32> l00001030
l00001036:
	Mem29[0x00002B88<p32>:word32] = fp
	Mem32[0x00002B8C<p32>:word32] = a6_9
	word32 d0_34 = FindTask(0<32>)
	word32 d0_109 = OpenLibrary(0x000012BC<p32>, 0<i32>)
	branch d0_109 == 0<32> l00001226
l00001226:
	Alert(0x38007<32>)
l00001056:
	word32 d4_71
	Mem64[0x00002B90<p32>:word32] = d0_109
	branch Mem64[d0_34 + 172<i32>:word32] != 0<32> l00001066
l00001066:
	word32 a0_70 = a0
	d4_71 = 3<i32>
l0000106A:
	branch Mem64[a0_677:byte] != 0x20<8> l00001072
l00001070:
	d4_71 = SEQ(SLICE(d4_71, word16, 16), SLICE(d4_71, word16, 0) + 1<16>)
l00001072:
	a0_70 = a0_677 + 1<i32>
	a0_677 = a0_70
	branch Mem64[a0_677:byte] != 0<8> l0000106A
l00001060:
	d4_71 = 2<i32>
	d2_194 = 8<i32>
l00001076:
	word32 d0_97 = d4_71 << 2<32>
	word32 d0_104 = d0_97 + d2_194
	word32 d1_108 = 0x10001<32>
	d0_109 = AllocMem(d0_104 + 0x11<32>, 0x10001<32>)
	branch d0_109 == 0<32> l0000123E
l0000123E:
	CloseLibrary(Mem64[0x00002B90<p32>:word32])
	Alert(0x10000<32>)
l0000125C:
	branch Mem150[d0_34 + 172<i32>:word32] != 0<32> l00001268
l00001262:
	fn00001214(d0_34)
	fn0000126C(d0_109)
l00001268:
	return
l00001096:
	word32 dwLoc0C_534
	word32 a0_423
	Mem164[d0_109:word32] = d0_104 + 0x11<32>
	Mem167[d0_109 + 12<i32>:word32] = d4_71 - 1<32>
	Mem170[d0_109 + 8<i32>:word32] = d0_109 + 16<i32> + d0_97
	Mem172[0<32>:word32] = 0<32>
	word32 d0_173 = Mem172[d0_34 + 172<i32>:word32]
	branch d0_173 == 0<32> l00001190
l00001190:
	fn00001214(d0_34)
	Mem178[0x00002B94<p32>:word32] = d0_173
	Mem179[0x00002B98<p32>:word32] = d0_173
	Mem183[0<32>:word32] = 0<32>
	dwLoc0C_534 = d0_173
	word32 d0_186 = Mem183[d0_173 + 36<i32>:word32]
	branch d0_186 == 0<32> l000011B6
l000011AE:
	Enable()
l000011B6:
	Supervisor(d0_109)
	Mem197[d0_109 + 4<i32>:word32] = d0_186
	d2_194 = 0x3ED<32>
	branch d0_186 != 0<32> l000011D2
l000011D2:
	Mem201[0x00002B9C<p32>:word32] = d0_186
	Mem202[0x00002BA0<p32>:word32] = d0_186
	Mem203[0x00002BA4<p32>:word32] = d0_186
	Mem205[d0_34 + 156<i32>:word32] = d0_186
	Mem206[d0_34 + 160<i32>:word32] = d0_186
	word32 d0_210 = Mem206[(d0_186 << 2<32>) + 8<i32>:word32]
	branch d0_210 == 0<32> l000011F4
l000011F0:
	Mem213[d0_34 + 164<i32>:word32] = d0_210
l000011F4:
l000011CC:
l000011CE_thunk_fn0000127C:
	fn0000127C()
	return
l000010B6:
	word32 d0_234 = Mem172[(d0_173 << 2<32>) + 16<i32>:word32]
	word32 a1_237 = Mem172[d0_109 + 8<i32>:word32]
	word32 a0_242 = (d0_234 << 2<32>) + 1<i32>
	word32 d0_244 = (uint32) (uint8) Mem172[d0_234 << 2<32>:byte]
	Mem245[a0_242 + d0_244:byte] = 0<8>
	Mem246[d0_109 + 16<i32>:word32] = a0_242
	word32 a6_247 = d0_109 + 20<i32>
	word32 d3_248 = 1<i32>
	word32 a0_253 = a0 + d2_194
l000010DA:
	a0_253 = a0_253 - 1<i32>
	branch Mem246[a0_253:byte] >u 0x20<8> l000010E2
l000010DE_1:
	word16 v29_261 = SLICE(d2_194, word16, 0)
	d2_194 = SEQ(SLICE(d2_194, word16, 16), v29_261 - 1<i16>)
	branch v29_261 != 0<16> l000010DA
l000010E2:
	Mem266[a0_253 + 1<i32>:byte] = 0<8>
l000010E6:
	byte v31_273 = Mem272[a2_271:byte]
	a2_271 = a2_271 + 1<i32>
	d1_108 = SEQ(SLICE(d1_108, word24, 8), v31_273)
	branch v31_273 == 0<8> l00001148
l000010EA:
	branch v31_273 == 0x20<8> l000010E6
l000010F0:
	branch v31_273 == 9<8> l000010E6
l000010F6:
	branch d3_248 - Mem272[d0_109 + 12<i32>:word32] == 0<32> l00001148
l000010FC:
	Mem293[a6_247:word32] = a1_237
	a6_247 = a6_247 + 4<i32>
	d3_248 = SEQ(SLICE(d3_248, word16, 16), SLICE(d3_248, word16, 0) + 1<16>)
	branch v31_273 == 0x22<8> l0000111A
l0000111A:
	byte v50_304 = Mem303[a2_271:byte]
	word24 v51_307 = SLICE(d1_108, word24, 8)
	a2_271 = a2_271 + 1<i32>
	d1_108 = SEQ(v51_307, v50_304)
	branch v50_304 == 0<8> l00001148
l0000111E:
	branch v50_304 == 0x22<8> l00001116
l00001124:
	branch v50_304 != 0x2A<8> l00001144
l0000112A:
	byte v54_317 = Mem303[a2_271:byte]
	a2_271 = a2_271 + 1<i32>
	d1_108 = SEQ(v51_307, v54_317)
	d2_194 = SEQ(SLICE(d2_194, word24, 8), v54_317 & 0xDF<8>)
	branch (v54_317 & 0xDF<8>) != 0x4E<8> l0000113C
l0000113C:
	branch (v54_317 & 0xDF<8>) != 0x45<8> l00001144
l00001142:
	d1_108 = 27<i32>
l00001138:
	d1_108 = 10<i32>
l00001144:
	Mem342[a1_237:byte] = SLICE(d1_108, byte, 0)
	a1_237 = a1_237 + 1<i32>
l00001106:
	Mem346[a1_237:byte] = v31_273
	a1_237 = a1_237 + 1<i32>
l00001108:
	byte v40_351 = Mem350[a2_271:byte]
	a2_271 = a2_271 + 1<i32>
	d1_108 = SEQ(SLICE(d1_108, word24, 8), v40_351)
	branch v40_351 == 0<8> l00001148
l00001148:
	Mem360[a1_237:byte] = 0<8>
	Mem365[a6_247:word32] = 0<32>
	execPrivate4()
	Mem394[0x00002B9C<p32>:word32] = d0_244
	execPrivate5()
	Mem395[0x00002BA0<p32>:word32] = d0_244
	dwLoc0C_534 = d0_109 + 16<i32>
	dwLoc10 = d3_248
	branch Mem395[Mem395[0x00002B8C<p32>:word32] + 20<i32>:word16] <u 0x24<16> l0000117A
l00001172:
	word32 v64_405 = Mem395[d0_34 + 224<i32>:word32]
	Mem406[0x00002BA4<p32>:word32] = v64_405
	branch v64_405 != 0<32> l0000117E
l0000117A:
	Mem411[0x00002BA4<p32>:word32] = d0_244
l0000117E:
	branch Mem415[d0_34 + 8<i32>:byte] != 0xD<8> l000011F8
l000011F8:
	a0_423 = Mem421[d0_34 + 58<i32>:word32]
l00001186:
	word32 a0_426 = Mem415[d0_34 + 176<i32>:word32]
	a0_423 = a0_426 + 4<i32> - Mem415[a0_426:word32]
l00001202:
	Mem436[0x00002BB0<p32>:word32] = a0_423
	Mem443[0x00002BB4<p32>:word32] = fp - 16<i32>
	fn00001354(d2_194, dwLoc10, dwLoc0C_534)
l00001212_thunk_fn0000127C:
	fn0000127C()
	return
fn00001000_exit:
l0000110C:
	branch v40_351 == 0x20<8> l00001116
l00001116:
	Mem483[a1_237:byte] = 0<8>
	a1_237 = a1_237 + 1<i32>
l00001112:
	Mem490[a1_237:byte] = v40_351
	a1_237 = a1_237 + 1<i32>


void fn00001214(word32 a3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00001000
// MayUse:  a3:[0..31]
// LiveOut:
// Trashed: a0
// Preserved: a7
fn00001214_entry:
l00001214:
	WaitPort(a3 + 92<i32>)
	GetMsg(a3 + 92<i32>)
	return
fn00001214_exit:


void fn0000126C(word32 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00001000
// MayUse:  a2:[0..31]
// LiveOut:
// Trashed: a1
// Preserved: a7
fn0000126C_entry:
l0000126C:
	Forbid()
	ReplyMsg(a2)
	return
fn0000126C_exit:


word32 fn00001278(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000012D0
// MayUse:  Stack +0004:[0..31]
// LiveOut: a5
// Trashed: CVZN a1 a2 a4 a5 a6 d0 d1 d2
// Preserved: a7
fn00001278_entry:
l00001278:
l00001278_thunk_fn0000127C:
	return fn0000127C()
fn00001278_exit:


word32 fn0000127C()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00001000
//      fn00001278
// MayUse: 
// LiveOut: a5
// Trashed: CVZN a1 a2 a4 a5 a6 a7 d0 d1
// Preserved:
fn0000127C_entry:
l0000127C:
	word32 a7_6 = Mem0[0x00002B88<p32>:word32]
	word32 v7_11 = Mem0[a7_6 - 4<i32>:word32]
	word32 v5_8 = Mem0[a7_6 - 8<i32>:word32]
	branch Mem0[v7_11 + 4<i32>:word32] == 0<32> l0000129E
l00001296:
	execPrivate1()
l0000129E:
	CloseLibrary(Mem0[0x00002B90<p32>:word32])
	branch v5_8 == 0<32> l000012B0
l000012AE:
	fn0000126C(v5_8)
l000012B0:
	FreeMem(v7_11, Mem0[v7_11:word32])
	return v7_11
fn0000127C_exit:


word32 fn000012D0(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0000131C
// MayUse:  Stack +0004:[0..31]
// LiveOut: a5
// Trashed: CVZNX a1 a4 a5 a6 d0 d1
// Preserved: a2 a3 a7 d2
fn000012D0_entry:
l000012D0:
	branch 0x2CD0<32> == 0<32> l00001308
l000012E2:
	word32 d2_16 = 1<i32>
	branch Mem11[0x00002CD4<p32>:word32] == 0<32> l000012F6
l000012EA:
	d2_16 = d2_16 + 1<32>
	branch Mem11[0x00002CD0<p32> + (d2_16 << 2<32>):word32] != 0<32> l000012EA
l000012F6:
	word32 d2_33 = d2_16 - 1<32>
	branch d2_33 == 0<32> l00001308
l000012FA:
	word32 d0_38 = d2_33 << 2<32>
	call Mem11[0x00002CD0<p32> + d0_38:word32] (retsize: 4;)
		uses: d0:d0_38,Stack +0014:dwArg04
	d2_33 = d2_33 - 1<32>
	branch d2_33 != 0<32> l000012FA
l00001308:
	return fn00001278(dwArg04)
fn000012D0_exit:


word32 fn0000131C(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00001354
//      fn000023C8
// MayUse:  Stack +0004:[0..31]
// LiveOut: a5
// Trashed: CVZN a1 a4 a5 a6 d0 d1
// Preserved: X a2 a3 a7
fn0000131C_entry:
l0000131C:
	branch Mem8[0x00002BB8<p32>:word32] != 0<32> l0000134E
l00001328:
	word32 a3_13 = Mem8[0x00002CE0<p32>:word32]
	Mem15[0x00002BB8<p32>:word32] = 1<i32>
	branch a3_13 == 0<32> l00001346
l0000133A:
	call Mem15[a3_13 + 4<i32>:word32] (retsize: 4;)
		uses: d0:a3_25,Stack +0010:dwArg04
	a3_13 = Mem15[a3_13:word32]
	branch a3_13 != 0<32> l0000133A
l00001346:
	a5 = fn000012D0(dwArg04)
l0000134E:
	return a5
fn0000131C_exit:


void fn00001354(word32 d2, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00001000
// MayUse:  d2:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 a4 a5 a6 d0 d1
// Preserved: a2 a3 a7
fn00001354_entry:
l00001354:
	word32 a3_17 = 0x00002CC8<p32>
	branch 0x2CC4<32> == 0<32> l00001372
l00001366:
	branch Mem8[0x00002CC8<p32>:word32] == 0<32> l00001372
l0000136A:
	call Mem8[a3_17:word32] (retsize: 4;)
		uses: Stack +0010:dwArg04,Stack +0014:dwArg08
	a3_17 = a3_17 + 4<i32>
	branch Mem8[a3_17:word32] != 0<32> l0000136A
l00001372:
	fn0000131C(fn00001390(d2))
	return
fn00001354_exit:


word32 fn00001390(word32 d2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00001354
// MayUse:  d2:[1..31]
// LiveOut: d0
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7 d2 d3 d4 d5
fn00001390_entry:
l00001390:
	word24 v9_17 = SLICE(d3, word24, 8)
	word32 d2_16 = SEQ(SLICE(d2, word31, 1), true)
	byte v11_19 = SLICE(SEQ(v9_17, 0x8F<8>) + d2_16, byte, 0)
	word32 d0_28 = (uint32) (uint8) SLICE(d2_16 - SEQ(v9_17, v11_19), byte, 0)
	word32 d1_32 = (uint32) (uint8) v11_19
	word32 d4_37 = __swap(d0_28) *u SLICE(d1_32, word16, 0)
	byte v32_48 = SLICE(d0_28 *u SLICE(d1_32, word16, 0) + SEQ(SLICE(__swap(SEQ(SLICE(d4_37, word16, 16), SLICE(d4_37 + __swap(d1_32) *u SLICE(d0_28, word16, 0), word16, 0))), word16, 16), 0<16>), byte, 0)
	word32 d2_50 = SEQ(SLICE(d2_16, word24, 8), v32_48)
	fn00002A88(d2_50, (uint32) (uint8) SLICE(fn00002AC8(d2_50, (uint32) (uint8) v11_19, (uint32) (uint8) v32_48), byte, 0), (uint32) (uint8) v32_48)
	return fn0000143C((uint32) (uint8) SLICE((uint32) (uint8) v32_48 << 5<32>, byte, 0), 0x0000142C<p32>)
fn00001390_exit:


word32 fn0000143C(word32 d0, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00001390
// MayUse:  d0:[0..31] Stack +0004:[0..31]
// LiveOut: d0
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7
fn0000143C_entry:
l0000143C:
	return fn00001458(d0, Mem8[0x00002CE8<p32>:word32], dwArg04, fp + 8<i32>)
fn0000143C_exit:


word32 fn00001458(word32 d0, word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0000143C
// MayUse:  d0:[0..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: d0
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a3 a4 a5 a6 a7 d2 d3 d4 d5 d6 d7
fn00001458_entry:
l00001458:
	word32 d0_1870
	word32 a7_1886 = fp + -112<i32>
	word32 d3_1418 = dwArg0C
	word32 a5_1509 = dwArg04
	word32 a4_1843 = dwArg08
	word32 d6_1416 = 0<i32>
	branch Mem36[dwArg08:byte] == 0<8> l00001D9E
l00001474:
	branch Mem46[a4_1843:byte] != 0x25<8> l00001D78
l00001D78:
	word32 a7_51 = a7_1886 - 4<i32>
	Mem53[a7_51:word32] = a5_1509
	Mem62[a7_51 - 4<i32>:word32] = (int32) (int16) Mem53[a4_1843:byte]
	a4_1843 = a4_1843 + 1<i32>
	word32 a0_64
	d0 = fn00001DD8(Mem62[a7_51 - 4<i32>:word32], Mem62[a7_51:word32], out a0_64, out a5_1509)
	a7_1886 = a7_51 + 4<i32>
	branch d0 != 0xFFFFFFFF<32> l00001D96
l00001D96:
	d6_1416 = d6_1416 + 1<32>
l00001D92:
	d0_1870 = d6_1416
l0000147C:
	Mem83[a7_1886 + 64<i32>:word32] = 0<32>
	Mem85[a7_1886 + 72<i32>:word32] = 0<32>
	Mem89[a7_1886 + 102<i32>:word32] = 0<32>
	word32 d5_248 = -1<i32>
	word32 d4_367 = 105<i32>
	word32 a3_1222 = a7_1886 + 76<i32>
	word32 d7_1002 = 0<i32>
	word32 a2_131 = a4_1843 + 1<i32>
	word32 d2_126 = Mem89[a7_1886 + 72<i32>:word32]
l0000149A:
	word32 d1_100 = 0<i32>
l0000149C:
	word32 a7_97 = a7_1886 - 4<i32>
	Mem99[a7_97:word32] = d0
	d0 = Mem99[a7_97:word32]
	branch Mem99[0x00001DB0<p32> + d1_100:byte] - Mem99[a2_131:byte] != 0<8> l000014C0
l000014C0:
	d1_100 = d1_100 + 1<32>
	branch d1_100 <u 5<32> l0000149C
l000014AE:
	Mem117[a7_97:word32] = d1_100
	word32 d1_119 = 1<i32> << d1_100
	d0 = d1_119
	d1_100 = Mem117[a7_97:word32]
	d2_126 = d2_126 | d1_119
	a2_131 = a2_131 + 1<i32>
l000014CA:
	branch d1_100 <u 5<32> l0000149A
l000014D2:
	word32 a0_1384
	word32 d0_154
	Mem138[a7_1886 + 72<i32>:word32] = d2_126
	branch Mem138[a2_131:byte] != 0x2A<8> l00001510
l00001510:
	a0_1384 = 0x0000275D<p32> + (SEQ(SLICE(d0, word24, 8), Mem138[a2_131:byte]) & 0xFF<32>)
	word32 d0_153 = (uint32) (uint8) Mem138[a0_1384:byte]
	d0_154 = d0_153 & 4<32>
	branch (d0_153 & 4<32>) == 0<32> l0000157C
l0000152C:
	d2_126 = Mem138[a7_1886 + 64<i32>:word32]
l00001530:
	Mem165[a7_1886 - 4<i32>:word32] = d3_1418
	word32 d1_171 = __swap(10<i32>) *u SLICE(d2_126, word16, 0)
	word32 d0_180 = SLICE(d2_126, word16, 0) *u 10<i32> + SEQ(SLICE(__swap(SEQ(SLICE(d1_171, word16, 16), SLICE(d1_171 + __swap(d2_126) *u 0xA<16>, word16, 0))), word16, 16), 0<16>)
	a2_131 = a2_131 + 1<i32>
	a0_1384 = 0x0000275D<p32> + (SEQ(SLICE(d0_180, word24, 8), Mem165[a2_131:byte]) & 0xFF<32>)
	word32 d1_190 = (int32) (int16) Mem165[a2_131:byte]
	word32 d0_204 = (uint32) (uint8) Mem165[a0_1384:byte]
	d3_1418 = Mem165[a7_1886 - 4<i32>:word32]
	d1_100 = d1_190 - 0x30<32>
	d2_126 = d1_190 - 0x30<32> + d0_180
	d0_154 = d0_204 & 4<32>
	branch (d0_204 & 4<32>) != 0<32> l00001530
l00001578:
	Mem210[a7_1886 + 64<i32>:word32] = d2_126
l000014DC:
	d0_154 = d3_1418 + 3<32> >>u 2<32> << 2<32>
	word32 v31_225 = Mem138[d0_154:word32]
	Mem226[a7_1886 + 44<i32>:word32] = v31_225
	a2_131 = a2_131 + 1<i32>
	d3_1418 = d0_154 + 4<32>
	a0_1384 = d0_154 + 4<32>
	branch v31_225 >= 0<32> l00001508
l00001508:
	Mem230[a7_1886 + 64<i32>:word32] = Mem226[a7_1886 + 44<i32>:word32]
l000014F4:
	Mem233[a7_1886 + 72<i32>:word32] = Mem226[a7_1886 + 72<i32>:word32] | 4<32>
	d0_154 = -Mem233[a7_1886 + 44<i32>:word32]
	Mem237[a7_1886 + 64<i32>:word32] = d0_154
l0000157C:
	branch Mem240[a2_131:byte] != 0x2E<8> l00001610
l00001584:
	a2_131 = a2_131 + 1<i32>
	branch Mem240[a2_131:byte] != 0x2A<8> l000015AA
l000015AA:
	a0_1384 = 0x0000275D<p32> + (SEQ(SLICE(d0_154, word24, 8), Mem240[a2_131:byte]) & 0xFF<32>)
	word32 d0_259 = (uint32) (uint8) Mem240[a0_1384:byte]
	d5_248 = 0<i32>
	d0_154 = d0_259 & 4<32>
	branch (d0_259 & 4<32>) == 0<32> l00001610
l000015C8:
	word32 a7_267 = a7_1886 - 4<i32>
	Mem269[a7_267:word32] = d2_126
	word32 d1_275 = __swap(10<i32>) *u SLICE(d5_248, word16, 0)
	word32 d0_284 = SLICE(d5_248, word16, 0) *u 10<i32> + SEQ(SLICE(__swap(SEQ(SLICE(d1_275, word16, 16), SLICE(d1_275 + __swap(d5_248) *u 0xA<16>, word16, 0))), word16, 16), 0<16>)
	a2_131 = a2_131 + 1<i32>
	a0_1384 = 0x0000275D<p32> + (SEQ(SLICE(d0_284, word24, 8), Mem269[a2_131:byte]) & 0xFF<32>)
	word32 d1_294 = (int32) (int16) Mem269[a2_131:byte]
	word32 d0_308 = (uint32) (uint8) Mem269[a0_1384:byte]
	d2_126 = Mem269[a7_267:word32]
	d1_100 = d1_294 - 0x30<32>
	d5_248 = d1_294 - 0x30<32> + d0_284
	d0_154 = d0_308 & 4<32>
	branch (d0_308 & 4<32>) != 0<32> l000015C8
l0000158C:
	d0_154 = d3_1418 + 3<32> >>u 2<32> << 2<32>
	word32 v38_324 = Mem240[d0_154:word32]
	Mem326[a7_1886 + 44<i32>:word32] = v38_324
	a2_131 = a2_131 + 1<i32>
	d3_1418 = d0_154 + 4<32>
	a0_1384 = d0_154 + 4<32>
	branch v38_324 < 0<32> l00001610
l000015A4:
	d5_248 = Mem326[a7_1886 + 44<i32>:word32]
l00001610:
	word32 a7_1402 = a7_1886
	branch Mem332[a2_131:byte] == 0x68<8> l00001634
l00001616:
	branch Mem332[a2_131:byte] == 0x6C<8> l00001634
l0000161C:
	branch Mem332[a2_131:byte] == 0x4C<8> l00001634
l00001622:
	branch Mem332[a2_131:byte] == 0x6A<8> l00001634
l00001628:
	branch Mem332[a2_131:byte] == 0x7A<8> l00001634
l0000162E:
	branch Mem332[a2_131:byte] != 0x74<8> l0000163A
l00001634:
	a2_131 = a2_131 + 1<i32>
	d4_367 = (int32) (int16) (int8) (uint32) (uint8) Mem332[a2_131:byte]
l0000163A:
	branch d4_367 != 0x68<32> l0000164C
l00001642:
	branch Mem332[a2_131:byte] != 0x68<8> l0000164C
l00001648:
	d4_367 = 2<i32>
	a2_131 = a2_131 + 1<i32>
l0000164C:
	branch d4_367 != 0x6C<32> l0000165E
l00001654:
	branch Mem332[a2_131:byte] != 0x6C<8> l0000165E
l0000165A:
	d4_367 = 1<i32>
	a2_131 = a2_131 + 1<i32>
l0000165E:
	branch d4_367 != 0x6A<32> l00001668
l00001666:
	d4_367 = 1<i32>
l00001668:
	branch d4_367 != 0x7A<32> l00001672
l00001670:
	d4_367 = 108<i32>
l00001672:
	branch d4_367 != 0x74<32> l0000167C
l0000167A:
	d4_367 = 105<i32>
l0000167C:
	word32 d5_1417
	byte v88_419 = Mem332[a2_131:byte]
	word32 a2_1810 = a2_131 + 1<i32>
	word32 d1_1037 = SEQ(SLICE(d1_100, word24, 8), v88_419)
	word32 d0_1408 = SEQ(SLICE(d0_154, word24, 8), v88_419)
	branch v88_419 == 0x25<8> l00001B04
l00001B04:
	Mem455[a7_1886 + 102<i32>:word32] = 1<32>
	a3_1222 = 0x00001DAC<p32>
	d5_1417 = 0<i32>
l00001688:
	branch v88_419 == 0x58<8> l000016D6
l0000168E:
	branch v88_419 == 0x63<8> l00001A84
l00001A84:
	branch d4_367 != 0x6C<32> l00001AA0
l00001AA0:
	d0_1408 = d3_1418 + 3<32> >>u 2<32> << 2<32>
	Mem500[a3_1222:byte] = Mem332[d0_1408 + 3<32>:byte]
l00001A8C:
	d0_1408 = d3_1418 + 3<32> >>u 2<32> << 2<32>
	Mem511[a3_1222:byte] = Mem332[d0_1408 + 3<32>:byte]
l00001AB2:
	a0_1384 = (d3_1418 + 3<32> >>u 2<32> << 2<32>) + 4<32>
	d3_1418 = (d3_1418 + 3<32> >>u 2<32> << 2<32>) + 4<32>
	Mem514[a7_1886 + 102<i32>:word32] = 1<32>
	d5_1417 = 0<i32>
l00001696:
	branch v88_419 == 0x64<8> l000016D6
l0000169C:
	branch v88_419 == 0x69<8> l000016D6
l000016A2:
	Mem524[a7_1886 + 44<i32>:byte] = v88_419
	branch v88_419 == 0x6E<8> l00001B16
l00001B16:
	branch d4_367 != 1<32> l00001B38
l00001B38:
	branch d4_367 != 0x6C<32> l00001B56
l00001B56:
	branch d4_367 != 0x68<32> l00001B74
l00001B74:
	branch d4_367 != 2<32> l00001B92
l00001B92:
	d0_1408 = d3_1418 + 3<32> >>u 2<32> << 2<32>
	a0_1384 = Mem524[d0_1408:word32]
	Mem563[a0_1384:word32] = d6_1416
l00001B7C:
	d0_1408 = d3_1418 + 3<32> >>u 2<32> << 2<32>
	a0_1384 = Mem524[d0_1408:word32]
	Mem575[a0_1384:byte] = SLICE(d6_1416, byte, 0)
l00001B5E:
	d0_1408 = d3_1418 + 3<32> >>u 2<32> << 2<32>
	a0_1384 = Mem524[d0_1408:word32]
	Mem587[a0_1384:word16] = SLICE(d6_1416, word16, 0)
l00001B40:
	d0_1408 = d3_1418 + 3<32> >>u 2<32> << 2<32>
	a0_1384 = Mem524[d0_1408:word32]
	Mem598[a0_1384:word32] = d6_1416
l00001B1E:
	d0_1408 = d3_1418 + 3<32> >>u 2<32> << 2<32>
	a0_1384 = Mem524[d0_1408:word32]
	Mem609[a0_1384 + 4<i32>:word32] = d6_1416
	Mem610[a0_1384:word32] = 0<32>
l00001BA6:
	d3_1418 = (d3_1418 + 3<32> >>u 2<32> << 2<32>) + 4<32>
	Mem617[a7_1886 + 64<i32>:word32] = 0<32>
	d5_1417 = 0<i32>
l000016AE:
	branch Mem524[a7_1886 + 44<i32>:byte] <=u 0x70<8> l000016D6
l000016BC:
	byte v105_632 = Mem524[a7_1886 + 44<i32>:byte]
	branch v105_632 == 0x73<8> l00001AC0
l00001AC0:
	d0_1408 = d3_1418 + 3<32> >>u 2<32> << 2<32>
	a3_1222 = Mem524[d0_1408:word32]
	Mem648[a7_1886 + 102<i32>:word32] = 0<32>
	d3_1418 = d0_1408 + 4<32>
	a0_1384 = d0_1408 + 4<32>
	word32 a1_647 = a3_1222
	branch d5_248 == 0<32> l00001AE2
l00001ADC:
	branch d5_248 - Mem648[a7_1886 + 102<i32>:word32] <=u 0<32> l00001AFE
l00001AE2:
	branch Mem648[a3_1222:byte] == 0<8> l00001AFE
l00001AE6:
	d0_1408 = Mem648[a7_1886 + 102<i32>:word32]
l00001AEA:
	d0_1408 = d0_1408 + 1<32>
	a1_647 = a1_647 + 1<i32>
	branch d5_248 <=u 0<32> l00001AF6
l00001AF2:
	branch d5_248 - d0_1408 <=u 0<32> l00001AFA
l00001AF6:
	branch Mem648[a1_647:byte] != 0<8> l00001AEA
l00001AFA:
	Mem704[a7_1886 + 102<i32>:word32] = d0_1408
l00001AFE:
	d5_1417 = 0<i32>
l000016C8:
	branch v105_632 == 0x75<8> l000016D6
l000016CE:
	branch v105_632 != 0x78<8> l00001BAE
l00001BAE:
	branch v88_419 != 0<8> l00001BB4
l00001BB2:
	a2_1810 = a2_1810 - 1<i32>
l00001BB4:
	d0_1408 = a2_1810 - a4_1843
	Mem740[a7_1886 + 102<i32>:word32] = d0_1408
	Mem742[a7_1886 + 64<i32>:word32] = 0<32>
	a3_1222 = a4_1843
	d5_1417 = 0<i32>
l000016D6:
	branch v88_419 != 0x70<8> l000016E8
l000016DC:
	Mem756[a7_1886 + 72<i32>:word32] = Mem754[a7_1886 + 72<i32>:word32] | 1<32>
	d4_367 = 108<i32>
	d1_1037 = 120<i32>
l000016E8:
	word32 d3_1022
	word32 a7_1155
	branch SLICE(d1_1037, byte, 0) == 0x64<8> l000016F6
l000016EE:
	branch SLICE(d1_1037, byte, 0) != 0x69<8> l00001840
l00001840:
	branch d4_367 != 1<32> l00001864
l00001864:
	branch d4_367 != 0x6C<32> l00001886
l00001886:
	word32 d0_780 = d3_1418 + 3<32> >>u 2<32> << 2<32>
	Mem788[a7_1886 + 60<i32>:word32] = Mem785[d0_780:word32]
	Mem789[a7_1886 + 56<i32>:word32] = 0<32>
	d3_1022 = d0_780 + 4<32>
l0000186C:
	word32 d0_797 = d3_1418 + 3<32> >>u 2<32> << 2<32>
	Mem803[a7_1886 + 60<i32>:word32] = Mem785[d0_797:word32]
	Mem804[a7_1886 + 56<i32>:word32] = 0<32>
	d3_1022 = d0_797 + 4<32>
l00001848:
	word32 d0_812 = d3_1418 + 3<32> >>u 2<32> << 2<32>
	Mem818[a7_1886 + 60<i32>:word32] = Mem785[d0_812 + 4<32>:word32]
	Mem820[a7_1886 + 56<i32>:word32] = Mem818[d0_812:word32]
	d3_1022 = d0_812 + 8<32>
l0000189E:
	branch d4_367 != 0x68<32> l000018BA
l000018A6:
	word16 v191_828 = Mem827[a7_1886 + 62<i32>:word16]
	word32 a7_832 = a7_1886 - 4<i32>
	Mem834[a7_832:word32] = d1_1037
	Mem839[a7_832 + 64<i32>:word32] = (uint32) (uint16) v191_828
	Mem840[a7_832 + 60<i32>:word32] = 0<32>
	d1_1037 = Mem840[a7_832:word32]
l000018BA:
	branch d4_367 != 2<32> l000018D6
l000018C2:
	byte v200_851 = Mem850[a7_1886 + 63<i32>:byte]
	word32 a7_855 = a7_1886 - 4<i32>
	Mem857[a7_855:word32] = d1_1037
	Mem862[a7_855 + 64<i32>:word32] = (uint32) (uint8) v200_851
	Mem863[a7_855 + 60<i32>:word32] = 0<32>
	d1_1037 = Mem863[a7_855:word32]
l000018D6:
	word32 d0_871 = Mem870[a7_1886 + 72<i32>:word32] & 1<i32>
	Mem874[a7_1886 + 44<i32>:byte] = SLICE(d1_1037, byte, 0)
	a7_1155 = a7_1886
	branch d0_871 == 0<32> l00001974
l000018E6:
	branch SLICE(d1_1037, byte, 0) != 0x6F<8> l00001922
l000018EC:
	branch d5_248 != 0<32> l00001916
l000018F0:
	word32 a7_891 = a7_1886 - 4<i32>
	Mem892[a7_891:word32] = d0_871
	Mem894[a7_891 - 4<i32>:word32] = d1_1037
	word32 d0_895 = Mem894[a7_891 + 64<i32>:word32]
	word32 d1_896 = Mem894[a7_891 + 60<i32>:word32]
	Mem912[a7_891 - 8<i32>:word32] = d2_126
	d2_126 = Mem912[a7_891 - 8<i32>:word32]
	d1_1037 = Mem912[a7_891 - 4<i32>:word32]
	d0_871 = Mem912[a7_891:word32]
	branch d1_896 - (d0_895 <u 0<32>) == 0<32> l00001922
l00001916:
	Mem951[a7_1886 + 106<i32>:byte] = 0x30<8>
	d7_1002 = 1<32>
l00001922:
	a7_1155 = a7_1886
	branch SLICE(d1_1037, byte, 0) == 0x78<8> l00001932
l00001928:
	Mem960[a7_1886 + 44<i32>:byte] = SLICE(d1_1037, byte, 0)
	branch SLICE(d1_1037, byte, 0) != 0x58<8> l00001974
l00001932:
	Mem967[a7_1886 + 44<i32>:byte] = SLICE(d1_1037, byte, 0)
	word32 a7_968 = a7_1886 - 4<i32>
	Mem972[a7_968:word32] = d0_871
	Mem974[a7_968 - 4<i32>:word32] = d1_1037
	word32 d0_975 = Mem974[a7_968 + 64<i32>:word32]
	word32 d1_976 = Mem974[a7_968 + 60<i32>:word32]
	Mem981[a7_968 - 8<i32>:word32] = d2_126
	word32 d1_990 = Mem981[a7_968 - 4<i32>:word32]
	a7_1155 = a7_968 + 4<i32>
	branch d1_976 - (d0_975 <u 0<32>) == 0<32> l00001974
l0000195C:
	Mem1000[a7_968 + 110<i32> + d7_1002:byte] = 0x30<8>
	word32 d7_999 = d7_1002 + 1<32>
	Mem1005[a7_968 + 110<i32> + d7_999:byte] = SLICE(d1_990, byte, 0)
	Mem1007[a7_968 + 48<i32>:byte] = SLICE(d1_990, byte, 0)
	d7_1002 = d7_999 + 1<32>
l000016F6:
	word32 d0_1032
	branch d4_367 != 1<32> l0000171C
l0000171C:
	branch d4_367 != 0x6C<32> l00001748
l00001748:
	word32 d0_1020 = d3_1418 + 3<32> >>u 2<32> << 2<32>
	word32 d0_1025 = Mem785[d0_1020:word32]
	Mem1027[a7_1886 + 52<i32>:word32] = d0_1025
	word32 a7_1028 = a7_1886 - 4<i32>
	Mem1030[a7_1028:word32] = d1_1037
	Mem1034[a7_1028 + 52<i32>:word32] = d0_1025 >> 31<i32>
	word32 v172_1035 = Mem1034[a7_1028:word32]
	d3_1022 = d0_1020 + 4<32>
	d0_1032 = d0_1025 >> 31<i32>
	d1_1037 = v172_1035
	branch d4_367 != 0x68<32> l0000178E
l00001772:
	word16 v174_1041 = Mem1034[a7_1028 + 58<i32>:word16]
	Mem1045[a7_1028:word32] = v172_1035
	word32 d1_1049 = (int32) v174_1041
	Mem1050[a7_1028 + 56<i32>:word32] = d1_1049
	Mem1052[a7_1028 - 4<i32>:word32] = SEQ(SLICE(d0_1025 >> 31<i32>, word16, 16), v174_1041)
	Mem1056[a7_1028 + 52<i32>:word32] = d1_1049 >> 31<i32>
	d1_1037 = Mem1056[a7_1028 - 4<i32>:word32]
	d0_1032 = Mem1056[a7_1028:word32]
l0000178E:
	branch d4_367 != 2<32> l000017B4
l00001796:
	byte v181_1070 = Mem1069[a7_1886 + 55<i32>:byte]
	word32 a7_1074 = a7_1886 - 4<i32>
	Mem1076[a7_1074:word32] = d1_1037
	word32 d1_1081 = (int32) (int16) v181_1070
	Mem1082[a7_1074 + 56<i32>:word32] = d1_1081
	Mem1084[a7_1074 - 4<i32>:word32] = SEQ(SLICE(d0_1032, word24, 8), v181_1070)
	Mem1088[a7_1074 + 52<i32>:word32] = d1_1081 >> 31<i32>
	d1_1037 = Mem1088[a7_1074 - 4<i32>:word32]
	d0_1032 = Mem1088[a7_1074:word32]
l00001724:
	word32 d0_1099 = d3_1418 + 3<32> >>u 2<32> << 2<32>
	word32 d0_1103 = Mem785[d0_1099:word32]
	Mem1104[a7_1886 + 52<i32>:word32] = d0_1103
	word32 a7_1105 = a7_1886 - 4<i32>
	Mem1106[a7_1105:word32] = d1_1037
	Mem1110[a7_1105 + 52<i32>:word32] = d0_1103 >> 31<i32>
	d3_1022 = d0_1099 + 4<32>
	d0_1032 = d0_1103 >> 31<i32>
	d1_1037 = Mem1110[a7_1105:word32]
l000016FE:
	d0_1032 = d3_1418 + 3<32> >>u 2<32> << 2<32>
	Mem1124[a7_1886 + 52<i32>:word32] = Mem785[d0_1032 + 4<32>:word32]
	Mem1126[a7_1886 + 48<i32>:word32] = Mem1124[d0_1032:word32]
	d3_1022 = d0_1032 + 8<32>
l000017B4:
	Mem1131[a7_1886 + 44<i32>:byte] = SLICE(d1_1037, byte, 0)
	word32 a7_1132 = a7_1886 - 4<i32>
	Mem1134[a7_1132:word32] = d0_1032
	Mem1136[a7_1132 - 4<i32>:word32] = d1_1037
	word32 d0_1137 = Mem1136[a7_1132 + 56<i32>:word32]
	word32 d1_1138 = Mem1136[a7_1132 + 52<i32>:word32]
	Mem1143[a7_1132 - 8<i32>:word32] = d2_126
	a7_1155 = a7_1132 + 4<i32>
	branch d1_1138 - (d0_1137 <u 0<32>) >= 0<32> l000017FE
l000017FE:
	byte v134_1157 = Mem1143[a7_1132 + 48<i32>:byte]
	branch (Mem1143[a7_1132 + 76<i32>:word32] & 16<i32>) == 0<32> l00001818
l00001818:
	branch (Mem1143[a7_1132 + 76<i32>:word32] & 8<i32>) == 0<32> l0000182C
l00001820:
	Mem1179[a7_1132 + 110<i32>:byte] = 0x20<8>
	d7_1002 = 1<32>
l0000180A:
	Mem1185[a7_1132 + 110<i32>:byte] = 0x2B<8>
	d7_1002 = 1<32>
l0000182C:
	Mem1190[a7_1132 + 64<i32>:word32] = Mem1188[a7_1132 + 56<i32>:word32]
	Mem1192[a7_1132 + 60<i32>:word32] = Mem1190[a7_1132 + 52<i32>:word32]
	Mem1195[a7_1132 + 48<i32>:byte] = v134_1157
l000017DE:
	Mem1200[a7_1132 + 110<i32>:byte] = 0x2D<8>
	d7_1002 = 1<32>
	a7_1155 = Mem1200[a7_1132 + 0x40<32>:word32]
l00001974:
	byte v128_1218 = Mem1217[a7_1155 + 44<i32>:byte]
	a3_1222 = a7_1155 + 98<i32>
	branch v128_1218 == 0x78<8> l00001988
l00001982:
	branch v128_1218 != 0x58<8> l00001992
l00001992:
	branch v128_1218 != 0x6F<8> l000019A2
l000019A2:
	Mem1232[a7_1155 + 48<i32>:word32] = 0xA<32>
l00001998:
	Mem1234[a7_1155 + 48<i32>:word32] = 8<32>
l000019AA:
	Mem1239[a7_1155 + 44<i32>:word32] = Mem1237[a7_1155 + 48<i32>:word32]
l00001988:
	Mem1242[a7_1155 + 44<i32>:word32] = 0x10<32>
l000019B0:
	word32 a6_1254
	Mem1247[a7_1155 + 108<i32>:word32] = Mem1245[a7_1155 + 44<i32>:word32]
	branch v128_1218 == 0x58<8> l000019C2
l000019C2:
	a6_1254 = 0x00001DC8<p32>
l000019BC:
	a6_1254 = 0x00001DB8<p32>
l000019C6:
	Mem1258[a7_1155 + 44<i32>:word32] = a6_1254
	Mem1273[a7_1155 + 124<i32>:word32] = d3_1022
	Mem1286[a7_1155 + 68<i32>:word32] = d5_248
	Mem1304[a7_1155 + 48<i32>:word32] = d6_1416
	Mem1311[a7_1155 + 98<i32>:word32] = d7_1002
	word32 v147_1312 = a7_1155 + 56<i32>
	word32 d6_1313 = Mem1311[v147_1312:word32]
	word32 d7_1315 = Mem1311[v147_1312 + 4<i32>:word32]
	word32 d3_1317 = Mem1311[a7_1155 + 102<i32>:word32]
	word32 a1_1319 = Mem1311[a7_1155 + 44<i32>:word32]
l000019E8:
	word32 d1_1322 = Mem1321[a7_1155 + 108<i32>:word32]
	word32 a7_1327 = a7_1155 - 4<i32>
	Mem1328[a7_1327:word32] = d1_1322 >> 31<i32>
	Mem1330[a7_1327 - 4<i32>:word32] = d1_1322
	Mem1333[a7_1327 - 8<i32>:word32] = a1_1319
	Mem1336[a7_1327 - 12<i32>:word32] = d1_1322
	Mem1338[a7_1327 - 16<i32>:word32] = d1_1322 >> 31<i32>
	Mem1341[a7_1327 - 20<i32>:word32] = d7_1315
	Mem1344[a7_1327 - 24<i32>:word32] = d6_1313
	word32 d1_1347 = fn00002648(Mem1344[a7_1327 - 24<i32>:word32], Mem1344[a7_1327 - 20<i32>:word32], Mem1344[a7_1327 - 16<i32>:word32], Mem1344[a7_1327 - 12<i32>:word32])
	word32 v148_1355 = Mem1344[a7_1327 - 8<i32>:word32]
	word32 d1_1360 = Mem1344[a7_1327 - 4<i32>:word32]
	word32 d0_1362 = Mem1344[a7_1327:word32]
	a3_1222 = a3_1222 - 1<i32>
	Mem1368[a3_1222:byte] = Mem1344[v148_1355 + d1_1347:byte]
	Mem1370[a7_1327:word32] = d0_1362
	Mem1372[a7_1327 - 4<i32>:word32] = d1_1360
	Mem1374[a7_1327 - 8<i32>:word32] = v148_1355
	Mem1377[a7_1327 - 12<i32>:word32] = d1_1360
	Mem1379[a7_1327 - 16<i32>:word32] = d0_1362
	Mem1381[a7_1327 - 20<i32>:word32] = d7_1315
	Mem1383[a7_1327 - 24<i32>:word32] = d6_1313
	word32 d1_1387
	word32 d0_1386 = fn000023F8(Mem1383[a7_1327 - 24<i32>:word32], Mem1383[a7_1327 - 20<i32>:word32], Mem1383[a7_1327 - 16<i32>:word32], Mem1383[a7_1327 - 12<i32>:word32], out d1_1387, out a0_1384)
	a1_1319 = Mem1383[a7_1327 - 8<i32>:word32]
	d6_1313 = d0_1386
	d7_1315 = d1_1387
	a7_1402 = a7_1327 + 4<i32>
	d3_1317 = d3_1317 + 1<32>
	d0_1408 = d1_1387
	branch d0_1386 - (d1_1387 <u 0<32>) != 0<32> l000019E8
l00001A56:
	Mem1414[a7_1327 + 106<i32>:word32] = d3_1317
	d7_1002 = Mem1414[a7_1327 + 102<i32>:word32]
	d6_1416 = Mem1414[a7_1327 + 52<i32>:word32]
	d5_1417 = Mem1414[a7_1327 + 72<i32>:word32]
	d3_1418 = Mem1414[a7_1327 + 128<i32>:word32]
	branch d5_1417 != 0xFFFFFFFF<32> l00001A78
l00001A78:
	Mem1423[a7_1327 + 76<i32>:word32] = Mem1414[a7_1327 + 76<i32>:word32] & 0xFFFFFFFD<32>
l00001A72:
	d5_1417 = 0<i32>
l00001BC4:
	branch d5_1417 - Mem1432[a7_1402 + 102<i32>:word32] >u 0<32> l00001BD2
l00001BD2:
	Mem1437[a7_1402 + 44<i32>:word32] = d5_1417
l00001BCA:
	Mem1440[a7_1402 + 44<i32>:word32] = Mem1432[a7_1402 + 102<i32>:word32]
l00001BD6:
	word32 a7_1443 = a7_1402 - 4<i32>
	Mem1450[a7_1443:word32] = d0_1408
	Mem1464[a7_1443 + 52<i32>:word32] = Mem1450[a7_1443 + 48<i32>:word32] + d7_1002
	Mem1469[a7_1443:word32] = Mem1464[a7_1443:word32]
	word32 d0_1473 = Mem1469[a7_1443:word32]
	branch Mem1469[a7_1443 + 52<i32>:word32] - Mem1469[a7_1443 + 68<i32>:word32] <u 0<32> l00001BFA
l00001BFA:
	Mem1477[a7_1443:word32] = d0_1473
	Mem1481[a7_1443 + 48<i32>:word32] = Mem1477[a7_1443 + 68<i32>:word32] - Mem1477[a7_1443 + 52<i32>:word32]
l00001BF4:
	Mem1486[a7_1443 + 48<i32>:word32] = 0<32>
l00001C0A:
	Mem1494[a7_1402 + 48<i32>:word32] = Mem1492[a7_1402 + 44<i32>:word32]
	branch (Mem1494[a7_1402 + 72<i32>:word32] & 2<i32>) == 0<32> l00001C4C
l00001C18:
	word32 d2_1501 = 0<i32>
	branch d7_1002 == 0<32> l00001C4C
l00001C1E:
	word32 a7_1508 = a7_1402 - 4<i32>
	Mem1510[a7_1508:word32] = a5_1509
	Mem1521[a7_1508 - 4<i32>:word32] = (int32) (int16) Mem1510[a7_1508 + 110<i32> + d2_1501:byte]
	branch fn00001DD8(Mem1521[a7_1508 - 4<i32>:word32], Mem1521[a7_1508:word32], out a0_1384, out a5_1509) != 0xFFFFFFFF<32> l00001C44
l00001C44:
	d2_1501 = d2_1501 + 1<32>
	d6_1416 = d6_1416 + 1<32>
	branch d7_1002 - d2_1501 >u 0<32> l00001C1E
l00001C4C:
	branch (Mem1547[a7_1402 + 72<i32>:word32] & 4<i32>) != 0<32> l00001C9E
l00001C54:
	word32 d2_1553 = 0<i32>
	branch Mem1547[a7_1402 + 48<i32>:word32] == 0<32> l00001C9E
l00001C5C:
	word32 d4_1558 = Mem1547[a7_1402 + 72<i32>:word32]
	word32 a4_1560 = Mem1547[a7_1402 + 48<i32>:word32]
l00001C64:
	word32 a0_1574
	word32 a7_1562 = a7_1402 - 4<i32>
	Mem1564[a7_1562:word32] = a5_1509
	branch (d4_1558 & 2<i32>) == 0<32> l00001C72
l00001C72:
	a0_1574 = SEQ(SLICE(a0_1384, word16, 16), 0x20<16>)
l00001C6C:
	a0_1574 = SEQ(SLICE(a0_1384, word16, 16), 0x30<16>)
l00001C76:
	Mem1580[a7_1402 - 8<i32>:word32] = a0_1574
	branch fn00001DD8(Mem1580[a7_1402 - 8<i32>:word32], Mem1580[a7_1402 - 4<i32>:word32], out a0_1384, out a5_1509) != 0xFFFFFFFF<32> l00001C8E
l00001C8E:
	d2_1553 = d2_1553 + 1<32>
	d6_1416 = d6_1416 + 1<32>
	branch a4_1560 - d2_1553 >u 0<32> l00001C64
l00001C96:
	Mem1608[a7_1562 + 52<i32>:word32] = a4_1560
	Mem1610[a7_1562 + 76<i32>:word32] = d4_1558
l00001C9E:
	branch (Mem1614[a7_1402 + 72<i32>:word32] & 2<i32>) != 0<32> l00001CDA
l00001CA6:
	word32 d2_1620 = 0<i32>
	branch d7_1002 == 0<32> l00001CDA
l00001CAC:
	word32 a7_1630 = a7_1402 - 4<i32>
	Mem1632[a7_1630:word32] = a5_1509
	Mem1643[a7_1630 - 4<i32>:word32] = (int32) (int16) Mem1632[a7_1630 + 110<i32> + d2_1620:byte]
	word32 a0_2836
	branch fn00001DD8(Mem1643[a7_1630 - 4<i32>:word32], Mem1643[a7_1630:word32], out a0_2836, out a5_1509) != 0xFFFFFFFF<32> l00001CD2
l00001CD2:
	d2_1620 = d2_1620 + 1<32>
	d6_1416 = d6_1416 + 1<32>
	branch d7_1002 - d2_1620 >u 0<32> l00001CAC
l00001CDA:
	word32 d2_1669 = Mem1668[a7_1402 + 102<i32>:word32]
	branch d5_1417 - Mem1668[a7_1402 + 102<i32>:word32] <=u 0<32> l00001D08
l00001CE4:
	word32 a7_1683 = a7_1402 - 4<i32>
	Mem1685[a7_1683:word32] = a5_1509
	Mem1688[a7_1683 - 4<i32>:word32] = 0x00000030<p32>
	word32 a0_2837
	branch fn00001DD8(Mem1688[a7_1683 - 4<i32>:word32], Mem1688[a7_1683:word32], out a0_2837, out a5_1509) != 0xFFFFFFFF<32> l00001D00
l00001D00:
	d2_1669 = d2_1669 + 1<32>
	d6_1416 = d6_1416 + 1<32>
	branch d5_1417 - d2_1669 >u 0<32> l00001CE4
l00001D08:
	word32 d2_1712 = 0<i32>
	branch Mem1714[a7_1402 + 102<i32>:word32] == 0<32> l00001D3E
l00001D10:
	word32 a4_1719 = Mem1714[a7_1402 + 102<i32>:word32]
l00001D14:
	word32 a7_1721 = a7_1402 - 4<i32>
	Mem1723[a7_1721:word32] = a5_1509
	Mem1734[a7_1721 - 4<i32>:word32] = (int32) (int16) Mem1723[a3_1222 + d2_1712:byte]
	word32 a0_2838
	branch fn00001DD8(Mem1734[a7_1721 - 4<i32>:word32], Mem1734[a7_1721:word32], out a0_2838, out a5_1509) != 0xFFFFFFFF<32> l00001D36
l00001D36:
	d2_1712 = d2_1712 + 1<32>
	d6_1416 = d6_1416 + 1<32>
	branch a4_1719 - d2_1712 >u 0<32> l00001D14
l00001D3E:
	d0 = Mem1760[a7_1402 + 72<i32>:word32] & 4<i32>
	branch d0 == 0<32> l00001D74
l00001D46:
	word32 d2_1766 = 0<i32>
	branch Mem1760[a7_1402 + 48<i32>:word32] == 0<32> l00001D74
l00001D4E:
	word32 a3_1771 = Mem1760[a7_1402 + 48<i32>:word32]
l00001D52:
	word32 a7_1773 = a7_1402 - 4<i32>
	Mem1775[a7_1773:word32] = a5_1509
	Mem1778[a7_1773 - 4<i32>:word32] = 0x00000020<p32>
	word32 a0_2839
	d0 = fn00001DD8(Mem1778[a7_1773 - 4<i32>:word32], Mem1778[a7_1773:word32], out a0_2839, out a5_1509)
	branch d0 != 0xFFFFFFFF<32> l00001D6C
l00001D6C:
	d2_1766 = d2_1766 + 1<32>
	d6_1416 = d6_1416 + 1<32>
	branch a3_1771 - d2_1766 >u 0<32> l00001D52
l00001D74:
	a7_1886 = a7_1402
	a4_1843 = a2_1810
l00001D98:
	branch Mem1845[a4_1843:byte] != 0<8> l00001474
l00001D9E:
	d0_1870 = d6_1416
l00001D68:
	d0_1870 = d6_1416
l00001D32:
	d0_1870 = d6_1416
l00001CFA:
	d0_1870 = d6_1416
l00001CCC:
	d0_1870 = d6_1416
l00001C88:
	d0_1870 = d6_1416
l00001C3E:
	d0_1870 = d6_1416
l00001DA0:
	return d0_1870
fn00001458_exit:


word32 fn00001DD8(word32 dwArg04, word32 dwArg08, ptr32 & a0Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00001458
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: a0 a5 d0
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a7 d2
fn00001DD8_entry:
l00001DD8:
	word32 a0_101
	word32 d1_51
	Mem17[dwArg08 + 24<i32>:word32] = Mem11[dwArg08 + 24<i32>:word32] | 2<i32>
	word32 v13_19 = Mem17[dwArg08 + 20<i32>:word32] - 1<32>
	Mem20[dwArg08 + 20<i32>:word32] = v13_19
	branch v13_19 < 0<32> l00001E1C
l00001DF4:
	branch dwArg04 != 10<i32> l00001E06
l00001DFA:
	branch (Mem20[dwArg08 + 24<i32>:word32] & 0x80<32>) != 0<32> l00001E1C
l00001E1C:
	d1_51 = fn00001E34(dwArg04, dwArg08, out a0_101, out a5)
l00001E06:
	a0_101 = Mem20[dwArg08 + 4<i32>:word32]
	Mem60[dwArg08 + 4<i32>:word32] = a0_101 + 1<i32>
	Mem63[a0_101:byte] = SLICE(dwArg04, byte, 0)
	d1_51 = (uint32) (uint8) Mem63[a0_101:byte]
l00001E2A:
	a0Out = a0_101
	a5Out = a5
	return d1_51
fn00001DD8_exit:


word32 fn00001E34(word32 dwArg04, word32 dwArg08, ptr32 & a0Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00001DD8
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: a0 a5 d0
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a4 a6 a7 d2 d3 d4 d5 d6
fn00001E34_entry:
l00001E34:
	word32 d0_107
	word32 a5_123 = fn000023C8()
	branch dwArg08 != 0<32> l00001E50
l00001E50:
	branch (Mem29[dwArg08 + 24<i32>:word32] & 73<i32>) == 64<i32> l00001E62
l00001E62:
	branch Mem29[dwArg08 + 28<i32>:word32] != 0<32> l00001E80
l00001E68:
	branch (Mem29[dwArg08 + 24<i32>:word32] & 4<i32>) == 0<32> l00001E78
l00001E78:
	Mem61[dwArg08 + 28<i32>:word32] = 0x400<32>
l00001E70:
	Mem64[dwArg08 + 28<i32>:word32] = 1<i32>
l00001E80:
	branch Mem67[dwArg08 + 8<i32>:word32] != 0<32> l00001EC0
l00001EC0:
	branch Mem67[dwArg08:word32] == 0<32> l00001F1A
l00001F1A:
	d0_107 = 0<i32>
l00001EC4:
	word32 d0_79 = Mem67[dwArg08 + 24<i32>:word32] & 0x80<32>
	branch d0_79 == 0<32> l00001EF0
l00001ED0:
	d0_79 = 10<i32>
	branch dwArg04 != 10<i32> l00001EF0
l00001EF0:
	word32 d4_93 = Mem67[dwArg08 + 4<i32>:word32] - Mem67[dwArg08 + 8<i32>:word32]
	execPrivate3()
	branch d4_93 - d0_79 == 0<32> l00001F1E
l00001F0E:
	Mem106[dwArg08 + 24<i32>:word32] = Mem67[dwArg08 + 24<i32>:word32] | 16<i32>
	a0 = dwArg08 + 24<i32>
	d0_107 = -1<i32>
l00001ED6:
	word32 a0_110 = Mem67[dwArg08 + 4<i32>:word32]
	Mem113[dwArg08 + 4<i32>:word32] = a0_110 + 1<i32>
	Mem115[a0_110:byte] = SLICE(dwArg04, byte, 0)
	d0_107 = fn00001F48(dwArg08, out a0, out a5_123)
l00001E86:
	word32 d4_139
	branch (Mem67[dwArg08 + 24<i32>:word32] & 0x80<32>) == 0<32> l00001E9A
l00001E9A:
	d4_139 = 1<i32>
l00001E96:
	d4_139 = 2<i32>
l00001E9C:
	word32 d0_155 = fn00001FF4(d4_139 + Mem67[dwArg08 + 28<i32>:word32], out a0)
	branch d0_155 != 0<32> l00001EB6
l00001EB6:
	Mem168[dwArg08 + 8<i32>:word32] = d0_155 + 1<i32>
l00001F1E:
	Mem175[dwArg08 + 24<i32>:word32] = Mem173[dwArg08 + 24<i32>:word32] | 2<i32>
	a0 = Mem175[dwArg08 + 8<i32>:word32]
	Mem182[a0:byte] = SLICE(dwArg04, byte, 0)
	Mem185[dwArg08 + 4<i32>:word32] = Mem182[dwArg08 + 8<i32>:word32] + 1<i32>
	Mem189[dwArg08 + 20<i32>:word32] = Mem185[dwArg08 + 28<i32>:word32] - 1<32>
	d0_107 = 0<i32>
l00001EB0:
	d0_107 = -1<i32>
l00001E5C:
	d0_107 = -1<i32>
l00001E4A:
	d0_107 = -1<i32>
l00001F42:
	a0Out = a0
	a5Out = a5_123
	return d0_107
fn00001E34_exit:


word32 fn00001F48(word32 dwArg04, ptr32 & a0Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00001E34
//      fn00002A44
// MayUse:  Stack +0004:[0..31]
// LiveOut: a0 a5 d0
// Trashed: CVZNX a0 a1 a4 a5 d0 d1
// Preserved: a2 a6 a7 d2 d3 d4
fn00001F48_entry:
l00001F48:
	word32 d0_151
	word32 a5_23 = fn000023C8()
	branch dwArg04 != 0<32> l00001F5E
l00001F5E:
	branch Mem17[dwArg04 + 28<i32>:word32] != 0<32> l00001F7C
l00001F64:
	branch (Mem17[dwArg04 + 24<i32>:word32] & 4<i32>) == 0<32> l00001F74
l00001F74:
	Mem41[dwArg04 + 28<i32>:word32] = 0x400<32>
l00001F6C:
	Mem44[dwArg04 + 28<i32>:word32] = 1<i32>
l00001F7C:
	branch Mem47[dwArg04 + 8<i32>:word32] != 0<32> l00001F86
l00001F86:
	word32 d0_53 = Mem47[dwArg04 + 24<i32>:word32] & 2<i32>
	branch d0_53 == 0<32> l00001FCC
l00001F8E:
	branch Mem47[dwArg04:word32] == 0<32> l00001FBC
l00001FBC:
	d0_151 = 0<i32>
l00001F92:
	word32 d4_66 = Mem47[dwArg04 + 4<i32>:word32] - Mem47[dwArg04 + 8<i32>:word32]
	execPrivate3()
	branch d4_66 - d0_53 == 0<32> l00001FC0
l00001FC0:
	Mem76[dwArg04 + 4<i32>:word32] = Mem47[dwArg04 + 8<i32>:word32]
	Mem78[dwArg04 + 20<i32>:word32] = Mem76[dwArg04 + 28<i32>:word32]
l00001FCC:
	Mem85[dwArg04 + 24<i32>:word32] = Mem83[dwArg04 + 24<i32>:word32] & -4<i32>
	a0 = dwArg04 + 24<i32>
	d0_151 = 0<i32>
l00001FB0:
	Mem91[dwArg04 + 24<i32>:word32] = Mem47[dwArg04 + 24<i32>:word32] | 16<i32>
	a0 = dwArg04 + 24<i32>
	d0_151 = -1<i32>
l00001F82:
	d0_151 = 0<i32>
l00001F5A:
	d0_151 = -1<i32>
l00001FD6:
	a0Out = a0
	a5Out = a5_23
	return d0_151
fn00001F48_exit:


word32 fn00001FF4(word32 dwArg04, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00001E34
// MayUse:  Stack +0004:[0..31]
// LiveOut: a0 d0
// Trashed: CVZN a0 a1 d0 d1
// Preserved: X a7 d2
fn00001FF4_entry:
l00001FF4:
	word32 d0_100
	branch dwArg04 != 0<32> l00002002
l00002002:
	branch Mem5[0x00002BC0<p32>:word32] != 0<32> l00002026
l0000200A:
	word32 a0_13 = Mem5[0x00002BBC<p32>:word32]
	Mem19[0<32>:word32] = 0<32>
	Mem33[0x00002BC0<p32>:word32] = fn000022E8(dwLoc10, a0_13, a0_13, out a0)
l00002026:
	branch Mem36[0x00002BC0<p32>:word32] != 0<32> l00002032
l00002032:
	word32 d0_53 = fn000021C4(Mem47[0x00002BC0<p32>:word32], dwArg04 + 4<i32>, out a0)
	branch d0_53 != 0<32> l00002050
l00002050:
	Mem66[d0_53:word32] = dwArg04
	a0 = d0_53 + 4<i32>
	d0_100 = d0_53 + 4<i32>
l0000204C:
	d0_100 = 0<i32>
l0000202E:
	d0_100 = 0<i32>
l00001FFE:
	d0_100 = 0<i32>
l00002058:
	a0Out = a0
	return d0_100
fn00001FF4_exit:


void fn00002060(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7
fn00002060_entry:
l00002060:
	branch dwArg04 == 0<32> l0000208A
l0000206A:
	branch Mem0[0x00002BC0<p32>:word32] == 0<32> l0000208A
l00002072:
	fn00002128(Mem21[0x00002BC0<p32>:word32], dwArg04 - 4<i32>, Mem0[dwArg04 - 4<i32>:word32] + 4<i32>)
l0000208A:
	return
fn00002060_exit:


void fn00002128(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00002060
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut:
// Trashed: CVZN a0 a1 d0 d1
// Preserved: a2 a3 a4 a5 a6 a7 d2
fn00002128_entry:
l00002128:
	branch Mem20[Mem20[0x00002B8C<p32>:word32] + 20<i32>:word16] <u 0x27<16> l00002158
l00002158:
	branch dwArg04 == 0<32> l000021BC
l0000215C:
	branch dwArg08 == 0<32> l000021BC
l00002160:
	word32 a3_36 = dwArg08 + -12<i32>
	branch dwArg0C - Mem20[dwArg04 + 20<i32>:word32] >=u 0<32> l000021A2
l0000216C:
	word32 a2_40 = dwArg04
l0000216E:
	a2_40 = Mem20[a2_40:word32]
	branch Mem20[a2_40:word32] == 0<32> l000021BC
l00002174:
	branch Mem20[a2_40 + 8<i32>:byte] == 0<8> l0000216E
l0000217A:
	branch dwArg08 - Mem20[a2_40 + 20<i32>:word32] <u 0<32> l0000216E
l00002180:
	branch dwArg08 - Mem20[a2_40 + 24<i32>:word32] >=u 0<32> l0000216E
l00002186:
	Deallocate(a2_40, dwArg08, dwArg0C)
	branch Mem20[a2_40 + 28<i32>:word32] - Mem20[dwArg04 + 16<i32>:word32] != 0<32> l000021BC
l000021A0:
	a3_36 = a2_40
l000021A2:
	Remove(a3_36)
	word32 a3_74 = a3_36 - 4<i32>
	FreeMem(a3_74, Mem20[a3_74:word32])
l00002146:
	FreePooled(dwArg08, dwArg04)
l000021BC:
	return
fn00002128_exit:


word32 fn000021C4(word32 dwArg04, word32 dwArg08, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00001FF4
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: a0 d0
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a3 a4 a5 a6 a7 d2 d3 d4
fn000021C4_entry:
l000021C4:
	word32 d0_152
	word32 a0_109 = Mem26[0x00002B8C<p32>:word32]
	branch Mem26[a0_109 + 20<i32>:word16] <u 0x27<16> l000021F0
l000021F0:
	word32 a3_114 = 0<32>
	branch dwArg04 == 0<32> l000022E0
l000021F8:
	branch dwArg08 == 0<32> l000022E0
l000021FE:
	branch dwArg08 - Mem26[dwArg04 + 20<i32>:word32] >=u 0<32> l000022B2
l000022B2:
	word32 d0_50 = AllocMem(dwArg08 + 16<i32>, Mem26[dwArg04 + 12<i32>:word32])
	a3_114 = d0_50
	branch d0_50 == 0<32> l000022E0
l000022CC:
	Mem55[d0_50:word32] = dwArg08 + 16<i32>
	AddTail(dwArg04, d0_50 + 4<i32>)
	Mem61[d0_50 + 12<i32>:word32] = 0<32>
	a0_109 = dwArg04
	a3_114 = d0_50 + 16<i32>
l00002206:
	word32 a5_156 = Mem26[dwArg04:word32]
l00002208:
	branch Mem26[a5_156:word32] == 0<32> l0000222A
l0000222A:
	word32 d3_76 = Mem26[dwArg04 + 16<i32>:word32] + 40<i32>
	word32 d0_81 = AllocMem(d3_76, Mem26[dwArg04 + 12<i32>:word32])
	a3_114 = d0_81
	branch d0_81 == 0<32> l000022E0
l00002248:
	Mem86[d0_81:word32] = d3_76
	Mem88[d0_81 + 12<i32>:byte] = 0xA<8>
	Mem91[d0_81 + 20<i32>:word32] = d0_81 + 40<i32>
	Mem92[d0_81 + 24<i32>:word32] = d0_81 + 40<i32>
	Mem94[Mem92[d0_81 + 20<i32>:word32]:word32] = 0<32>
	word32 a2_95 = Mem94[d0_81 + 20<i32>:word32]
	Mem98[a2_95 + 4<i32>:word32] = Mem94[dwArg04 + 16<i32>:word32]
	Mem101[d0_81 + 32<i32>:word32] = Mem98[a2_95 + 4<i32>:word32]
	Mem104[d0_81 + 28<i32>:word32] = Mem101[d0_81 + 32<i32>:word32] + Mem101[d0_81 + 20<i32>:word32]
	AddHead(dwArg04, d0_81 + 4<i32>)
	a0_109 = d0_81 + 4<i32>
	a3_114 = Allocate(d0_81 + 4<i32>, dwArg08)
l0000220C:
	branch Mem26[a5_156 + 8<i32>:byte] == 0<8> l00002226
l00002212:
	word32 d0_122 = Allocate(a5_156, dwArg08)
	a0_109 = a5_156
	a3_114 = d0_122
	branch d0_122 != 0<32> l00002296
l00002296:
	branch (Mem129[dwArg04 + 12<i32>:word32] & 0x10000<32>) == 0<32> l000022E0
l000022A2:
	word32 a2_136 = a3_114
	word32 d2_139 = dwArg08 + 7<32> >>u 3<32>
l000022A8:
	Mem142[a2_136:word32] = 0<32>
	word32 a2_143 = a2_136 + 4<i32>
	Mem144[a2_143:word32] = 0<32>
	a2_136 = a2_143 + 4<i32>
	d2_139 = d2_139 - 1<32>
	branch d2_139 != 0<32> l000022A8
l000022B0:
l000022E0:
	d0_152 = a3_114
l00002226:
	a5_156 = Mem26[a5_156:word32]
l000021DE:
	a0_109 = dwArg04
	d0_152 = AllocPooled(dwArg08, dwArg04)
l000022E2:
	a0Out = a0_109
	return d0_152
fn000021C4_exit:


word32 fn000022E8(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00001FF4
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: a0 d0
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a6 a7 d2 d3
fn000022E8_entry:
l000022E8:
	word32 d0_47
	word32 a0_17 = Mem14[0x00002B8C<p32>:word32]
	branch Mem14[a0_17 + 20<i32>:word16] <u 0x27<16> l00002316
l00002316:
	word32 a1_21 = 0<32>
	branch dwArg08 - dwArg0C <u 0<32> l00002350
l0000231C:
	word32 d0_30 = AllocMem(24<i32>, 0<i32>)
	a1_21 = d0_30
	branch d0_30 == 0<32> l00002350
l00002332:
	Mem36[d0_30:word32] = d0_30 + 4<i32>
	Mem37[d0_30 + 4<i32>:word32] = 0<32>
	Mem38[d0_30 + 8<i32>:word32] = d0_30
	Mem40[d0_30 + 12<i32>:word32] = dwArg04
	Mem43[d0_30 + 16<i32>:word32] = dwArg08 + 7<32> & -8<i32>
	Mem44[d0_30 + 20<i32>:word32] = dwArg0C
	a0_17 = d0_30 + 4<i32>
l00002350:
	d0_47 = a1_21
l00002302:
	d0_47 = CreatePrivatePool(dwArg04, dwArg08, dwArg0C)
l00002352:
	a0Out = a0_17
	return d0_47
fn000022E8_exit:


void fn00002358(word32 d0, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..31] Stack +0004:[0..31]
// LiveOut:
// Trashed: CVZN a0 a1 d0 d1
// Preserved: a2 a6 a7 d2
fn00002358_entry:
l00002358:
	branch Mem11[Mem11[0x00002B8C<p32>:word32] + 20<i32>:word16] <u 0x27<16> l0000237C
l0000237C:
	branch dwArg04 == 0<32> l000023C0
l00002380:
	RemHead(dwArg04)
	word32 a2_24 = d0
	branch d0 == 0<32> l000023B2
l00002392:
	word32 a2_29 = a2_24 - 4<i32>
	word32 d0_31 = Mem11[a2_29:word32]
	FreeMem(a2_29, d0_31)
	RemHead(dwArg04)
	a2_24 = d0_31
	branch d0_31 != 0<32> l00002392
l000023B2:
	FreeMem(dwArg04, 24<i32>)
l0000236E:
	DeletePrivatePool(dwArg04)
l000023C0:
	return
fn00002358_exit:


word32 fn000023C8()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00001E34
//      fn00001F48
// MayUse: 
// LiveOut: a5
// Trashed: CVZN a1 a4 a5 d0 d1
// Preserved: a6 a7
fn000023C8_entry:
l000023C8:
	SetSignal(0<i32>, 0x1000<32>)
	branch 0<32> == 0<32> l000023F2
l000023E6:
	a5 = fn0000131C(0x00000014<p32>)
l000023F2:
	return a5
fn000023C8_exit:


word32 fn000023F8(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & d1Out, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00001458
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: a0 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7 d2 d3 d4 d5 d6
fn000023F8_entry:
l000023F8:
	word32 d0_196
	word32 d1_142 = dwArg08
	word32 a0_20 = dwArg08
	word32 d3_166 = dwArg10
	branch dwArg0C != 0<32> l0000244E
l0000244E:
	branch dwArg04 - dwArg0C >=u 0<32> l00002458
l00002458:
	word32 d4_29 = 24<i32>
	word32 d6_30 = __rol(dwArg0C, 8<32>)
	branch SLICE(d6_30, byte, 0) != 0<8> l00002476
l00002462:
	d4_29 = 16<i32>
	d6_30 = __rol(d6_30, 8<32>)
	branch SLICE(d6_30, byte, 0) != 0<8> l00002476
l0000246A:
	d4_29 = 8<i32>
	d6_30 = __rol(d6_30, 8<32>)
	branch SLICE(d6_30, byte, 0) != 0<8> l00002476
l00002472:
	d4_29 = 0<i32>
	d6_30 = SEQ(SLICE(d6_30, word24, 8), SLICE(dwArg0C, byte, 0))
l00002476:
	word32 d4_61 = SEQ(SLICE(d4_29, word24, 8), SLICE(d4_29, byte, 0) + Mem17[0x00002BC4<p32> + (int32) (SLICE(d6_30, word16, 0) & 0xFF<16>):byte])
	word32 d5_63 = 32<i32> - d4_61
	branch d5_63 != 0<32> l00002496
l00002496:
	word32 d1_86
	word32 d2_322
	word32 d0_85 = fn000024FC(dwArg04 >>u d4_61, dwArg04 << d5_63 | dwArg08 >>u d4_61, dwArg0C << d5_63 | dwArg10 >>u d4_61, out d1_86, out d2_322)
	word32 d3_72 = dwArg10 << d5_63
	word32 d5_101 = __swap(d0_85)
	word32 d6_103 = __swap(d3_72)
	word32 d3_102 = d3_72 *u SLICE(d5_101, word16, 0)
	word32 d2_107 = __swap(d0_85 *u SLICE(d3_72, word16, 0))
	word16 v34_108 = SLICE(d2_107 + d3_102, word16, 0)
	word16 v35_109 = SLICE(d2_107, word16, 16)
	word32 d4_104 = d0_85 *u SLICE(d6_103, word16, 0)
	word16 v39_116 = SLICE(SEQ(v35_109, v34_108) + d4_104, word16, 0)
	word32 d6_82 = dwArg08 << d5_63
	word32 d2_124 = __swap(SEQ(v35_109, v39_116))
	word32 d5_105 = d5_101 *u SLICE(d6_103, word16, 0)
	a0_20 = d6_82
	d1_142 = d0_85
	word32 v48_134 = d1_86 - ((__swap(SEQ(SLICE(d3_102, word16, 16), 0<16>)) + __swap(SEQ(SLICE(d4_104, word16, 16), 0<16>))) + SEQ(SLICE(d5_105, word16, 16), (SLICE(d5_105, word16, 0) + (v34_108 <u 0<16>)) + (v39_116 <u 0<16>)))
	branch v48_134 <u 0<32> l000024F2
l000024EC:
	branch v48_134 != 0<32> l000024F4
l000024EE:
	branch d6_82 - d2_124 >=u 0<32> l000024F4
l000024F2:
	d1_142 = d0_85 - 1<32>
l0000248A:
	branch dwArg0C - dwArg04 <u 0<32> l00002492
l0000248E:
	branch dwArg10 - dwArg08 >u 0<32> l00002452
l00002492:
l00002452:
l00002410:
	branch dwArg04 - dwArg10 >=u 0<32> l00002422
l00002422:
	branch dwArg10 != 0<32> l0000242E
l00002426:
	d3_166 = (int32) (uint16) (1<i32> /u SLICE(dwArg10, uint16, 0))
l0000242E:
	word32 d1_175
	word32 d2_176
	word32 d0_174 = fn000024FC(0<i32>, dwArg04, d3_166, out d1_175, out d2_176)
	word32 d2_321
	word32 d1_320
	d1_142 = fn000024FC(d1_175, dwArg08, d2_176, out d1_320, out d2_321)
	d0_196 = d0_174
l00002414:
	word32 d2_319
	word32 d1_318
	d1_142 = fn000024FC(dwArg04, dwArg08, dwArg10, out d1_318, out d2_319)
l000024F4:
	d0_196 = 0<i32>
l000024F6:
	d1Out = d1_142
	a0Out = a0_20
	return d0_196
fn000023F8_exit:


word32 fn000024FC(word32 d0, word32 d1, word32 d2, ptr32 & d1Out, ptr32 & d2Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000023F8
//      fn00002648
// MayUse:  d0:[0..31] d1:[0..31] d2:[0..31]
// LiveOut: d0 d1 d2
// Trashed: CVZNX d0 d1 d2
// Preserved: a0 a1 a7 d3 d4 d5 d6 d7
fn000024FC_entry:
l000024FC:
	word32 d7_13 = d2
	branch d2 == 0<32> l00002516
l00002504:
	word32 d6_17 = d1
	word32 d5_19 = d0
	branch d0 != 0<32> l00002524
l00002524:
	word32 d2_22 = __swap(d2)
	branch SLICE(d2_22, word16, 0) != 0<16> l0000254C
l0000254C:
	byte bLoc26_362 = 0<8>
	word32 d0_44 = 0<i32>
	branch d2 < 0<32> l00002568
l0000255E:
	d6_17 = d6_17 * 2<32>
	d0_44 = SEQ(SLICE(d0_44, word16, 16), SLICE(d0_44, word16, 0) + 1<16>)
	d5_19 = d5_19 * 2<32> + (d6_17 <u 0<32>)
	d7_13 = d7_13 * 2<32>
	branch d7_13 > 0<32> l0000255E
l00002568:
	word16 v40_64 = SLICE(d0_44, word16, 0)
l0000256A:
	word32 d1_104
	word32 d2_73 = __swap(d5_19)
	word32 d3_74 = __swap(d7_13)
	branch SLICE(d2_73 - d3_74, word16, 0) != 0<16> l0000257C
l0000257C:
	d1_104 = __swap(SEQ(SLICE(__swap(SEQ((uint16) (d5_19 % SLICE(d3_74, uint16, 0)), (uint16) (d5_19 /u SLICE(d3_74, uint16, 0)))), word16, 16), 0<16>))
l00002576:
	d1_104 = 0xFFFF<32>
l00002586:
	word32 d6_98 = __swap(SEQ(SLICE(d6_17, word16, 16), 0<16>))
l0000258C:
	word32 d4_113 = __swap(d5_19 - __swap(d7_13) *u SLICE(d1_104, word16, 0))
	word16 wLoc22_442 = SLICE(dwLoc24, word16, 0)
	word32 d2_106 = d1_104 *u SLICE(d7_13, word16, 0)
	word32 d4_121 = SEQ(SLICE(d4_113, word16, 16), SLICE(d6_98, word16, 0))
	branch SLICE(d4_113, word16, 0) != 0<16> l000025AC
l000025A4:
	branch d2_106 - d4_121 <=u 0<32> l000025AC
l000025AC:
	word32 d6_133 = __swap(d1_104)
	word32 d3_140 = __swap(d6_133)
	word32 d4_142 = __swap(d7_13)
	word32 d5_141 = d7_13 *u SLICE(d3_140, word16, 0)
	word32 d6_146 = __swap(d6_133 *u SLICE(d7_13, word16, 0))
	word16 v54_147 = SLICE(d6_146 + d5_141, word16, 0)
	word16 v55_148 = SLICE(d6_146, word16, 16)
	word32 d2_143 = d6_133 *u SLICE(d4_142, word16, 0)
	word16 v58_155 = SLICE(SEQ(v55_148, v54_147) + d2_143, word16, 0)
	word32 d3_144 = d3_140 *u SLICE(d4_142, word16, 0)
	word32 d6_178 = d6_17 - __swap(SEQ(v55_148, v58_155))
	word32 d5_181 = d5_19 - ((__swap(SEQ(SLICE(d5_141, word16, 16), 0<16>)) + __swap(SEQ(SLICE(d2_143, word16, 16), 0<16>))) + SEQ(SLICE(d3_144, word16, 16), (SLICE(d3_144, word16, 0) + (v54_147 <u 0<16>)) + (v58_155 <u 0<16>))) - (d6_178 <u 0<32>)
	branch d5_181 >=u 0<32> l00002604
l000025EE:
	d6_178 = d6_178 + SEQ(SLICE(__swap(d7_13), word16, 16), 0<16>)
	d1_104 = d1_104 - 1<32>
	d5_181 = d5_181 + (d6_178 <u 0<32>) + __swap(SEQ(SLICE(d7_13, word16, 16), 0<16>))
l00002604:
	branch bLoc26_362 != 0<8> l00002620
l00002620:
	word32 d6_220 = __swap(SEQ(SLICE(d6_178, word16, 16), SLICE(d5_181, word16, 0)))
	d0 = SEQ(SLICE(dwLoc24, word16, 16), SLICE(d1_104, word16, 0))
	word32 d5_221 = __swap(d5_181)
	word16 v80_224 = SLICE(d7_13, word16, 16)
	branch v40_64 == 0<16> l0000263A
l00002630:
	word32 d7_230 = SEQ(v80_224, v40_64 - 1<16>)
l00002632:
	d5_221 = d5_221 >>u 1<32>
	word16 v84_241 = SLICE(d7_230, word16, 0)
	d6_220 = __rcr(d6_220, 1<32>, SLICE(cond(d5_221), bool, 4))
	d7_230 = SEQ(SLICE(d7_230, word16, 16), v84_241 - 1<i16>)
	branch v84_241 != 0<16> l00002632
l0000263A:
	d1 = d6_220
	d2 = d2_22
l0000260A:
	word32 d5_266 = __swap(d5_181)
	word32 d6_267 = __swap(d6_178)
	d5_19 = SEQ(SLICE(d5_266, word16, 16), SLICE(d6_267, word16, 0))
	d6_17 = SEQ(SLICE(d6_267, word16, 16), 0<16>)
	bLoc26_362 = true
	dwLoc24 = SEQ(SLICE(d1_104, word16, 0), wLoc22_442) (alias)
l000025A8:
	d1_104 = d1_104 - 1<32>
l0000252A:
	word32 d0_281 = __swap(d0)
	word32 d1_282 = __swap(d1)
	word32 d0_285 = SEQ(SLICE(d0_281, word16, 16), SLICE(d1_282, word16, 0))
	word32 d0_295 = SEQ((uint16) (d0_285 % SLICE(d2, uint16, 0)), SLICE(__swap(d1_282), word16, 0))
	d2 = SEQ(SLICE(__swap((uint32) (uint16) (d0_285 /u SLICE(d2, uint16, 0))), word16, 16), (uint16) (d0_295 /u SLICE(d2, uint16, 0)))
	d1 = __swap(SEQ((uint16) (d0_295 % SLICE(d2, uint16, 0)), 0<16>))
	d0 = d2
l0000250A:
	branch d1 == 0<32> l00002642
l00002510:
	branch d2 - d1 >u 0<32> l00002642
l00002516:
	d0 = fn00002AFA(d1, d2, d2, out d1)
l00002642:
	d1Out = d1
	d2Out = d2
	return d0
fn000024FC_exit:


word32 fn00002648(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00001458
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7 d2 d3 d4 d5 d6 d7
fn00002648_entry:
l00002648:
	word32 d1_171 = dwArg08
	word32 d3_202 = dwArg10
	branch dwArg0C != 0<32> l0000269A
l0000269A:
	branch dwArg04 - dwArg0C <u 0<32> l00002754
l000026A0:
	word32 d4_32 = 24<i32>
	word32 d6_33 = __rol(dwArg0C, 8<32>)
	branch SLICE(d6_33, byte, 0) != 0<8> l000026BE
l000026AA:
	d4_32 = 16<i32>
	d6_33 = __rol(d6_33, 8<32>)
	branch SLICE(d6_33, byte, 0) != 0<8> l000026BE
l000026B2:
	d4_32 = 8<i32>
	d6_33 = __rol(d6_33, 8<32>)
	branch SLICE(d6_33, byte, 0) != 0<8> l000026BE
l000026BA:
	d4_32 = 0<i32>
	d6_33 = SEQ(SLICE(d6_33, word24, 8), SLICE(dwArg0C, byte, 0))
l000026BE:
	word32 d4_64 = SEQ(SLICE(d4_32, word24, 8), SLICE(d4_32, byte, 0) + Mem20[0x00002BC4<p32> + (int32) (SLICE(d6_33, word16, 0) & 0xFF<16>):byte])
	word32 d5_66 = 32<i32> - d4_64
	branch d5_66 != 0<32> l000026E0
l000026E0:
	word32 d1_89
	word32 d2_90
	word32 d0_88 = fn000024FC(dwArg04 >>u d4_64, dwArg04 << d5_66 | dwArg08 >>u d4_64, dwArg0C << d5_66 | dwArg10 >>u d4_64, out d1_89, out d2_90)
	word32 d3_75 = dwArg10 << d5_66
	word32 d7_104 = __swap(d0_88)
	word32 d6_106 = __swap(d3_75)
	word32 d3_105 = d3_75 *u SLICE(d7_104, word16, 0)
	word32 d2_110 = __swap(d0_88 *u SLICE(d3_75, word16, 0))
	word16 v36_111 = SLICE(d2_110 + d3_105, word16, 0)
	word16 v37_112 = SLICE(d2_110, word16, 16)
	word32 d4_107 = d0_88 *u SLICE(d6_106, word16, 0)
	word16 v40_119 = SLICE(SEQ(v37_112, v36_111) + d4_107, word16, 0)
	word32 d2_127 = __swap(SEQ(v37_112, v40_119))
	word32 d7_108 = d7_104 *u SLICE(d6_106, word16, 0)
	word32 d6_85 = dwArg08 << d5_66
	word32 d3_135 = __swap(SEQ(SLICE(d3_105, word16, 16), 0<16>)) + __swap(SEQ(SLICE(d4_107, word16, 16), 0<16>)) + SEQ(SLICE(d7_108, word16, 16), (SLICE(d7_108, word16, 0) + (v36_111 <u 0<16>)) + (v40_119 <u 0<16>))
	word32 v49_137 = d1_89 - d2_127
	branch v49_137 <u 0<32> l0000273C
l00002736:
	branch v49_137 != 0<32> l00002740
l00002738:
	branch d6_85 - d3_135 >=u 0<32> l00002740
l0000273C:
	d3_135 = d3_135 - d3_75
	d2_127 = d2_127 - d2_90 - (d3_135 <u 0<32>)
l00002740:
	word32 d6_157 = d6_85 - d3_135
	d1_171 = d1_89 - d2_127 - (d6_157 <u 0<32>) << 32<i32> - d5_66 | d6_157 >>u d5_66
l000026D2:
	branch dwArg0C - dwArg04 <u 0<32> l000026DA
l000026D6:
	branch dwArg10 - dwArg08 >u 0<32> l00002754
l000026DA:
	d1_171 = dwArg08 - dwArg10
l00002660:
	branch dwArg04 - dwArg10 >=u 0<32> l00002672
l00002672:
	branch dwArg10 != 0<32> l0000267E
l00002676:
	d3_202 = (int32) (uint16) (1<i32> /u SLICE(dwArg10, uint16, 0))
l0000267E:
	word32 d1_211
	word32 d2_212
	fn000024FC(0<i32>, dwArg04, d3_202, out d1_211, out d2_212)
	word32 d2_355
	fn000024FC(d1_211, dwArg08, d2_212, out d1_171, out d2_355)
l00002664:
	word32 d2_354
	fn000024FC(dwArg04, dwArg08, dwArg10, out d1_171, out d2_354)
l00002754:
	return d1_171
fn00002648_exit:


void fn00002A44(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed: CVZN a0 a1 a4 a5 d0 d1
// Preserved: X a2 a7
fn00002A44_entry:
l00002A44:
	branch dwArg04 == 0<32> l00002A5C
l00002A5C:
	word32 a2_10 = Mem5[0x00002CF0<p32>:word32]
	branch a2_10 == 0<32> l00002A82
l00002A66:
	branch (Mem16[a2_10 + 24<i32>:word32] & 2<i32>) == 0<32> l00002A78
l00002A6E:
	word32 a0_101
	word32 a5_102
	fn00001F48(a2_10, out a0_101, out a5_102)
l00002A78:
	a2_10 = Mem40[a2_10 + 12<i32>:word32]
	branch a2_10 != 0<32> l00002A66
l00002A50:
	word32 a0_48
	word32 a5_51
	fn00001F48(dwArg04, out a0_48, out a5_51)
l00002A82:
	return
fn00002A44_exit:


void fn00002A88(word32 d2, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00001390
// MayUse:  d2:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut:
// Trashed: CVZNX d0 d1
// Preserved: a7
fn00002A88_entry:
l00002A88:
	branch dwArg08 < 0<32> l00002A9C
l00002A9C:
	word32 d1_13 = -dwArg08
	branch dwArg04 < 0<32> l00002AB2
l00002AB2:
	word32 d1_23
	fn00002AFA(-dwArg04, d1_13, d2, out d1_23)
	return
l00002AA2:
	word32 d1_34
	fn00002AFA(dwArg04, d1_13, d2, out d1_34)
	return
l00002A92:
	branch dwArg04 < 0<32> l00002AA8
l00002AA8:
	word32 d1_49
	fn00002AFA(-dwArg04, dwArg08, d2, out d1_49)
	return
l00002A96:
	word32 d1_60
	fn00002AFA(dwArg04, dwArg08, d2, out d1_60)
	return
fn00002A88_exit:


word32 fn00002AC8(word32 d2, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00001390
// MayUse:  d2:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: d0
// Trashed: CVZNX d0 d1
// Preserved: a7
fn00002AC8_entry:
l00002AC8:
	branch dwArg04 > 0<32> l00002AE8
l00002AE8:
	branch dwArg08 > 0<32> l00002AEA_thunk_fn00002AFA
l00002AEA_thunk_fn00002AFA:
	word32 d1_88
	return fn00002AFA(dwArg04, dwArg08, d2, out d1_88)
l00002AEC:
	word32 d1_89
	return -fn00002AFA(dwArg04, -dwArg08, d2, out d1_89)
l00002AD2:
	word32 d0_36 = -dwArg04
	branch dwArg08 > 0<32> l00002AE0
l00002AE0:
	word32 d1_43
	return -fn00002AFA(d0_36, dwArg08, d2, out d1_43)
l00002AD8:
	word32 d1_55
	return fn00002AFA(d0_36, -dwArg08, d2, out d1_55)
fn00002AC8_exit:


word32 fn00002AFA(word32 d0, word32 d1, word32 d2, ptr32 & d1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000024FC
//      fn00002A88
//      fn00002AC8
// MayUse:  d0:[0..31] d1:[0..31] d2:[0..31]
// LiveOut: d0 d1
// Trashed: CVZNX d0 d1
// Preserved: a7 d2 d3
fn00002AFA_entry:
l00002AFA:
	word32 d1_20 = __swap(d1)
	word16 v9_8 = SLICE(d1_20, word16, 0)
	word16 v10_9 = SLICE(d2, word16, 16)
	word32 d2_10 = SEQ(v10_9, v9_8)
	branch v9_8 != 0<16> l00002B20
l00002B20:
	word32 d3_16 = 16<i32>
	branch SLICE(d1_20, word16, 0) >=u 0x80<16> l00002B2E
l00002B2A:
	d1_20 = __rol(d1_20, 8<32>)
	d3_16 = 8<32>
l00002B2E:
	branch SLICE(d1_20, word16, 0) >=u 0x800<16> l00002B38
l00002B34:
	d1_20 = __rol(d1_20, 4<32>)
	d3_16 = SEQ(SLICE(d3_16, word16, 16), SLICE(d3_16, word16, 0) - 4<16>)
l00002B38:
	branch SLICE(d1_20, word16, 0) >=u 0x2000<16> l00002B42
l00002B3E:
	d1_20 = __rol(d1_20, 2<32>)
	d3_16 = SEQ(SLICE(d3_16, word16, 16), SLICE(d3_16, word16, 0) - 2<16>)
l00002B42:
	branch SLICE(d1_20, word16, 0) < 0<16> l00002B4A
l00002B46:
	d1_20 = __rol(d1_20, 1<32>)
	d3_16 = SEQ(SLICE(d3_16, word16, 16), SLICE(d3_16, word16, 0) - 1<16>)
l00002B4A:
	word32 d0_69 = d0 >>u d3_16
	word32 d2_73 = SEQ(SLICE(__swap(SEQ(v10_9, SLICE(d0, word16, 0))), word16, 16), 0<16>) >>u d3_16
	word16 v51_80 = SLICE(__swap(d3_16), word16, 16)
	uint16 v49_77 = (uint16) (d0_69 /u SLICE(d1_20, uint16, 0))
	word32 d1_88 = __swap(d1_20)
	word32 d3_100 = SEQ(v51_80, v49_77)
	word32 d0_106 = SEQ((uint16) (d0_69 % SLICE(d1_20, uint16, 0)), SLICE(d2_73, word16, 0)) - SEQ(SLICE(d2_73, word16, 16), v49_77) *u SLICE(d1_88, word16, 0)
	branch d0_106 >=u 0<32> l00002B6C
l00002B66:
	d3_100 = SEQ(v51_80, v49_77 - 1<16>)
	d0_106 = d0_106 + d1_88
l00002B6A:
	branch d0_106 >=u 0<32> l00002B6A
l00002B6C:
	d1Out = __swap(__rol(d0_106, __swap(d3_100)))
	return (uint32) (uint16) SLICE(d3_100, word16, 0)
l00002B02:
	word32 d0_132 = __swap(d0)
	word32 d1_133 = __swap(d1_20)
	word16 v13_135 = SLICE(d0_132, word16, 0)
	word32 d2_137 = SEQ(SLICE(__swap(d2_10), word16, 16), v13_135)
	branch v13_135 == 0<16> l00002B10
l00002B0C:
	uint16 v16_141 = (uint16) (d2_137 /u SLICE(d1_133, uint16, 0))
	d2_137 = SEQ((uint16) (d2_137 % SLICE(d1_133, uint16, 0)), v16_141)
	d0_132 = SEQ(SLICE(d0_132, word16, 16), v16_141)
l00002B10:
	word32 d0_148 = __swap(d0_132)
	word32 d2_152 = SEQ(SLICE(d2_137, word16, 16), SLICE(d0_148, word16, 0))
	uint16 v32_155 = (uint16) (d2_152 /u SLICE(d1_133, uint16, 0))
	d1Out = SEQ(SLICE(d1_133, word16, 16), SLICE(__swap(SEQ((uint16) (d2_152 % SLICE(d1_133, uint16, 0)), v32_155)), word16, 0))
	return SEQ(SLICE(d0_148, word16, 16), v32_155)
fn00002AFA_exit:


