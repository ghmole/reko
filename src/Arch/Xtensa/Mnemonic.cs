#region License
/* 
 * Copyright (C) 1999-2020 John Källén.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; see the file COPYING.  If not, write to
 * the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 */
#endregion

namespace Reko.Arch.Xtensa
{
    public enum Mnemonic
    {
        reserved = -2,
        invalid = -1,

        abs,
        add_n,
        addi,
        addi_n,
        addmi,
        add,
        addx2,
        addx4,
        addx8,
        and,
        andb,
        andbc,
        ball,
        bany,
        bbc,
        bbci,
        bbs,
        bbsi,
        beq,
        beqi,
        beqz,
        beqz_n,
        bge,
        bgei,
        bgeu,
        bgeui,
        bgez,
        blt,
        blti,
        bltu,
        bltui,
        bltz,
        bnall,
        bne,
        bnei,
        bnez,
        bnez_n,
        bnone,
        @break,
        call0,
        call4,
        call8,
        call12,
        callx0,
        callx4,
        callx8,
        callx12,
        cust0,
        cust1,
        extui,
        ill,
        isync,
        j,
        jx,
        l16si,
        l16ui,
        l32e,
        l32i,
        l32i_n,
        l32r,
        l8ui,
        ldpte,
        lsiu,
        lsx,
        max,
        maxu,
        memw,
        min,
        minu,
        mov_n,
        moveqz,
        movi,
        movi_n,
        movgez,
        movltz,
        movnez,
        mul16s,
        mul16u,
        mull,
        neg,
        nsa,
        nsau,
        or,
        orb,
        orbc,
        quos,
        quou,
        rems,
        remu,
        ret,
        ret_n,
        rfe,
        rfi,
        rsil,
        rsr,
        s16i,
        s32e,
        s32i,
        s32i_n,
        s32ri,
        s8i,
        sll,
        slli,
        sra,
        srai,
        src,
        srl,
        srli,
        ssai,
        ssa8l,
        ssi,
        ssl,
        ssr,
        sub,
        subx2,
        subx4,
        subx8,
        wsr,
        xor,
        xorb,

        add_s,
        floor_s,
        moveqz_s,
        mul_s,
        sub_s,
        ueq_s,
        movnez_s,
        movltz_s,
        movgez_s,
        ceil_s,
        entry,
        ufloat_s,
        movsp,
        xsr,
        rsync,
        syscall,
        any4,
        all4,
        any8,
        all8,
        clamps,
        dpfr,
        dpfw,
        dsync,
        ldinc,
        movf,
        movt,
        movf_s,
        movt_s,
        olt_s,
        ult_s,
        ole_s,
        ule_s,
        pitlb,
        oeq_s,
        ritlb1,
        round_s,
        trunc_s,
        rur,
        sext,
        ssa8b,
        madd_s,
        msub_s,
        un_s,
        waiti,
        l32ai,
        s32c1i,
        witlb,
        wur,

        mul_aa_ll,
        mul_aa_hl,
        mul_aa_lh,
        mul_aa_hh,

        mul_ad_ll,
        mul_ad_hl,
        mul_ad_lh,
        mul_ad_hh,

        mul_da_ll,
        mul_da_hl,
        mul_da_lh,
        mul_da_hh,

        mul_dd_ll,
        mul_dd_hl,
        mul_dd_lh,
        mul_dd_hh,

        mula_aa_ll,
        mula_aa_hl,
        mula_aa_lh,
        mula_aa_hh,

        mula_ad_ll,
        mula_ad_hl,
        mula_ad_lh,
        mula_ad_hh,

        mula_da_ll,
        mula_da_hl,
        mula_da_lh,
        mula_da_hh,

        mula_dd_ll,
        mula_dd_hl,
        mula_dd_lh,
        mula_dd_hh,

        mula_da_ll_lddec,
        mula_da_hl_lddec,
        mula_da_lh_lddec,
        mula_da_hh_lddec,

        mula_da_ll_ldinc,
        mula_da_hl_ldinc,
        mula_da_lh_ldinc,
        mula_da_hh_ldinc,

        muls_dd_ll,
        muls_dd_hl,
        muls_dd_lh,
        muls_dd_hh,

        mula_dd_ll_lddec,
        mula_dd_hl_lddec,
        mula_dd_lh_lddec,
        mula_dd_hh_lddec,

        muls_aa_ll,
        muls_aa_hl,
        muls_aa_lh,
        muls_aa_hh,

        muls_ad_ll,
        muls_ad_hl,
        muls_ad_lh,
        muls_ad_hh,

        muls_da_ll,
        muls_da_hl,
        muls_da_lh,
        muls_da_hh,

        umul_aa_ll,
        umul_aa_hl,
        umul_aa_lh,
        umul_aa_hh,


        muluh,
        mulsh,
        bf,
        bt,
        dhi,
        dhu,
        dhwb,
        dhwbi,
        dii,
        diu,
        dpfro,
        dpfwo,
        esync,
        excw,
        float_s,
        utrunc_s,
        iii,
        iiu,
        ipf,
        lddec,
        loop,
        iitlb,
        mov_s,
        abs_s,
        ihi,
        rdtlb0,
        rfr,
        neg_s,
        wfr,
        rotw,
        wdtlb,
        wer,
        rer,
        extw,
        retw,
        ritlb0,
        idtlb,
        pdtlb,
        rdtlb1,
        lsxu,
        ssx,
        ssxu,
        rfue,
        rfde,
        rfwo,
        rfwu,
        rfme,
        ipfl,
        ihu,
        dpfl,
        diwb,
        diwbi,
        loopnez,
        loopgtz,
    }
}