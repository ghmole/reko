// fn10000000
// Return size: 4
// Mem0:Mem
// fp:fp
// esp:esp
// ebx:ebx
// ebp:ebp
// esi:esi
// edi:edi
// di:di
// bl:bl
// SZO:SZO
// C:C
// Z:Z
// eax:eax
// SCZO:SCZO
// ecx:ecx
// bp:bp
// edx:edx
// cx:cx
// dx:dx
// ax:ax
// Top:Top
// return address size: 4
define fn10000000
fn10000000_entry:
	esp = fp
	Top = 0<i8>
	// succ:  l10000000
l10000000:
	esp = esp - 4<i32>
	Mem0[esp:word32] = ebx
	esp = esp - 4<i32>
	Mem0[esp:word32] = ebp
	esp = esp - 4<i32>
	Mem0[esp:word32] = esi
	esp = esp - 4<i32>
	Mem0[esp:word32] = edi
	di = Mem0[esp + 0x14<32>:word16]
	bl = bl ^ bl
	SZO = cond(bl)
	C = false
	SZO = cond(di & di)
	C = false
	branch Test(NE,Z) l10000021
	// succ:  l10000010 l10000021
l10000010:
	Mem0[0x1006B8E0<p32>:byte] = 0<8>
	call fn1000032A (retsize: 4;)
	edi = Mem0[esp:word32]
	esp = esp + 4<i32>
	esi = Mem0[esp:word32]
	esp = esp + 4<i32>
	ebp = Mem0[esp:word32]
	esp = esp + 4<i32>
	ebx = Mem0[esp:word32]
	esp = esp + 4<i32>
	return
	// succ:  fn10000000_exit
l10000021:
	eax = Mem0[esp + 0x1C<32>:word32]
	SCZO = cond(Mem0[eax:word32] - 0<32>)
	branch Test(NE,Z) l1000002C
	// succ:  l1000002A l1000002C
l1000002A:
	bl = 1<8>
	// succ:  l1000002C
l1000002C:
	ebp = Mem0[esp + 0x20<32>:word32]
	esp = esp - 4<i32>
	Mem0[esp:word32] = 0x1000A700<32>
	esp = esp - 4<i32>
	Mem0[esp:word32] = eax
	eax = Mem0[esp + 0x20<32>:word32]
	esp = esp - 4<i32>
	Mem0[esp:word32] = 0x3158<32>
	ecx = Mem0[eax + 0xD0<32>:word32]
	esp = esp - 4<i32>
	Mem0[esp:word32] = ecx
	esp = esp - 4<i32>
	Mem0[esp:word32] = eax
	esp = esp - 4<i32>
	Mem0[esp:word32] = ebp
	call fn100002EF (retsize: 4;)
	esi = eax
	esp = esp + 0x18<32>
	SCZO = cond(esp)
	SZO = cond(esi & esi)
	C = false
	branch Test(NE,Z) l10000061
	// succ:  l10000056 l10000061
l10000056:
	edi = Mem0[esp:word32]
	esp = esp + 4<i32>
	Mem0[ebp + 0<32>:word16] = 0xFF94<16>
	esi = Mem0[esp:word32]
	esp = esp + 4<i32>
	ebp = Mem0[esp:word32]
	esp = esp + 4<i32>
	ebx = Mem0[esp:word32]
	esp = esp + 4<i32>
	return
	// succ:  fn10000000_exit
l10000061:
	SCZO = cond(di - 1<16>)
	branch Test(NE,Z) l1000006D
	// succ:  l10000067 l1000006D
l10000067:
	Mem0[esi + 0x204<32>:byte] = bl
	// succ:  l1000006D
l1000006D:
	esp = esp - 4<i32>
	Mem0[esp:word32] = esi
	call fn10000251 (retsize: 4;)
	eax = Mem0[esi:word32]
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	esp = esp + 4<32>
	SCZO = cond(esp)
	SCZO = cond(Mem0[eax:word16] - bp)
	branch Test(NE,Z) l1000022E
	// succ:  l10000083 l1000022E
l10000083:
	SCZO = cond(di - bp)
	branch Test(LE,SZO) l1000020C
	// succ:  l1000008C l1000020C
l1000008C:
	SCZO = cond(di - 5<16>)
	branch Test(GT,SZO) l1000020C
	// succ:  l10000096 l1000020C
l10000096:
	SCZO = cond(di - 1<16>)
	branch Test(NE,Z) l100000BC
	// succ:  l100000A0 l100000BC
l100000A0:
	esp = esp - 4<i32>
	Mem0[esp:word32] = esi
	call fn10000251 (retsize: 4;)
	edx = Mem0[esi + 4<32>:word32]
	esp = esp + 4<32>
	SCZO = cond(esp)
	eax = Mem0[edx + 0xC<32>:word32]
	ecx = Mem0[eax:word32]
	Mem0[ecx:word32] = 1<32>
	goto l10000211
	// succ:  l10000211
l100000BC:
	SCZO = cond(di - 2<16>)
	branch Test(NE,Z) l10000132
	// succ:  l100000C2 l10000132
l100000C2:
	edx = Mem0[esi + 4<32>:word32]
	esp = esp - 4<i32>
	Mem0[esp:word32] = esi
	Mem0[edx + 0x30<32>:word32] = ebp
	call fn10000251 (retsize: 4;)
	eax = Mem0[esi + 4<32>:word32]
	esp = esp - 4<i32>
	Mem0[esp:word32] = 1<32>
	Mem0[eax + 0x30<32>:word32] = ebp
	eax = Mem0[esi + 4<32>:word32]
	eax = eax + 0x10<32>
	SCZO = cond(eax)
	cx = Mem0[eax + 2<32>:word16]
	Mem0[esi + 0xB4<32>:word16] = cx
	dx = Mem0[eax:word16]
	Mem0[esi + 0xB2<32>:word16] = dx
	cx = Mem0[eax + 6<32>:word16]
	Mem0[esi + 0xB8<32>:word16] = cx
	// succ:  l100000F8
l100000F8:
	dx = Mem0[eax + 4<32>:word16]
	Mem0[esi + 0xB6<32>:word16] = dx
	eax = Mem0[esi + 4<32>:word32]
	eax = eax + 0x10<32>
	SCZO = cond(eax)
	esp = esp - 4<i32>
	Mem0[esp:word32] = eax
	esp = esp - 4<i32>
	Mem0[esp:word32] = esi
	call fn100002BA (retsize: 4;)
	esp = esp - 4<i32>
	Mem0[esp:word32] = esi
	call fn100002AB (retsize: 4;)
	esp = esp - 4<i32>
	Mem0[esp:word32] = esi
	call fn100002CD (retsize: 4;)
	esp = esp - 4<i32>
	Mem0[esp:word32] = esi
	call fn10000260 (retsize: 4;)
	esp = esp + 0x1C<32>
	SCZO = cond(esp)
	goto l10000211
	// succ:  l10000211
l10000132:
	SCZO = cond(di - 3<16>)
	branch Test(NE,Z) l10000146
	// succ:  l10000138 l10000146
l10000138:
	esp = esp - 4<i32>
	Mem0[esp:word32] = esi
	call fn10000233 (retsize: 4;)
	esp = esp + 4<32>
	SCZO = cond(esp)
	goto l10000211
	// succ:  l10000211
l10000146:
	SCZO = cond(di - 4<16>)
	branch Test(NE,Z) l100000F8
	// succ:  l1000014C l100000F8
l1000014C:
	ecx = Mem0[esi + 4<32>:word32]
	SCZO = cond(Mem0[ecx + 0xE0<32>:word32] - ebp)
	bl = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l10000158
l10000158:
	esp = esp - 4<i32>
	Mem0[esp:word32] = esi
	call fn1000028D (retsize: 4;)
	eax = Mem0[esi:word32]
	esp = esp + 4<32>
	SCZO = cond(esp)
	SCZO = cond(Mem0[eax:word16] - bp)
	branch Test(EQ,Z) l1000016F
	// succ:  l10000168 l1000016F
l10000168:
	Mem0[esi + 0xAC<32>:byte] = 0<8>
	// succ:  l1000016F
l1000016F:
	SCZO = cond(Mem0[esi + 0xAD<32>:byte] - 1<8>)
	branch Test(NE,Z) l1000017D
	// succ:  l10000178 l1000017D
l10000178:
	SCZO = cond(Mem0[eax:word16] - bp)
	branch Test(EQ,Z) l10000158
	// succ:  l1000017D l10000158
l1000017D:
	SCZO = cond(Mem0[eax:word16] - bp)
	branch Test(NE,Z) l1000018B
	// succ:  l10000182 l1000018B
l10000182:
	esp = esp - 4<i32>
	Mem0[esp:word32] = esi
	call fn10000242 (retsize: 4;)
	esp = esp + 4<32>
	SCZO = cond(esp)
	// succ:  l1000018B
l1000018B:
	SCZO = cond(Mem0[esi + 0xAC<32>:byte] - 1<8>)
	branch Test(NE,Z) l100001B2
	// succ:  l10000194 l100001B2
l10000194:
	SZO = cond(bl & bl)
	C = false
	branch Test(EQ,Z) l10000211
	// succ:  l10000198 l10000211
l10000198:
	edx = Mem0[esi + 4<32>:word32]
	call Mem0[edx + 0xE0<32>:word32] (retsize: 4;)
	ecx = Mem0[esi:word32]
	Mem0[ecx:word16] = ax
	edx = Mem0[esi:word32]
	SCZO = cond(Mem0[edx:word16] - bp)
	branch Test(NE,Z) l10000211
	// succ:  l100001AD l10000211
l100001AD:
	goto l10000158
	// succ:  l10000158
l100001B2:
	esp = esp - 4<i32>
	Mem0[esp:word32] = esi
	call fn1000027E (retsize: 4;)
	esp = esp - 4<i32>
	Mem0[esp:word32] = esi
	call fn1000029C (retsize: 4;)
	eax = Mem0[esi + 4<32>:word32]
	esp = esp - 4<i32>
	Mem0[esp:word32] = ebp
	esp = esp - 4<i32>
	Mem0[esp:word32] = ebp
	esp = esp - 4<i32>
	Mem0[esp:word32] = ebp
	eax = eax + 0x34<32>
	SCZO = cond(eax)
	esp = esp - 4<i32>
	Mem0[esp:word32] = ebp
	esp = esp - 4<i32>
	Mem0[esp:word32] = eax
	call fn1000032B (retsize: 4;)
	ecx = Mem0[esi + 4<32>:word32]
	esp = esp - 4<i32>
	Mem0[esp:word32] = ebp
	esp = esp - 4<i32>
	Mem0[esp:word32] = ebp
	esp = esp - 4<i32>
	Mem0[esp:word32] = ebp
	ecx = ecx + 0x40<32>
	SCZO = cond(ecx)
	esp = esp - 4<i32>
	Mem0[esp:word32] = ebp
	esp = esp - 4<i32>
	Mem0[esp:word32] = ecx
	call fn1000032B (retsize: 4;)
	edx = Mem0[esi + 4<32>:word32]
	esp = esp - 4<i32>
	Mem0[esp:word32] = ebp
	esp = esp - 4<i32>
	Mem0[esp:word32] = ebp
	esp = esp - 4<i32>
	Mem0[esp:word32] = ebp
	edx = edx + 0x60<32>
	SCZO = cond(edx)
	esp = esp - 4<i32>
	Mem0[esp:word32] = ebp
	esp = esp - 4<i32>
	Mem0[esp:word32] = edx
	call fn1000032B (retsize: 4;)
	esp = esp + 0x44<32>
	SCZO = cond(esp)
	goto l10000211
	// succ:  l10000211
l1000020C:
	Mem0[eax:word16] = 0x8A6C<16>
	// succ:  l10000211
l10000211:
	eax = Mem0[esp + 0x1C<32>:word32]
	eax = Mem0[eax:word32]
	SCZO = cond(eax - ebp)
	branch Test(EQ,Z) l1000022E
	// succ:  l1000021B l1000022E
l1000021B:
	ecx = Mem0[esi + 4<32>:word32]
	esp = esp - 4<i32>
	Mem0[esp:word32] = eax
	edx = Mem0[ecx + 0xD0<32>:word32]
	esp = esp - 4<i32>
	Mem0[esp:word32] = edx
	call fn100002DC (retsize: 4;)
	esp = esp + 8<32>
	SCZO = cond(esp)
	// succ:  l1000022E
l1000022E:
	edi = Mem0[esp:word32]
	esp = esp + 4<i32>
	esi = Mem0[esp:word32]
	esp = esp + 4<i32>
	ebp = Mem0[esp:word32]
	esp = esp + 4<i32>
	ebx = Mem0[esp:word32]
	esp = esp + 4<i32>
	return
	// succ:  fn10000000_exit
fn10000000_exit:

// fn10000233
// Return size: 4
// Mem0:Mem
// fp:fp
// esp:esp
// eax:eax
// Top:Top
// return address size: 4
define fn10000233
fn10000233_entry:
	esp = fp
	Top = 0<i8>
	// succ:  l10000233
l10000233:
	Mem0[0x00123400<p32>:word32] = 0x10004AE0<32>
	eax = Mem0[esp + 4<32>:word32]
	return
	// succ:  fn10000233_exit
fn10000233_exit:

// fn10000242
// Return size: 4
// Mem0:Mem
// fp:fp
// esp:esp
// eax:eax
// Top:Top
// return address size: 4
define fn10000242
fn10000242_entry:
	esp = fp
	Top = 0<i8>
	// succ:  l10000242
l10000242:
	Mem0[0x00123400<p32>:word32] = 0x10004EA0<32>
	eax = Mem0[esp + 4<32>:word32]
	return
	// succ:  fn10000242_exit
fn10000242_exit:

// fn10000251
// Return size: 4
// Mem0:Mem
// fp:fp
// esp:esp
// eax:eax
// Top:Top
// return address size: 4
define fn10000251
fn10000251_entry:
	esp = fp
	Top = 0<i8>
	// succ:  l10000251
l10000251:
	Mem0[0x00123400<p32>:word32] = 0x1000022D<32>
	eax = Mem0[esp + 4<32>:word32]
	return
	// succ:  fn10000251_exit
fn10000251_exit:

// fn10000260
// Return size: 4
// Mem0:Mem
// fp:fp
// esp:esp
// eax:eax
// Top:Top
// return address size: 4
define fn10000260
fn10000260_entry:
	esp = fp
	Top = 0<i8>
	// succ:  l10000260
l10000260:
	Mem0[0x00123400<p32>:word32] = 0x10005A80<32>
	eax = Mem0[esp + 4<32>:word32]
	return
	// succ:  fn10000260_exit
fn10000260_exit:

// fn1000026F
// Return size: 4
// Mem0:Mem
// fp:fp
// esp:esp
// eax:eax
// Top:Top
// return address size: 4
define fn1000026F
fn1000026F_entry:
	esp = fp
	Top = 0<i8>
	// succ:  l1000026F
l1000026F:
	Mem0[0x00123400<p32>:word32] = 0x1000A450<32>
	eax = Mem0[esp + 4<32>:word32]
	return
	// succ:  fn1000026F_exit
fn1000026F_exit:

// fn1000027E
// Return size: 4
// Mem0:Mem
// fp:fp
// esp:esp
// eax:eax
// Top:Top
// return address size: 4
define fn1000027E
fn1000027E_entry:
	esp = fp
	Top = 0<i8>
	// succ:  l1000027E
l1000027E:
	Mem0[0x00123400<p32>:word32] = 0x1000A700<32>
	eax = Mem0[esp + 4<32>:word32]
	return
	// succ:  fn1000027E_exit
fn1000027E_exit:

// fn1000028D
// Return size: 4
// Mem0:Mem
// fp:fp
// esp:esp
// eax:eax
// Top:Top
// return address size: 4
define fn1000028D
fn1000028D_entry:
	esp = fp
	Top = 0<i8>
	// succ:  l1000028D
l1000028D:
	Mem0[0x00123400<p32>:word32] = 0x1000B860<32>
	eax = Mem0[esp + 4<32>:word32]
	return
	// succ:  fn1000028D_exit
fn1000028D_exit:

// fn1000029C
// Return size: 4
// Mem0:Mem
// fp:fp
// esp:esp
// eax:eax
// Top:Top
// return address size: 4
define fn1000029C
fn1000029C_entry:
	esp = fp
	Top = 0<i8>
	// succ:  l1000029C
l1000029C:
	Mem0[0x00123400<p32>:word32] = 0x1000D460<32>
	eax = Mem0[esp + 4<32>:word32]
	return
	// succ:  fn1000029C_exit
fn1000029C_exit:

// fn100002AB
// Return size: 4
// Mem0:Mem
// fp:fp
// esp:esp
// eax:eax
// Top:Top
// return address size: 4
define fn100002AB
fn100002AB_entry:
	esp = fp
	Top = 0<i8>
	// succ:  l100002AB
l100002AB:
	Mem0[0x00123400<p32>:word32] = 0x1000D510<32>
	eax = Mem0[esp + 4<32>:word32]
	return
	// succ:  fn100002AB_exit
fn100002AB_exit:

// fn100002BA
// Return size: 4
// Mem0:Mem
// fp:fp
// esp:esp
// eax:eax
// SCZO:SCZO
// Top:Top
// return address size: 4
define fn100002BA
fn100002BA_entry:
	esp = fp
	Top = 0<i8>
	// succ:  l100002BA
l100002BA:
	Mem0[0x00123400<p32>:word32] = 0x1000D580<32>
	eax = Mem0[esp + 8<32>:word32]
	eax = eax + Mem0[esp + 4<32>:word32]
	SCZO = cond(eax)
	return
	// succ:  fn100002BA_exit
fn100002BA_exit:

// fn100002CD
// Return size: 4
// Mem0:Mem
// fp:fp
// esp:esp
// eax:eax
// Top:Top
// return address size: 4
define fn100002CD
fn100002CD_entry:
	esp = fp
	Top = 0<i8>
	// succ:  l100002CD
l100002CD:
	Mem0[0x00123400<p32>:word32] = 0x1000D5E0<32>
	eax = Mem0[esp + 4<32>:word32]
	return
	// succ:  fn100002CD_exit
fn100002CD_exit:

// fn100002DC
// Return size: 4
// Mem0:Mem
// fp:fp
// esp:esp
// eax:eax
// SCZO:SCZO
// Top:Top
// return address size: 4
define fn100002DC
fn100002DC_entry:
	esp = fp
	Top = 0<i8>
	// succ:  l100002DC
l100002DC:
	Mem0[0x00123400<p32>:word32] = 0x10025160<32>
	eax = Mem0[esp + 8<32>:word32]
	eax = eax + Mem0[esp + 4<32>:word32]
	SCZO = cond(eax)
	return
	// succ:  fn100002DC_exit
fn100002DC_exit:

// fn100002EF
// Return size: 4
// Mem0:Mem
// fp:fp
// esp:esp
// edx:edx
// eax:eax
// Top:Top
// return address size: 4
define fn100002EF
fn100002EF_entry:
	esp = fp
	Top = 0<i8>
	// succ:  l100002EF
l100002EF:
	Mem0[0x00123400<p32>:word32] = 0x10000267<32>
	edx = Mem0[0x20000000<p32>:word32]
	eax = Mem0[esp + 4<32>:word32]
	Mem0[edx + 4<32>:word32] = eax
	eax = Mem0[esp + 8<32>:word32]
	Mem0[edx + 8<32>:word32] = eax
	eax = Mem0[esp + 0xC<32>:word32]
	Mem0[edx + 0xC<32>:word32] = eax
	eax = Mem0[esp + 0x10<32>:word32]
	Mem0[edx + 0x10<32>:word32] = eax
	eax = Mem0[esp + 0x14<32>:word32]
	Mem0[edx + 0x14<32>:word32] = eax
	eax = Mem0[esp + 0x18<32>:word32]
	Mem0[edx + 0x1C<32>:word32] = eax
	return
	// succ:  fn100002EF_exit
fn100002EF_exit:

// fn1000032A
// Return size: 4
// Mem0:Mem
// fp:fp
// esp:esp
// Top:Top
// return address size: 4
define fn1000032A
fn1000032A_entry:
	esp = fp
	Top = 0<i8>
	// succ:  l1000032A
l1000032A:
	return
	// succ:  fn1000032A_exit
fn1000032A_exit:

// fn1000032B
// Return size: 4
// Mem0:Mem
// fp:fp
// esp:esp
// edx:edx
// eax:eax
// Top:Top
// return address size: 4
define fn1000032B
fn1000032B_entry:
	esp = fp
	Top = 0<i8>
	// succ:  l1000032B
l1000032B:
	Mem0[0x00123400<p32>:word32] = 0x10032760<32>
	edx = Mem0[0x20000000<p32>:word32]
	eax = Mem0[esp + 4<32>:word32]
	Mem0[edx + 4<32>:word32] = eax
	eax = Mem0[esp + 8<32>:word32]
	Mem0[edx + 8<32>:word32] = eax
	eax = Mem0[esp + 0xC<32>:word32]
	Mem0[edx + 0xC<32>:word32] = eax
	eax = Mem0[esp + 0x10<32>:word32]
	Mem0[edx + 0x10<32>:word32] = eax
	eax = Mem0[esp + 0x14<32>:word32]
	Mem0[edx + 0x14<32>:word32] = eax
	return
	// succ:  fn1000032B_exit
fn1000032B_exit:

