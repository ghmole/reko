// fn0C00_0000
// Return size: 2
// Mem0:Mem
// fp:fp
// sp:sp
// ss:ss
// SCZO:SCZO
// return address size: 2
define fn0C00_0000
fn0C00_0000_entry:
	sp = fp
	// succ:  l0C00_0000
l0C00_0000:
	sp = sp - 2
	Mem0[ss:sp:word16] = 0x0320
	sp = sp - 2
	Mem0[ss:sp:word16] = 0x0300
	call fn0C00_0010 (retsize: 2;)
	call fn0C00_0037 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:

// fn0C00_0010
// Return size: 2
// Mem0:Mem
// fp:fp
// sp:sp
// bp:bp
// ss:ss
// bx:bx
// Top:Top
// ds:ds
// return address size: 2
define fn0C00_0010
fn0C00_0010_entry:
	sp = fp
	// succ:  l0C00_0010
l0C00_0010:
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	bx = Mem0[ss:bp + 0x0004:word16]
	Top = Top - 1
	ST[Top:real64] = Mem0[ds:bx:real64]
	ST[Top:real64] = ST[Top:real64] * ST[Top:real64]
	Top = Top - 1
	ST[Top:real64] = Mem0[ds:bx + 0x0008:real64]
	ST[Top:real64] = ST[Top:real64] * ST[Top:real64]
	ST[Top + 1:real64] = ST[Top + 1:real64] + ST[Top:real64]
	Top = Top + 1
	Top = Top - 1
	ST[Top:real64] = Mem0[ds:bx + 0x0010:real64]
	ST[Top:real64] = ST[Top:real64] * ST[Top:real64]
	ST[Top + 1:real64] = ST[Top + 1:real64] + ST[Top:real64]
	Top = Top + 1
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:real64] = ST[Top:real64]
	Top = Top + 1
	Top = Top - 1
	ST[Top:real64] = (real64) Mem0[ds:bx + 0x0020:int16]
	Mem0[ds:bx + 0x0028:real64] = ST[Top:real64]
	Top = Top + 1
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0C00_0010_exit
fn0C00_0010_exit:

// fn0C00_0037
// Return size: 2
// Mem0:Mem
// fp:fp
// sp:sp
// Top:Top
// ds:ds
// return address size: 2
define fn0C00_0037
fn0C00_0037_entry:
	sp = fp
	// succ:  l0C00_0037
l0C00_0037:
	Top = Top - 1
	ST[Top:real64] = 0.0
	Mem0[ds:0x0400:real64] = ST[Top:real64]
	Top = Top + 1
	Top = Top - 1
	ST[Top:real64] = 1.0
	Mem0[ds:0x0408:int32] = (int32) ST[Top:real64]
	Top = Top + 1
	return
	// succ:  fn0C00_0037_exit
fn0C00_0037_exit:

