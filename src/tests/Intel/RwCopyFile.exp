// fn0C00_0000
// Return size: 2
// Mem0:Mem
// fp:fp
// sp:sp
// bp:bp
// ss:ss
// SCZO:SCZO
// ax:ax
// dx:dx
// C:C
// ds:ds
// ds_dx:Sequence ds:dx
// al:al
// bx:bx
// cx:cx
// SZO:SZO
// Z:Z
// Top:Top
// return address size: 2
define fn0C00_0000
fn0C00_0000_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l0C00_0000
l0C00_0000:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 4<16>
	SCZO = cond(sp)
	ax = 0x3D00<16>
	dx = Mem0[ss:bp + 4<16>:word16]
	C = msdos_open_file(ds_dx, al, out ax)
	Mem0[ss:bp - 2<16>:word16] = ax
	ax = 0x3D01<16>
	dx = Mem0[ss:bp + 6<16>:word16]
	C = msdos_open_file(ds_dx, al, out ax)
	Mem0[ss:bp - 4<16>:word16] = ax
	goto l0C00_002A
	// succ:  l0C00_002A
l0C00_001F:
	bx = Mem0[ss:bp - 4<16>:word16]
	dx = 0x800<16>
	ax = 0x4000<16>
	C = msdos_write_file(bx, cx, ds_dx, out ax)
	// succ:  l0C00_002A
l0C00_002A:
	bx = Mem0[ss:bp - 2<16>:word16]
	dx = 0x800<16>
	cx = 0x800<16>
	ax = 0x3F00<16>
	C = msdos_read_file(bx, cx, ds_dx, out ax)
	branch Test(ULT,C) l0C00_003E
	// succ:  l0C00_003A l0C00_003E
l0C00_003A:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0C00_001F
	// succ:  l0C00_003E l0C00_001F
l0C00_003E:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
