// fn0C00_0000
// Return size: 2
// Mem0:Mem
// fp:fp
// sp:sp
// Top:Top
// ds:ds
// return address size: 2
define fn0C00_0000
fn0C00_0000_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l0C00_0000
l0C00_0000:
	Top = Top - 1<i8>
	ST[Top:real64] = Mem0[ds:0x300<16>:real64]
	Top = Top - 1<i8>
	ST[Top:real64] = Mem0[ds:0x310<16>:real64]
	ST[Top + 1<i8>:real64] = ST[Top + 1<i8>:real64] - ST[Top:real64]
	Top = Top + 1<i8>
	Mem0[ds:0x400<16>:real64] = ST[Top:real64]
	Top = Top + 1<i8>
	Top = Top - 1<i8>
	ST[Top:real64] = Mem0[ds:0x320<16>:real64]
	Top = Top - 1<i8>
	ST[Top:real64] = Mem0[ds:0x330<16>:real64]
	ST[Top + 1<i8>:real64] = ST[Top + 1<i8>:real64] / ST[Top:real64]
	Top = Top + 1<i8>
	Mem0[ds:0x338<16>:real64] = ST[Top:real64]
	Top = Top + 1<i8>
	Top = Top - 1<i8>
	ST[Top:real64] = Mem0[ds:0x328<16>:real64]
	Top = Top - 1<i8>
	ST[Top:real64] = Mem0[ds:0x320<16>:real64]
	ST[Top + 1<i8>:real64] = ST[Top + 1<i8>:real64] / ST[Top:real64]
	Top = Top + 1<i8>
	Mem0[ds:0x408<16>:real64] = ST[Top:real64]
	Top = Top + 1<i8>
	Top = Top - 1<i8>
	ST[Top:real64] = Mem0[ds:0x320<16>:real64]
	Top = Top - 1<i8>
	ST[Top:real64] = Mem0[ds:0x330<16>:real64]
	ST[Top + 1<i8>:real64] = ST[Top:real64] - ST[Top + 1<i8>:real64]
	Top = Top + 1<i8>
	Mem0[ds:0x338<16>:real64] = ST[Top:real64]
	Top = Top + 1<i8>
	Top = Top - 1<i8>
	ST[Top:real64] = Mem0[ds:0x320<16>:real64]
	Top = Top - 1<i8>
	ST[Top:real64] = Mem0[ds:0x330<16>:real64]
	ST[Top + 1<i8>:real64] = ST[Top:real64] / ST[Top + 1<i8>:real64]
	Top = Top + 1<i8>
	Mem0[ds:0x340<16>:real64] = ST[Top:real64]
	Top = Top + 1<i8>
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:

