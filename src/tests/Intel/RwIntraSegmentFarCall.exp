// fn0C00_0000
// Return size: 2
// Mem0:Mem
// fp:fp
// sp:sp
// ss:ss
// SCZO:SCZO
// Top:Top
// return address size: 2
define fn0C00_0000
fn0C00_0000_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l0C00_0000
l0C00_0000:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0xD00<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x300<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 1<16>
	sp = sp - 2<i16>
	call fn0C00_0020 (retsize: 2;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0xD00<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x304<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 2<16>
	call fn0C00_002E (retsize: 4;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
// fn0C00_0020
// Return size: 4
// Mem0:Mem
// fp:fp
// sp:sp
// bp:bp
// ss:ss
// es_bx:Sequence es:bx
// ax:ax
// bx:bx
// es:es
// v9:v9
// SCZO:SCZO
// Top:Top
// return address size: 4
define fn0C00_0020
fn0C00_0020_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l0C00_0020
l0C00_0020:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	es_bx = Mem0[ss:bp + 6<16>:segptr32]
	ax = Mem0[ss:bp + 0xA<16>:word16]
	v9 = Mem0[es:bx:word16] + ax
	Mem0[es:bx:word16] = v9
	SCZO = cond(v9)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn0C00_0020_exit
fn0C00_0020_exit:
// fn0C00_002E
// Return size: 4
// Mem0:Mem
// fp:fp
// sp:sp
// bp:bp
// ss:ss
// es_bx:Sequence es:bx
// ax:ax
// bx:bx
// es:es
// v9:v9
// SCZO:SCZO
// Top:Top
// return address size: 4
define fn0C00_002E
fn0C00_002E_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l0C00_002E
l0C00_002E:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	es_bx = Mem0[ss:bp + 6<16>:segptr32]
	ax = Mem0[ss:bp + 0xA<16>:word16]
	v9 = Mem0[es:bx:word16] - ax
	Mem0[es:bx:word16] = v9
	SCZO = cond(v9)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn0C00_002E_exit
fn0C00_002E_exit:
