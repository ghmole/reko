// fn10000000
// Return size: 4
// Mem0:Mem
// fp:fp
// esp:esp
// ebp:ebp
// eax:eax
// SCZO:SCZO
// CZ:CZ
// edx:edx
// ecx:ecx
// SZO:SZO
// C:C
// cl:cl
// Top:Top
// return address size: 4
define fn10000000
fn10000000_entry:
	esp = fp
	Top = 0<i8>
	// succ:  l10000000
l10000000:
	esp = esp - 4<i32>
	Mem0[esp:word32] = ebp
	ebp = esp
	eax = Mem0[ebp + 8<32>:word32]
	eax = eax + 0x7FF8FFFA<32>
	SCZO = cond(eax)
	Mem0[ebp - 4<32>:word32] = eax
	SCZO = cond(Mem0[ebp - 4<32>:word32] - 3<32>)
	branch Test(UGT,CZ) l10000054
	// succ:  l10000014 l10000054
l10000014:
	edx = Mem0[ebp - 4<32>:word32]
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	cl = Mem0[edx + 0x10000026<32>:byte]
	switch (Mem0[ebp - 4<32>:word32]) { l10000040 l10000036 l10000040 l1000004A }
	// succ:  l10000040 l10000036 l10000040 l1000004A
l10000036:
	eax = 0<32>
	goto l10000059
	// succ:  l10000059
l10000040:
	eax = 1<32>
	goto l10000059
	// succ:  l10000059
l1000004A:
	eax = 2<32>
	goto l10000059
	// succ:  l10000059
l10000054:
	eax = 0xFFFFFFFF<32>
	// succ:  l10000059
l10000059:
	Mem0[0x10000061<p32>:word32] = eax
	ebp = Mem0[esp:word32]
	esp = esp + 4<i32>
	return
	// succ:  fn10000000_exit
fn10000000_exit:

