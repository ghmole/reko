// fn0C00_0000
// Return size: 2
// Mem0:Mem
// fp:fp
// sp:sp
// eax:eax
// ds:ds
// si:si
// ax:ax
// Top:Top
// return address size: 2
define fn0C00_0000
fn0C00_0000_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l0C00_0000
l0C00_0000:
	eax = eax + eax * 4<32>
	Mem0[ds:0x2FC<16>:word32] = eax
	eax = Mem0[ds:si:word32]
	si = si + 4<i16>
	Mem0[ds:0x300<16>:word32] = eax
	eax = Mem0[ds:si:word32]
	si = si + 4<i16>
	Mem0[ds:0x304<16>:word32] = eax
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	Mem0[ds:0x308<16>:word16] = ax
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	Mem0[ds:0x30A<16>:word16] = ax
	call fn0C00_0026 (retsize: 2;)
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
// fn0C00_0026
// Return size: 2
// Mem0:Mem
// fp:fp
// sp:sp
// cx:cx
// ds:ds
// al:al
// di:di
// SCZO:SCZO
// es:es
// Z:Z
// Top:Top
// return address size: 2
define fn0C00_0026
fn0C00_0026_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l0C00_0026
l0C00_0026:
	cx = Mem0[ds:0x400<16>:word16]
	al = 0<8>
	di = Mem0[ds:0x402<16>:word16]
	// succ:  l0C00_0030
l0C00_0030:
	branch cx == 0<16> l0C00_0032
	// succ:  l0C00_0030_1 l0C00_0032
l0C00_0030_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 1<i16>
	cx = cx - 1<16>
	branch Test(NE,Z) l0C00_0030
	// succ:  l0C00_0032 l0C00_0030
l0C00_0032:
	Mem0[ds:0x404<16>:word16] = di
	return
	// succ:  fn0C00_0026_exit
fn0C00_0026_exit:
