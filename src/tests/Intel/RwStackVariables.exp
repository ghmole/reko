// fn0C00_0000
// Return size: 2
// Mem0:Mem
// fp:fp
// sp:sp
// bp:bp
// ss:ss
// es_bx:Sequence es:bx
// es:es
// bx:bx
// SCZO:SCZO
// ax:ax
// ds:ds
// Top:Top
// return address size: 2
define fn0C00_0000
fn0C00_0000_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l0C00_0000
l0C00_0000:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	es_bx = Mem0[ss:bp + 6<16>:segptr32]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	call fn0C00_0020 (retsize: 2;)
	sp = sp + 4<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 6<16>:segptr32]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	call fn0C00_002E (retsize: 2;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	Mem0[ds:0x200<16>:word16] = ax
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
// fn0C00_0020
// Return size: 2
// Mem0:Mem
// fp:fp
// sp:sp
// bp:bp
// ss:ss
// es_bx:Sequence es:bx
// ax:ax
// bx:bx
// es:es
// Top:Top
// return address size: 2
define fn0C00_0020
fn0C00_0020_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l0C00_0020
l0C00_0020:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	es_bx = Mem0[ss:bp + 4<16>:segptr32]
	ax = Mem0[es:bx + 4<16>:word16]
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn0C00_0020_exit
fn0C00_0020_exit:
// fn0C00_002E
// Return size: 2
// Mem0:Mem
// fp:fp
// sp:sp
// bp:bp
// ss:ss
// es_bx:Sequence es:bx
// ax:ax
// bx:bx
// es:es
// SCZO:SCZO
// Top:Top
// return address size: 2
define fn0C00_002E
fn0C00_002E_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l0C00_002E
l0C00_002E:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	es_bx = Mem0[ss:bp + 4<16>:segptr32]
	ax = Mem0[ss:bp + 8<16>:word16]
	ax = ax + Mem0[es:bx + 6<16>:word16]
	SCZO = cond(ax)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn0C00_002E_exit
fn0C00_002E_exit:
