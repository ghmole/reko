// fn0C00_0000
// Return size: 2
// Mem0:Mem
// fp:fp
// sp:sp
// ax:ax
// ds:ds
// al:al
// return address size: 2
define fn0C00_0000
fn0C00_0000_entry:
	sp = fp
	// succ:  l0C00_0000
l0C00_0000:
	ax = 0x0003
	call fn0C00_0015 (retsize: 2;)
	Mem0[ds:0x0300:byte] = al
	ax = 0x0003
	call fn0C00_0020 (retsize: 2;)
	Mem0[ds:0x0301:byte] = al
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:

// fn0C00_0015
// Return size: 2
// Mem0:Mem
// fp:fp
// sp:sp
// ax:ax
// SZO:SZO
// C:C
// Z:Z
// al:al
// return address size: 2
define fn0C00_0015
fn0C00_0015_entry:
	sp = fp
	// succ:  l0C00_0015
l0C00_0015:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0C00_001D
	// succ:  l0C00_0019 l0C00_001D
l0C00_0019:
	ax = ax - 0x0001
	SZO = cond(ax)
	// succ:  l0C00_001A_thunk_fn0C00_0020
l0C00_001A_thunk_fn0C00_0020:
	call fn0C00_0020 (retsize: 0;)
	return
	// succ:  fn0C00_0015_exit
l0C00_001D:
	al = 0x01
	return
	// succ:  fn0C00_0015_exit
fn0C00_0015_exit:

// fn0C00_0020
// Return size: 2
// Mem0:Mem
// fp:fp
// sp:sp
// ax:ax
// SZO:SZO
// C:C
// Z:Z
// al:al
// return address size: 2
define fn0C00_0020
fn0C00_0020_entry:
	sp = fp
	// succ:  l0C00_0020
l0C00_0020:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0C00_0028
	// succ:  l0C00_0024 l0C00_0028
l0C00_0024:
	ax = ax - 0x0001
	SZO = cond(ax)
	// succ:  l0C00_0025_thunk_fn0C00_0015
l0C00_0025_thunk_fn0C00_0015:
	call fn0C00_0015 (retsize: 0;)
	return
	// succ:  fn0C00_0020_exit
l0C00_0028:
	al = al ^ al
	SZO = cond(al)
	C = false
	return
	// succ:  fn0C00_0020_exit
fn0C00_0020_exit:

