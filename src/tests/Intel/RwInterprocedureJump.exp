// fn0C00_0000
// Return size: 2
// Mem0:Mem
// fp:fp
// sp:sp
// bx:bx
// Top:Top
// return address size: 2
define fn0C00_0000
fn0C00_0000_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l0C00_0000
l0C00_0000:
	bx = 0x1234<16>
	call fn0C00_000C (retsize: 2;)
	bx = 0x5678<16>
	call fn0C00_0018 (retsize: 2;)
	// succ:  l0C00_0009_thunk_fn0C00_000C
l0C00_0009_thunk_fn0C00_000C:
	call fn0C00_000C (retsize: 0;)
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
// fn0C00_000C
// Return size: 2
// Mem0:Mem
// fp:fp
// sp:sp
// bx:bx
// ds:ds
// SCZO:SCZO
// SZO:SZO
// ax:ax
// C:C
// Top:Top
// return address size: 2
define fn0C00_000C
fn0C00_000C_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l0C00_000C
l0C00_000C:
	SCZO = cond(Mem0[ds:bx:word16] - 0x7B<16>)
	branch Test(LE,SZO) l0C00_0014
	// succ:  l0C00_0011 l0C00_0014
l0C00_0011:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	return
	// succ:  fn0C00_000C_exit
l0C00_0014:
	ax = Mem0[ds:bx:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	return
	// succ:  fn0C00_000C_exit
fn0C00_000C_exit:
// fn0C00_0018
// Return size: 0
// Mem0:Mem
// fp:fp
// sp:sp
// bx:bx
// SCZO:SCZO
// ax:ax
// ds:ds
// SZO:SZO
// Top:Top
// return address size: 0
define fn0C00_0018
fn0C00_0018_entry:
	sp = fp
	Top = 0<i8>
	goto l0C00_0018
	// succ:  l0C00_0018
l0C00_0014_in_fn0C00_0018:
	ax = Mem0[ds:bx:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	return
	// succ:  fn0C00_0018_exit
l0C00_0018:
	bx = bx + 4<16>
	SCZO = cond(bx)
	goto l0C00_0014_in_fn0C00_0018
	// succ:  l0C00_0014_in_fn0C00_0018
fn0C00_0018_exit:
