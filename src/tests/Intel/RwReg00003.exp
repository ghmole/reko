// fn0C00_0000
// Return size: 2
// Mem0:Mem
// fp:fp
// sp:sp
// ecx:ecx
// SZO:SZO
// C:C
// ds:ds
// Top:Top
// return address size: 2
define fn0C00_0000
fn0C00_0000_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l0C00_0000
l0C00_0000:
	call fn0C00_000F (retsize: 2;)
	call fn0C00_0010 (retsize: 2;)
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	Mem0[ds:0x310<16>:word32] = ecx
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:

// fn0C00_000F
// Return size: 2
// Mem0:Mem
// fp:fp
// sp:sp
// Top:Top
// return address size: 2
define fn0C00_000F
fn0C00_000F_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l0C00_000F
l0C00_000F:
	return
	// succ:  fn0C00_000F_exit
fn0C00_000F_exit:

// fn0C00_0010
// Return size: 2
// Mem0:Mem
// fp:fp
// sp:sp
// ch:ch
// SZO:SZO
// C:C
// cl:cl
// ds:ds
// cx:cx
// Top:Top
// return address size: 2
define fn0C00_0010
fn0C00_0010_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l0C00_0010
l0C00_0010:
	ch = ch ^ ch
	SZO = cond(ch)
	C = false
	cl = Mem0[ds:0x300<16>:byte]
	branch cx == 0<16> l0C00_001E
	// succ:  l0C00_0018 l0C00_001E
l0C00_0018:
	Mem0[ds:0x302<16>:word16] = 0<16>
	// succ:  l0C00_001E
l0C00_001E:
	return
	// succ:  fn0C00_0010_exit
fn0C00_0010_exit:

