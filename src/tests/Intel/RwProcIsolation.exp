// fn0C00_0000
// Return size: 2
// Mem0:Mem
// fp:fp
// sp:sp
// di:di
// ss:ss
// ax:ax
// ds:ds
// Top:Top
// return address size: 2
define fn0C00_0000
fn0C00_0000_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l0C00_0000
l0C00_0000:
	call fn0C00_000F (retsize: 2;)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	ax = 0x100<16>
	call fn0C00_0014 (retsize: 2;)
	Mem0[ds:0x300<16>:word16] = ax
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	// succ:  l0C00_000E_thunk_fn0C00_000F
l0C00_000E_thunk_fn0C00_000F:
	call fn0C00_000F (retsize: 0;)
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
// fn0C00_000F
// Return size: 2
// Mem0:Mem
// fp:fp
// sp:sp
// di:di
// ds:ds
// Top:Top
// return address size: 2
define fn0C00_000F
fn0C00_000F_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l0C00_000F
l0C00_000F:
	Mem0[ds:di:word16] = 0<16>
	return
	// succ:  fn0C00_000F_exit
fn0C00_000F_exit:
// fn0C00_0014
// Return size: 2
// Mem0:Mem
// fp:fp
// sp:sp
// di:di
// SZO:SZO
// C:C
// ax:ax
// Top:Top
// return address size: 2
define fn0C00_0014
fn0C00_0014_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l0C00_0014
l0C00_0014:
	di = di ^ di
	SZO = cond(di)
	C = false
	ax = ax - 1<16>
	SZO = cond(ax)
	return
	// succ:  fn0C00_0014_exit
fn0C00_0014_exit:
