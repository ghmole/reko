// fn0C00_0000
// Return size: 2
// Mem0:Mem
// fp:fp
// sp:sp
// bx:bx
// ds:ds
// cx:cx
// SZO:SZO
// C:C
// si:si
// SCZO:SCZO
// di:di
// v11:v11
// es:es
// v13:v13
// v14:v14
// v15:v15
// v16:v16
// v17:v17
// v18:v18
// v19:v19
// Top:Top
// return address size: 2
define fn0C00_0000
fn0C00_0000_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l0C00_0000
l0C00_0000:
	bx = Mem0[ds:0x3E<16>:word16]
	cx = Mem0[ds:0x3E<16>:word16]
	bx = bx & 7<16>
	SZO = cond(bx)
	C = false
	si = Mem0[ds:0x40<16>:word16]
	bx = bx + bx
	SCZO = cond(bx)
	cx = cx + 7<16>
	SCZO = cond(cx)
	di = Mem0[ds:0x42<16>:word16]
	cx = cx >>u 3<16>
	SCZO = cond(cx)
	switch (bx) { l0C00_0020 l0C00_0027 l0C00_0026 l0C00_0025 l0C00_0024 l0C00_0023 l0C00_0022 l0C00_0021 }
	// succ:  l0C00_0020 l0C00_0027 l0C00_0026 l0C00_0025 l0C00_0024 l0C00_0023 l0C00_0022 l0C00_0021
l0C00_0020:
	v11 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v11
	si = si + 2<i16>
	di = di + 2<i16>
	// succ:  l0C00_0021
l0C00_0021:
	v15 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v15
	si = si + 2<i16>
	di = di + 2<i16>
	// succ:  l0C00_0022
l0C00_0022:
	v16 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v16
	si = si + 2<i16>
	di = di + 2<i16>
	// succ:  l0C00_0023
l0C00_0023:
	v17 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v17
	si = si + 2<i16>
	di = di + 2<i16>
	// succ:  l0C00_0024
l0C00_0024:
	v18 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v18
	si = si + 2<i16>
	di = di + 2<i16>
	// succ:  l0C00_0025
l0C00_0025:
	v14 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v14
	si = si + 2<i16>
	di = di + 2<i16>
	// succ:  l0C00_0026
l0C00_0026:
	v19 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v19
	si = si + 2<i16>
	di = di + 2<i16>
	// succ:  l0C00_0027
l0C00_0027:
	v13 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v13
	si = si + 2<i16>
	di = di + 2<i16>
	cx = cx - 1<16>
	SZO = cond(cx)
	branch Test(GT,SZO) l0C00_0020
	// succ:  l0C00_002B l0C00_0020
l0C00_002B:
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
