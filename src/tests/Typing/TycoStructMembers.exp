// Fn
// Return size: 0
define Fn
Fn_entry:
	// succ:  l1
l1:
	Mem0[ptr + 0xC8<32>:word32] = 0x1234<32>
	Mem0[ptr + 0xC<32>:word32] = 0x5678<32>
	b16 = Mem0[ptr + 0xE<32>:word16] | 0xFF<16>
Fn_exit:

// Equivalence classes ////////////
// Type Variables ////////////
globals_t: (in globals : (ptr32 (struct "Globals")))
  Class: Eq_1
  DataType: (ptr32 (struct))
  OrigDataType: (ptr32 (struct "Globals"))
T_2: (in 0x1234<32> : word32)
  Class: Eq_2
  DataType: word32
  OrigDataType: word32
T_3: (in ptr : word32)
  Class: Eq_3
  DataType: (ptr32 (struct (C T_10 t000C) (E T_13 t000E) (C8 T_6 t00C8)))
  OrigDataType: (ptr32 (struct (C T_10 t000C) (E T_13 t000E) (C8 T_6 t00C8)))
T_4: (in 0xC8<32> : word32)
  Class: Eq_4
  DataType: word32
  OrigDataType: word32
T_5: (in ptr + 0xC8<32> : word32)
  Class: Eq_5
  DataType: word32
  OrigDataType: word32
T_6: (in Mem0[ptr + 0xC8<32>:word32] : word32)
  Class: Eq_2
  DataType: word32
  OrigDataType: word32
T_7: (in 0x5678<32> : word32)
  Class: Eq_7
  DataType: word32
  OrigDataType: word32
T_8: (in 0xC<32> : word32)
  Class: Eq_8
  DataType: word32
  OrigDataType: word32
T_9: (in ptr + 0xC<32> : word32)
  Class: Eq_9
  DataType: ptr32
  OrigDataType: ptr32
T_10: (in Mem0[ptr + 0xC<32>:word32] : word32)
  Class: Eq_7
  DataType: word32
  OrigDataType: word32
T_11: (in 0xE<32> : word32)
  Class: Eq_11
  DataType: word32
  OrigDataType: word32
T_12: (in ptr + 0xE<32> : word32)
  Class: Eq_12
  DataType: ptr32
  OrigDataType: ptr32
T_13: (in Mem0[ptr + 0xE<32>:word16] : word16)
  Class: Eq_13
  DataType: cui16
  OrigDataType: cui16
T_14: (in 0xFF<16> : word16)
  Class: Eq_14
  DataType: cui16
  OrigDataType: cui16
T_15: (in Mem0[ptr + 0xE<32>:word16] | 0xFF<16> : word16)
  Class: Eq_15
  DataType: cui16
  OrigDataType: cui16
T_16: (in b16 : word16)
  Class: Eq_15
  DataType: cui16
  OrigDataType: cui16
