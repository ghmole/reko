// TreeFindMock
// Return size: 0
void TreeFindMock()
TreeFindMock_entry:
	// succ:  l0
l0:
	// succ:  l0_seek
l0_seek:
	branch t == 0<32> l5_found
	// succ:  l1 l5_found
l1:
	word32 vv_5 = Mem0[t + 0<32>:word32]
	branch v == vv_5 l5_found
	// succ:  l2 l5_found
l2:
	branch v < vv_5 l4_lt
	// succ:  l3 l4_lt
l3:
	t = Mem0[t + 8<32>:word32]
	goto l0_seek
	// succ:  l0_seek
l4_lt:
	t = Mem0[t + 4<32>:word32]
	// succ:  l5_found
l5_found:
	return t
	// succ:  TreeFindMock_exit
TreeFindMock_exit:

// Equivalence classes ////////////
Eq_1: (ptr32 (struct "Globals"))
	globals_t (in globals : (ptr32 (struct "Globals")))
Eq_2: (ptr32 (struct (0 T_8 t0000) (4 T_14 t0004) (8 T_17 t0008)))
	T_2 (in t : word32)
	T_3 (in 0<32> : word32)
	T_14 (in Mem0[t + 4<32>:word32] : word32)
	T_17 (in Mem0[t + 8<32>:word32] : word32)
Eq_4: bool
	T_4 (in t == 0<32> : bool)
Eq_5: int32
	T_5 (in vv_5 : word32)
	T_8 (in Mem0[t + 0<32>:word32] : word32)
	T_9 (in v : word32)
Eq_6: word32
	T_6 (in 0<32> : word32)
Eq_7: word32
	T_7 (in t + 0<32> : word32)
Eq_10: bool
	T_10 (in v == vv_5 : bool)
Eq_11: bool
	T_11 (in v < vv_5 : bool)
Eq_12: word32
	T_12 (in 4<32> : word32)
Eq_13: ptr32
	T_13 (in t + 4<32> : word32)
Eq_15: word32
	T_15 (in 8<32> : word32)
Eq_16: ptr32
	T_16 (in t + 8<32> : word32)
// Type Variables ////////////
globals_t: (in globals : (ptr32 (struct "Globals")))
  Class: Eq_1
  DataType: (ptr32 (struct "Globals"))
  OrigDataType: (ptr32 (struct "Globals"))
T_2: (in t : word32)
  Class: Eq_2
  DataType: (ptr32 (struct (0 T_8 t0000) (4 T_14 t0004) (8 T_17 t0008)))
  OrigDataType: (ptr32 (struct (0 T_8 t0000) (4 T_14 t0004) (8 T_17 t0008)))
T_3: (in 0<32> : word32)
  Class: Eq_2
  DataType: (ptr32 (struct (0 T_8 t0000) (4 T_14 t0004) (8 T_17 t0008)))
  OrigDataType: word32
T_4: (in t == 0<32> : bool)
  Class: Eq_4
  DataType: bool
  OrigDataType: bool
T_5: (in vv_5 : word32)
  Class: Eq_5
  DataType: int32
  OrigDataType: int32
T_6: (in 0<32> : word32)
  Class: Eq_6
  DataType: word32
  OrigDataType: word32
T_7: (in t + 0<32> : word32)
  Class: Eq_7
  DataType: word32
  OrigDataType: word32
T_8: (in Mem0[t + 0<32>:word32] : word32)
  Class: Eq_5
  DataType: int32
  OrigDataType: word32
T_9: (in v : word32)
  Class: Eq_5
  DataType: int32
  OrigDataType: int32
T_10: (in v == vv_5 : bool)
  Class: Eq_10
  DataType: bool
  OrigDataType: bool
T_11: (in v < vv_5 : bool)
  Class: Eq_11
  DataType: bool
  OrigDataType: bool
T_12: (in 4<32> : word32)
  Class: Eq_12
  DataType: word32
  OrigDataType: word32
T_13: (in t + 4<32> : word32)
  Class: Eq_13
  DataType: ptr32
  OrigDataType: ptr32
T_14: (in Mem0[t + 4<32>:word32] : word32)
  Class: Eq_2
  DataType: (ptr32 (struct (0 T_8 t0000) (4 T_14 t0004) (8 T_17 t0008)))
  OrigDataType: word32
T_15: (in 8<32> : word32)
  Class: Eq_15
  DataType: word32
  OrigDataType: word32
T_16: (in t + 8<32> : word32)
  Class: Eq_16
  DataType: ptr32
  OrigDataType: ptr32
T_17: (in Mem0[t + 8<32>:word32] : word32)
  Class: Eq_2
  DataType: (ptr32 (struct (0 T_8 t0000) (4 T_14 t0004) (8 T_17 t0008)))
  OrigDataType: word32
