// CmpMock
// Return size: 0
define CmpMock
CmpMock_entry:
	// succ:  l1
l1:
	r63 = fp
	Z = cond(r0 - 0<i32>)
	branch Test(EQ,Z) skip
	// succ:  l2 skip
l2:
	r0 = r0 + r1
	// succ:  skip
skip:
	Mem0[0x10003000<32>:word32] = r0
	return
	// succ:  CmpMock_exit
CmpMock_exit:

globals_t (in globals : (ptr32 (struct "Globals")))
	trait_primitive((ptr32 (struct "Globals")))
	trait_mem(T_11, 10003000)
T_2 (in fp : ptr32)
	trait_primitive(ptr32)
T_3 (in r63 : word32)
	trait_primitive(word32)
	trait_primitive(ptr32)
	trait_equal(T_2)
T_4 (in r0 : word32)
	trait_primitive(word32)
	trait_primitive(word32)
	trait_primitive(word32)
	trait_primitive(word32)
	trait_primitive(word32)
	trait_equal(T_13)
T_5 (in 0<i32> : int32)
	trait_primitive(int32)
T_6 (in r0 - 0<i32> : word32)
	trait_primitive(word32)
T_7 (in cond(r0 - 0<i32>) : byte)
	trait_primitive(byte)
T_8 (in Z : bool)
	trait_primitive(bool)
	trait_primitive(byte)
	trait_equal(T_7)
	trait_primitive(bool)
T_9 (in Test(EQ,Z) : bool)
	trait_primitive(bool)
T_10 (in 0x10003000<32> : word32)
	trait_primitive(word32)
	trait_mem(T_11, 0)
T_11 (in Mem0[0x10003000<32>:word32] : word32)
	trait_primitive(word32)
	trait_equal(T_4)
T_12 (in r1 : word32)
	trait_primitive(word32)
T_13 (in r0 + r1 : word32)
	trait_primitive(word32)
