// SegmentedMemoryPointerMock
// Return size: 0
define SegmentedMemoryPointerMock
SegmentedMemoryPointerMock_entry:
	// succ:  l1
l1:
	si = 1<16>
	ax = Mem0[cs:si + 0<16>:word16]
	si2 = 5<16>
	ax = Mem0[cs:si2 + 0<16>:word16]
	Mem0[cs:0x1234<16>:word16] = ax
	Mem0[cs:si + 2<16>:word16] = ax
SegmentedMemoryPointerMock_exit:

globals_t (in globals : (ptr32 (struct "Globals")))
	trait_primitive((ptr32 (struct "Globals")))
T_2 (in 1<16> : word16)
	trait_primitive(word16)
T_3 (in si : word16)
	trait_primitive(word16)
	trait_primitive(word16)
	trait_equal(T_2)
	trait_primitive(word16)
	trait_mem(T_4:T_7, 0)
	trait_primitive(word16)
	trait_mem(T_4:T_18, 2)
T_4 (in cs : selector)
	trait_primitive(selector)
	trait_primitive(selector)
	trait_primitive(selector)
	trait_mem(T_15, 1234)
	trait_primitive(selector)
T_5 (in 0<16> : word16)
	trait_primitive(word16)
T_6 (in si + 0<16> : word16)
	trait_primitive(word16)
T_7 (in Mem0[cs:si + 0<16>:word16] : word16)
	trait_primitive(word16)
T_8 (in ax : word16)
	trait_primitive(word16)
	trait_primitive(word16)
	trait_equal(T_7)
	trait_primitive(word16)
	trait_primitive(word16)
	trait_equal(T_13)
	trait_primitive(word16)
	trait_primitive(word16)
T_9 (in 5<16> : word16)
	trait_primitive(word16)
T_10 (in si2 : word16)
	trait_primitive(word16)
	trait_primitive(word16)
	trait_equal(T_9)
	trait_primitive(word16)
	trait_mem(T_4:T_13, 0)
T_11 (in 0<16> : word16)
	trait_primitive(word16)
T_12 (in si2 + 0<16> : word16)
	trait_primitive(word16)
T_13 (in Mem0[cs:si2 + 0<16>:word16] : word16)
	trait_primitive(word16)
T_14 (in 0x1234<16> : word16)
	trait_primitive(word16)
	trait_mem(T_4:T_15, 0)
T_15 (in Mem0[cs:0x1234<16>:word16] : word16)
	trait_primitive(word16)
	trait_equal(T_8)
T_16 (in 2<16> : word16)
	trait_primitive(word16)
T_17 (in si + 2<16> : word16)
	trait_primitive(word16)
T_18 (in Mem0[cs:si + 2<16>:word16] : word16)
	trait_primitive(word16)
	trait_equal(T_8)
