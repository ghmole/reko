// fn0C00_0000 /////////////////////
	LiveOut:  
	BitsUsed:  ds:[0..15] es:[0..15]
	Trashed:   SCZO ax di si Top
	Preserved: sp
// fn0C00_0000
define fn0C00_0000
fn0C00_0000_entry:
	def ds
	def es
l0C00_0000:
	ds_si_6 = SEQ(ds, 0x1234<16>) (alias)
	call fn0C00_000B (retsize: 2;)
		uses: es:es,Sequence ds:si:ds_si_6
		defs: ax:ax_8
	Mem14[ds:0x4321<16>:word16] = ax_8
	return
fn0C00_0000_exit:
// fn0C00_000B /////////////////////
	LiveOut:   ax:[0..15]
	BitsUsed:  es:[0..15] Sequence ds:si:[0..31]
	Trashed:   SCZO ax di Top
	Preserved: si sp
// fn0C00_000B
define fn0C00_000B
fn0C00_000B_entry:
	def ds_si
	si = SLICE(ds_si, word16, 0)
	ds = SLICE(ds_si, selector, 16)
	def es
l0C00_000B:
	call fn0C00_0026 (retsize: 2;)
		uses: Sequence ds:si:ds_si
		defs: ax:ax_10
	Mem12[ds:ax_10:word16] = 0<16>
	Mem13[ds:ax_10 + 2<16>:word16] = 0<16>
	Mem14[ds:ax_10 + 4<16>:word16] = 0<16>
	call fn0C00_0035 (retsize: 2;)
		uses: di:ax_10,es:es,Sequence ds:si:ds_si
	ax_23 = si
	return
fn0C00_000B_exit:
	use ax_23
// fn0C00_0026 /////////////////////
	LiveOut:   ax:[0..15]
	BitsUsed:  Sequence ds:si:[0..31]
	Trashed:   ax Top
	Preserved: si sp
// fn0C00_0026
define fn0C00_0026
fn0C00_0026_entry:
	def ds_si
	si = SLICE(ds_si, word16, 0)
l0C00_0026:
	Mem9[ds_si:word16] = 1<16>
	Mem10[ds_si + 2<16>:word16] = 0<16>
	ax_11 = si + 4<16>
	return
fn0C00_0026_exit:
	use ax_11
// fn0C00_0035 /////////////////////
	LiveOut:  
	BitsUsed:  di:[0..15] es:[0..15] Sequence ds:si:[0..31]
	Trashed:   SCZO ax di Top
	Preserved: sp
// fn0C00_0035
define fn0C00_0035
fn0C00_0035_entry:
	def ds_si
	def di
	si = SLICE(ds_si, word16, 0)
	def es
l0C00_0035:
	v7_10 = Mem7[ds_si + 2<16>:word16] + 1<16>
	Mem11[ds_si + 2<16>:word16] = v7_10
	ax_12 = Mem11[ds_si + 2<16>:word16]
	di_15 = si + 4<16> + (ax_12 << 2<16>)
	Mem20[es:di_15:word16] = di
	return
fn0C00_0035_exit:
