fp:fp
    def:  def fp
    uses: r63_2 = fp
          r63_6 = fp - 4<32>
          r63_8 = fp - 8<32>
          r63_10 = fp - 8<32> + 8<i32>
          Mem9[ecx_5 + 8<32>:word32](Mem17[fp - 8<32>:int32], Mem18[fp - 8<32> + 4<i32>:int32])
          Mem9[ecx_5 + 8<32>:word32](Mem17[fp - 8<32>:int32], Mem18[fp - 8<32> + 4<i32>:int32])
r63_2: orig: r63
    def:  r63_2 = fp
Mem0:Mem
    def:  def Mem0
    uses: ecx_5 = Mem0[eax_4:word32]
eax_4: orig: eax
    def:  eax_4 = dwArg04_14
    uses: ecx_5 = Mem0[eax_4:word32]
ecx_5: orig: ecx
    def:  ecx_5 = Mem0[eax_4:word32]
    uses: Mem9[ecx_5 + 8<32>:word32](Mem17[fp - 8<32>:int32], Mem18[fp - 8<32> + 4<i32>:int32])
r63_6: orig: r63
    def:  r63_6 = fp - 4<32>
Mem7: orig: Mem0
r63_8: orig: r63
    def:  r63_8 = fp - 8<32>
Mem9: orig: Mem0
    uses: Mem9[ecx_5 + 8<32>:word32](Mem17[fp - 8<32>:int32], Mem18[fp - 8<32> + 4<i32>:int32])
r63_10: orig: r63
    def:  r63_10 = fp - 8<32> + 8<i32>
eax_11: orig: eax
    def:  eax_11 = <invalid>
ecx_12: orig: ecx
    def:  ecx_12 = <invalid>
a:Stack +0004
    def:  def a
    uses: dwArg04_14 = a
dwArg04_14: orig: dwArg04
    def:  dwArg04_14 = a
    uses: eax_4 = dwArg04_14
dwLoc04_15: orig: dwLoc04
    def:  dwLoc04_15 = 0xB<32>
dwLoc08_16: orig: dwLoc08
    def:  dwLoc08_16 = 0xA<32>
Mem17: orig: Mem0
    uses: Mem9[ecx_5 + 8<32>:word32](Mem17[fp - 8<32>:int32], Mem18[fp - 8<32> + 4<i32>:int32])
Mem18: orig: Mem0
    uses: Mem9[ecx_5 + 8<32>:word32](Mem17[fp - 8<32>:int32], Mem18[fp - 8<32> + 4<i32>:int32])
// ProcedureBuilder
// Return size: 0
void ProcedureBuilder(struct <anonymous> * a)
ProcedureBuilder_entry:
	def fp
	def Mem0
	def a
	dwArg04_14 = a
	// succ:  l1
l1:
	r63_2 = fp
	eax_4 = dwArg04_14
	ecx_5 = Mem0[eax_4:word32]
	r63_6 = fp - 4<32>
	dwLoc04_15 = 0xB<32>
	r63_8 = fp - 8<32>
	dwLoc08_16 = 0xA<32>
	Mem9[ecx_5 + 8<32>:word32](Mem17[fp - 8<32>:int32], Mem18[fp - 8<32> + 4<i32>:int32])
	ecx_12 = <invalid>
	eax_11 = <invalid>
	r63_10 = fp - 8<32> + 8<i32>
	return
	// succ:  ProcedureBuilder_exit
ProcedureBuilder_exit:

