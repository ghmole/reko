// void fn0C00_0000(Register word16 si, Register word16 di, Register selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1
// MayUse:  di:[0..15] ds:[0..15] si:[0..15]
// LiveOut:
// Trashed: SCZO ax di esi Top
// Preserved: sp
// fn0C00_0000
// Return size: 0
void fn0C00_0000(word16 si, word16 di, selector ds)
fn0C00_0000_entry:
	// succ:  l0C00_0000
l0C00_0000:
	fn0C00_0004(si, di, ds)
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:

// void fn0C00_0004(Register word16 si, Register word16 di, Register selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1
// MayUse:  di:[0..15] ds:[0..15] si:[0..15]
// LiveOut:
// Trashed: SCZO ax di esi Top
// Preserved: sp
// fn0C00_0004
// Return size: 0
void fn0C00_0004(word16 si, word16 di, selector ds)
fn0C00_0004_entry:
	// succ:  l0C00_0004
l0C00_0004:
	fn0C00_001D(ds)
	Mem14[ds:0x1444<16>:word16] = Mem7[ds:0x1444<16>:word16] + Mem7[ds:si + 0x28<16>:word16]
	branch Mem14[ds:di + 0x30<16>:byte] == 0<8> l0C00_001C
	// succ:  l0C00_0016 l0C00_001C
l0C00_0016:
	fn0C00_0004(si, Mem14[ds:di + 0x30<16>:word16], ds)
	// succ:  l0C00_001C
l0C00_001C:
	return
	// succ:  fn0C00_0004_exit
fn0C00_0004_exit:

// void fn0C00_001D(Register selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1
// MayUse:  ds:[0..15]
// LiveOut:
// Trashed: esi Top
// Preserved: sp
// fn0C00_001D
// Return size: 0
void fn0C00_001D(selector ds)
fn0C00_001D_entry:
	// succ:  l0C00_001D
l0C00_001D:
	Mem6[ds:0x4321<16>:word32] = 0x1234<32>
	return
	// succ:  fn0C00_001D_exit
fn0C00_001D_exit:

