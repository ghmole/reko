r1:r1
    def:  def r1
    uses: r3_r1_11 = SEQ(r3, r1)
r2:r2
    def:  def r2
    uses: r4_r2_12 = SEQ(r4, r2)
r1_3: orig: r1
    def:  r1_3 = SLICE(r3_r1_13, word32, 0) (alias)
    uses: Mem9[0x444400<32>:word32] = r1_3
SZC_4: orig: SZC
r3:r3
    def:  def r3
    uses: r3_r1_11 = SEQ(r3, r1)
r4:r4
    def:  def r4
    uses: r4_r2_12 = SEQ(r4, r2)
C_7: orig: C
r3_8: orig: r3
    def:  r3_8 = SLICE(r3_r1_13, word32, 32) (alias)
    uses: Mem10[0x444404<32>:word32] = r3_8
Mem9: orig: Mem0
    def:  Mem9[0x444400<32>:word32] = r1_3
Mem10: orig: Mem0
    def:  Mem10[0x444404<32>:word32] = r3_8
r3_r1_11: orig: r3_r1
    def:  r3_r1_11 = SEQ(r3, r1)
    uses: r3_r1_13 = r3_r1_11 + r4_r2_12
r4_r2_12: orig: r4_r2
    def:  r4_r2_12 = SEQ(r4, r2)
    uses: r3_r1_13 = r3_r1_11 + r4_r2_12
r3_r1_13: orig: r3_r1
    def:  r3_r1_13 = r3_r1_11 + r4_r2_12
    uses: r1_3 = SLICE(r3_r1_13, word32, 0) (alias)
          r3_8 = SLICE(r3_r1_13, word32, 32) (alias)
// main
// Return size: 0
define main
main_entry:
	def r1
	def r2
	def r3
	def r4
	// succ:  l1
l1:
	r3_r1_11 = SEQ(r3, r1)
	r4_r2_12 = SEQ(r4, r2)
	r3_r1_13 = r3_r1_11 + r4_r2_12
	r1_3 = SLICE(r3_r1_13, word32, 0) (alias)
	r3_8 = SLICE(r3_r1_13, word32, 32) (alias)
	Mem9[0x444400<32>:word32] = r1_3
	Mem10[0x444404<32>:word32] = r3_8
	return
	// succ:  main_exit
main_exit:

