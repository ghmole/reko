// void fn00400000(Stack word32 dwArg00, Stack word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1
// MayUse:  Stack +0000:[0..31] Stack +0004:[0..31]
// LiveOut:
// Trashed: SCZO eax ecx edx
// Preserved: esp
// fn00400000
// Return size: 0
void fn00400000(word32 dwArg00, word32 dwArg04)
fn00400000_entry:
	// succ:  l00400000
l00400000:
	Mem11[0x02000000<p32>:word32] = fn0040000C(dwArg00, dwArg04)
	return
	// succ:  fn00400000_exit
fn00400000_exit:

// Register word32 fn0040000C(Stack word32 dwArg04, Stack word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx
// Preserved: ebp ebx edi esi esp
// fn0040000C
// Return size: 0
word32 fn0040000C(word32 dwArg04, word32 dwArg08)
fn0040000C_entry:
	// succ:  l0040000C
l0040000C:
	word32 ecx_11 = Mem7[dwArg04 + 0x3C<32>:word32] + dwArg04
	word32 esi_19 = (word32) Mem18[ecx_11 + 6<32>:word16]
	word32 edx_20 = 0<32>
	word32 eax_23 = (word32) Mem7[ecx_11 + 0x14<32>:word16] + 0x12<32> + ecx_11
	branch esi_19 <=u 0<32> l0040004B
	// succ:  l0040002E l0040004B
l0040002E:
	// succ:  l00400031
l00400031:
	word32 ecx_31 = Mem22[eax_23 + 0xC<32>:word32]
	branch dwArg08 <u ecx_31 l00400041
	// succ:  l00400038 l00400041
l00400038:
	branch dwArg08 <u Mem22[eax_23 + 8<32>:word32] + ecx_31 l0040004D
	// succ:  l00400041 l0040004D
l00400041:
	edx_20 = edx_20 + 1<32>
	eax_23 = eax_23 + 0x28<32>
	branch edx_20 <u esi_19 l00400031
	// succ:  l0040004B l00400031
l0040004B:
	eax_23 = 0<32>
	// succ:  l0040004D
l0040004D:
	return eax_23
	// succ:  fn0040000C_exit
fn0040000C_exit:

