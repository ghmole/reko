= fn0C00_0000 ========================
fp:fp
    def:  def fp
    uses: sp_2 = fp
sp_2: orig: sp
    def:  sp_2 = fp
    uses: call fn0C00_000C (retsize: 2;)	uses: ax:ax_6,sp:sp_2,Top:Top_3	defs: ax:ax_8,sp:sp_7,Top:Top_9
Top_3: orig: Top
    def:  Top_3 = 0
    uses: call fn0C00_000C (retsize: 2;)	uses: ax:ax_6,sp:sp_2,Top:Top_3	defs: ax:ax_8,sp:sp_7,Top:Top_9
ds:ds
    def:  def ds
    uses: ax_6 = Mem0[ds:0x0300:word16]
          Mem10[ds:0x0302:word16] = ax_8
Mem0:Mem
    def:  def Mem0
    uses: ax_6 = Mem0[ds:0x0300:word16]
ax_6: orig: ax
    def:  ax_6 = Mem0[ds:0x0300:word16]
    uses: call fn0C00_000C (retsize: 2;)	uses: ax:ax_6,sp:sp_2,Top:Top_3	defs: ax:ax_8,sp:sp_7,Top:Top_9
sp_7: orig: sp
    def:  call fn0C00_000C (retsize: 2;)	uses: ax:ax_6,sp:sp_2,Top:Top_3	defs: ax:ax_8,sp:sp_7,Top:Top_9
ax_8: orig: ax
    def:  call fn0C00_000C (retsize: 2;)	uses: ax:ax_6,sp:sp_2,Top:Top_3	defs: ax:ax_8,sp:sp_7,Top:Top_9
    uses: Mem10[ds:0x0302:word16] = ax_8
Top_9: orig: Top
    def:  call fn0C00_000C (retsize: 2;)	uses: ax:ax_6,sp:sp_2,Top:Top_3	defs: ax:ax_8,sp:sp_7,Top:Top_9
Mem10: orig: Mem0
    def:  Mem10[ds:0x0302:word16] = ax_8
// fn0C00_0000
// Return size: 2
define fn0C00_0000
fn0C00_0000_entry:
	def fp
	def ds
	def Mem0
	// succ:  l0C00_0000
l0C00_0000:
	sp_2 = fp
	Top_3 = 0
	ax_6 = Mem0[ds:0x0300:word16]
	call fn0C00_000C (retsize: 2;)
		uses: ax:ax_6,sp:sp_2,Top:Top_3
		defs: ax:ax_8,sp:sp_7,Top:Top_9
	Mem10[ds:0x0302:word16] = ax_8
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:

fp:fp
    def:  def fp
    uses: sp_2 = fp
          call fn0C00_000C (retsize: 2;)	uses: ax:ax_6,sp:fp,Top:0	defs: ax:ax_8,sp:sp_7,Top:Top_9
sp_2: orig: sp
    def:  sp_2 = fp
Top_3: orig: Top
    def:  Top_3 = 0
ds:ds
    def:  def ds
    uses: ax_6 = Mem0[ds:0x0300:word16]
          Mem10[ds:0x0302:word16] = ax_8
Mem0:Mem
    def:  def Mem0
    uses: ax_6 = Mem0[ds:0x0300:word16]
ax_6: orig: ax
    def:  ax_6 = Mem0[ds:0x0300:word16]
    uses: call fn0C00_000C (retsize: 2;)	uses: ax:ax_6,sp:fp,Top:0	defs: ax:ax_8,sp:sp_7,Top:Top_9
sp_7: orig: sp
    def:  call fn0C00_000C (retsize: 2;)	uses: ax:ax_6,sp:fp,Top:0	defs: ax:ax_8,sp:sp_7,Top:Top_9
ax_8: orig: ax
    def:  call fn0C00_000C (retsize: 2;)	uses: ax:ax_6,sp:fp,Top:0	defs: ax:ax_8,sp:sp_7,Top:Top_9
    uses: Mem10[ds:0x0302:word16] = ax_8
Top_9: orig: Top
    def:  call fn0C00_000C (retsize: 2;)	uses: ax:ax_6,sp:fp,Top:0	defs: ax:ax_8,sp:sp_7,Top:Top_9
Mem10: orig: Mem0
    def:  Mem10[ds:0x0302:word16] = ax_8
// fn0C00_0000
// Return size: 2
define fn0C00_0000
fn0C00_0000_entry:
	def fp
	def ds
	def Mem0
	// succ:  l0C00_0000
l0C00_0000:
	sp_2 = fp
	Top_3 = 0
	ax_6 = Mem0[ds:0x0300:word16]
	call fn0C00_000C (retsize: 2;)
		uses: ax:ax_6,sp:fp,Top:0
		defs: ax:ax_8,sp:sp_7,Top:Top_9
	Mem10[ds:0x0302:word16] = ax_8
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
= fn0C00_000C ========================
fp:fp
    def:  def fp
    uses: sp_2 = fp
sp_2: orig: sp
    def:  sp_2 = fp
Top_3: orig: Top
    def:  Top_3 = 0
ax:ax
    def:  def ax
    uses: ax_5 = ax | ax
          ax_5 = ax | ax
ax_5: orig: ax
    def:  ax_5 = ax | ax
    uses: SZO_6 = cond(ax_5)
          ax_9 = ax_5 - 0x0001
          branch ax_5 != 0x0000 l0C00_0014
SZO_6: orig: SZO
    def:  SZO_6 = cond(ax_5)
    uses: Z_8 = SLICE(SZO_6, bool, 2) (alias)
C_7: orig: C
    def:  C_7 = false
Z_8: orig: Z
    def:  Z_8 = SLICE(SZO_6, bool, 2) (alias)
ax_9: orig: ax
    def:  ax_9 = ax_5 - 0x0001
    uses: SZO_10 = cond(ax_9)
          ax_12 = ax_9 - 0x0001
          branch ax_9 != 0x0000 l0C00_001B
SZO_10: orig: SZO
    def:  SZO_10 = cond(ax_9)
    uses: Z_11 = SLICE(SZO_10, bool, 2) (alias)
Z_11: orig: Z
    def:  Z_11 = SLICE(SZO_10, bool, 2) (alias)
ax_12: orig: ax
    def:  ax_12 = ax_9 - 0x0001
    uses: SZO_13 = cond(ax_12)
          branch ax_12 != 0x0000 l0C00_0022
SZO_13: orig: SZO
    def:  SZO_13 = cond(ax_12)
    uses: Z_14 = SLICE(SZO_13, bool, 2) (alias)
Z_14: orig: Z
    def:  Z_14 = SLICE(SZO_13, bool, 2) (alias)
ax_15: orig: ax
    def:  ax_15 = 0x0000
    uses: SZO_16 = cond(ax_15)
SZO_16: orig: SZO
    def:  SZO_16 = cond(ax_15)
C_17: orig: C
    def:  C_17 = false
ax_18: orig: ax
    def:  ax_18 = 0x0127
ax_19: orig: ax
    def:  ax_19 = 0x0125
ax_20: orig: ax
    def:  ax_20 = 0x0123
// fn0C00_000C
// Return size: 2
define fn0C00_000C
fn0C00_000C_entry:
	def fp
	def ax
	// succ:  l0C00_000C
l0C00_000C:
	sp_2 = fp
	Top_3 = 0
	ax_5 = ax | ax
	SZO_6 = cond(ax_5)
	Z_8 = SLICE(SZO_6, bool, 2) (alias)
	C_7 = false
	branch ax_5 != 0x0000 l0C00_0014
	// succ:  l0C00_0010 l0C00_0014
l0C00_0010:
	ax_20 = 0x0123
	return
	// succ:  fn0C00_000C_exit
l0C00_0014:
	ax_9 = ax_5 - 0x0001
	SZO_10 = cond(ax_9)
	Z_11 = SLICE(SZO_10, bool, 2) (alias)
	branch ax_9 != 0x0000 l0C00_001B
	// succ:  l0C00_0017 l0C00_001B
l0C00_0017:
	ax_19 = 0x0125
	return
	// succ:  fn0C00_000C_exit
l0C00_001B:
	ax_12 = ax_9 - 0x0001
	SZO_13 = cond(ax_12)
	Z_14 = SLICE(SZO_13, bool, 2) (alias)
	branch ax_12 != 0x0000 l0C00_0022
	// succ:  l0C00_001E l0C00_0022
l0C00_001E:
	ax_18 = 0x0127
	return
	// succ:  fn0C00_000C_exit
l0C00_0022:
	ax_15 = 0x0000
	SZO_16 = cond(ax_15)
	C_17 = false
	return
	// succ:  fn0C00_000C_exit
fn0C00_000C_exit:

fp:fp
    def:  def fp
    uses: sp_2 = fp
sp_2: orig: sp
    def:  sp_2 = fp
Top_3: orig: Top
    def:  Top_3 = 0
ax:ax
    def:  def ax
    uses: ax_5 = ax
          SZO_6 = cond(ax)
          branch ax != 0x0000 l0C00_0014
          ax_9 = ax - 0x0001
          SZO_10 = cond(ax - 0x0001)
          branch ax != 0x0001 l0C00_001B
          ax_12 = ax - 0x0002
          SZO_13 = cond(ax - 0x0002)
          branch ax != 0x0002 l0C00_0022
ax_5: orig: ax
    def:  ax_5 = ax
SZO_6: orig: SZO
    def:  SZO_6 = cond(ax)
    uses: Z_8 = SLICE(SZO_6, bool, 2) (alias)
C_7: orig: C
    def:  C_7 = false
Z_8: orig: Z
    def:  Z_8 = SLICE(SZO_6, bool, 2) (alias)
ax_9: orig: ax
    def:  ax_9 = ax - 0x0001
SZO_10: orig: SZO
    def:  SZO_10 = cond(ax - 0x0001)
    uses: Z_11 = SLICE(SZO_10, bool, 2) (alias)
Z_11: orig: Z
    def:  Z_11 = SLICE(SZO_10, bool, 2) (alias)
ax_12: orig: ax
    def:  ax_12 = ax - 0x0002
SZO_13: orig: SZO
    def:  SZO_13 = cond(ax - 0x0002)
    uses: Z_14 = SLICE(SZO_13, bool, 2) (alias)
Z_14: orig: Z
    def:  Z_14 = SLICE(SZO_13, bool, 2) (alias)
ax_15: orig: ax
    def:  ax_15 = 0x0000
SZO_16: orig: SZO
    def:  SZO_16 = cond(0x0000)
C_17: orig: C
    def:  C_17 = false
ax_18: orig: ax
    def:  ax_18 = 0x0127
ax_19: orig: ax
    def:  ax_19 = 0x0125
ax_20: orig: ax
    def:  ax_20 = 0x0123
// fn0C00_000C
// Return size: 2
define fn0C00_000C
fn0C00_000C_entry:
	def fp
	def ax
	// succ:  l0C00_000C
l0C00_000C:
	sp_2 = fp
	Top_3 = 0
	ax_5 = ax
	SZO_6 = cond(ax)
	Z_8 = SLICE(SZO_6, bool, 2) (alias)
	C_7 = false
	branch ax != 0x0000 l0C00_0014
	// succ:  l0C00_0010 l0C00_0014
l0C00_0010:
	ax_20 = 0x0123
	return
	// succ:  fn0C00_000C_exit
l0C00_0014:
	ax_9 = ax - 0x0001
	SZO_10 = cond(ax - 0x0001)
	Z_11 = SLICE(SZO_10, bool, 2) (alias)
	branch ax != 0x0001 l0C00_001B
	// succ:  l0C00_0017 l0C00_001B
l0C00_0017:
	ax_19 = 0x0125
	return
	// succ:  fn0C00_000C_exit
l0C00_001B:
	ax_12 = ax - 0x0002
	SZO_13 = cond(ax - 0x0002)
	Z_14 = SLICE(SZO_13, bool, 2) (alias)
	branch ax != 0x0002 l0C00_0022
	// succ:  l0C00_001E l0C00_0022
l0C00_001E:
	ax_18 = 0x0127
	return
	// succ:  fn0C00_000C_exit
l0C00_0022:
	ax_15 = 0x0000
	SZO_16 = cond(0x0000)
	C_17 = false
	return
	// succ:  fn0C00_000C_exit
fn0C00_000C_exit:
