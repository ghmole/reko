// fn0C00_0000 /////////////////////
	LiveOut:  
	BitsUsed:  ds:[0..15] eax:[0..31] es:[0..15] si:[0..15]
	Trashed:   SCZO cx di eax si Top
	Preserved: sp
// fn0C00_0000
define fn0C00_0000
fn0C00_0000_entry:
	def eax
	def ds
	def si
	def es
l0C00_0000:
	Mem7[ds:0x2FC<16>:word32] = eax * 5<32>
	eax_9 = Mem7[ds:si:word32]
	Mem11[ds:0x300<16>:word32] = eax_9
	eax_12 = Mem11[ds:si + 4<i16>:word32]
	Mem14[ds:0x304<16>:word32] = eax_12
	ax_15 = Mem14[ds:si + 8<i16>:word16]
	Mem17[ds:0x308<16>:word16] = ax_15
	ax_18 = Mem17[ds:si + 10<i16>:word16]
	Mem20[ds:0x30A<16>:word16] = ax_18
	call fn0C00_0026 (retsize: 2;)
		uses: ds:ds,es:es
	return
fn0C00_0000_exit:
// fn0C00_0026 /////////////////////
	LiveOut:  
	BitsUsed:  ds:[0..15] es:[0..15]
	Trashed:   SCZO al cx di Top
	Preserved: sp
// fn0C00_0026
define fn0C00_0026
fn0C00_0026_entry:
	def ds
	def Mem0
	def es
l0C00_0026:
	cx_6 = Mem0[ds:0x400<16>:word16]
	di_8 = Mem0[ds:0x402<16>:word16]
l0C00_0030:
	di_12 = PHI((di_8, l0C00_0026), (di_15, l0C00_0030_1))
	cx_9 = PHI((cx_6, l0C00_0026), (cx_16, l0C00_0030_1))
	branch cx_9 == 0<16> l0C00_0032
l0C00_0030_1:
	di_15 = di_12 + 1<i16>
	cx_16 = cx_9 - 1<16>
	branch Mem0[es:di_12:byte] != 0<8> l0C00_0030
l0C00_0032:
	di_18 = PHI((di_12, l0C00_0030), (di_15, l0C00_0030_1))
	Mem21[ds:0x404<16>:word16] = di_18
	return
fn0C00_0026_exit:
