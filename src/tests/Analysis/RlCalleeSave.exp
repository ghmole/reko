// fn0C00_0000 /////////////////////
	LiveOut:  
	BitsUsed:  ds:[0..15]
	Trashed:   ax si Top
	Preserved: sp
// fn0C00_0000
define fn0C00_0000
fn0C00_0000_entry:
	def ds
l0C00_0000:
	call fn0C00_000D (retsize: 2;)
		uses: ds:ds
		defs: ax:ax_5
	ds_si_7 = SEQ(ds, ax_5) (alias)
	call fn0C00_001A (retsize: 2;)
		uses: Sequence ds:si:ds_si_7
		defs: ax:ax_8
	Mem9[ds:0x400<16>:word16] = ax_8
	return
fn0C00_0000_exit:
// fn0C00_000D /////////////////////
	LiveOut:   ax:[0..15]
	BitsUsed:  ds:[0..15]
	Trashed:   ax Top
	Preserved: si sp
// fn0C00_000D
define fn0C00_000D
fn0C00_000D_entry:
	def ds
l0C00_000D:
	si_9 = Mem7[ds:0x7A<16>:word16]
	si_10 = Mem7[ds:si_9 + 4<16>:word16]
	ax_11 = si_10 + 8<16>
	return
fn0C00_000D_exit:
	use ax_11
// fn0C00_001A /////////////////////
	LiveOut:   ax:[0..15]
	BitsUsed:  Sequence ds:si:[0..31]
	Trashed:   ax Top
	Preserved: si sp
// fn0C00_001A
define fn0C00_001A
fn0C00_001A_entry:
	def ds_si
l0C00_001A:
	ax_9 = Mem7[ds_si:word16]
	return
fn0C00_001A_exit:
	use ax_9
