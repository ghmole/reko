fp:fp
    def:  def fp
    uses: sp_2 = fp
sp_2: orig: sp
    def:  sp_2 = fp
    uses: use sp_2
ds:ds
    def:  def ds
    uses: bx_4 = fn0C00_000C(ds)
          Mem5[ds:0x0300:word16] = bx_4
          Mem6[ds:0x0302:byte] = 0x00
bx_4: orig: bx
    def:  bx_4 = fn0C00_000C(ds)
    uses: Mem5[ds:0x0300:word16] = bx_4
          use bx_4
Mem5: orig: Mem0
    def:  Mem5[ds:0x0300:word16] = bx_4
Mem6: orig: Mem0
    def:  Mem6[ds:0x0302:byte] = 0x00
// fn0C00_0000
// Return size: 0
void fn0C00_0000(selector ds)
fn0C00_0000_entry:
	def fp
	def ds
	// succ:  l0C00_0000
l0C00_0000:
	sp_2 = fp
	bx_4 = fn0C00_000C(ds)
	Mem5[ds:0x0300:word16] = bx_4
	Mem6[ds:0x0302:byte] = 0x00
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
	use bx_4
	use sp_2

fp:fp
    def:  def fp
    uses: sp_2 = fp
sp_2: orig: sp
    def:  sp_2 = fp
    uses: sp_54 = PHI(sp_2, sp_55)
ds:ds
    def:  def ds
    uses: ds_24 = PHI(ds, ds_25)
          es_5 = ds
          SCZO_15 = cond(0x00 - Mem0[ds:di_13:byte])
          branch 0x00 != Mem0[ds:di_13:byte] l0C00_0019
cx_4: orig: cx
es_5: orig: es
    def:  es_5 = ds
di_6: orig: di
    def:  di_6 = 0x7E0F
    uses: di_13 = PHI(di_6, di_16)
cx_7: orig: cx
    def:  cx_7 = 0x000C
    uses: cx_11 = PHI(cx_7, cx_17)
al_8: orig: al
SZO_9: orig: SZO
    def:  SZO_9 = cond(0x00)
    uses: Z_19 = PHI(SZO_9, SCZO_15)
C_10: orig: C
cx_11: orig: cx
    def:  cx_11 = PHI(cx_7, cx_17)
    uses: branch cx_11 == 0x0000 l0C00_001B
          cx_17 = cx_11 - 0x0001
          cx_43 = PHI(cx_11, cx_17)
es_12: orig: es
    def:  es_12 = PHI(es_5, es_12)
    uses: use es_12
di_13: orig: di
    def:  di_13 = PHI(di_6, di_16)
    uses: SCZO_15 = cond(0x00 - Mem0[ds:di_13:byte])
          di_16 = di_13 + 0x0001
          di_26 = PHI(di_13, di_16)
          branch 0x00 != Mem0[ds:di_13:byte] l0C00_0019
Mem14: orig: Mem0
    def:  Mem14 = PHI(Mem0, Mem14)
SCZO_15: orig: SCZO
    def:  SCZO_15 = cond(0x00 - Mem0[ds:di_13:byte])
    uses: Z_19 = PHI(SZO_9, SCZO_15)
          Z_18 = PHI(Z_19, SCZO_15)
di_16: orig: di
    def:  di_16 = di_13 + 0x0001
    uses: di_26 = PHI(di_13, di_16)
          di_13 = PHI(di_6, di_16)
cx_17: orig: cx
    def:  cx_17 = cx_11 - 0x0001
    uses: cx_11 = PHI(cx_7, cx_17)
          cx_43 = PHI(cx_11, cx_17)
Z_18: orig: Z
    def:  Z_18 = PHI(Z_19, SCZO_15)
    uses: branch Z_18 l0C00_002D
Z_19: orig: Z
    def:  Z_19 = PHI(SZO_9, SCZO_15)
    uses: Z_18 = PHI(Z_19, SCZO_15)
bx_20: orig: bx
    def:  bx_20 = 0x0000
    uses: bx_41 = PHI(bx_37, bx_20)
cl_21: orig: cl
    def:  cl_21 = 0x00
    uses: cx_44 = DPB(cx_43, cl_21, 0) (alias)
SZO_22: orig: SZO
    def:  SZO_22 = cond(0x00)
    uses: S_49 = PHI(SCZO_38, SZO_22)
          Z_51 = PHI(SCZO_38, SZO_22)
          O_52 = PHI(SCZO_38, SZO_22)
C_23: orig: C
    def:  C_23 = false
    uses: C_50 = PHI(SCZO_38, C_23)
ds_24: orig: ds
    def:  ds_24 = PHI(ds, ds_25)
    uses: ah_28 = Mem0[ds_24:di_26 + 0x0001:byte]
          use ds_24
ds_25: orig: ds
    def:  ds_25 = PHI(ds, ds_25)
    uses: ds_24 = PHI(ds, ds_25)
di_26: orig: di
    def:  di_26 = PHI(di_13, di_16)
    uses: ah_28 = Mem0[ds_24:di_26 + 0x0001:byte]
          bx_37 = di_26 - 0x7E03
          use di_26
Mem27: orig: Mem0
    def:  Mem27 = PHI(Mem14, Mem14)
ah_28: orig: ah
    def:  ah_28 = Mem0[ds_24:di_26 + 0x0001:byte]
    uses: ax_33 = DPB(ax_29, ah_28, 8) (alias)
ax_29: orig: ax
    def:  ax_29 = PHI(ax_32, ax_30)
    uses: ax_33 = DPB(ax_29, ah_28, 8) (alias)
          ax_40 = PHI(ax_33, ax_29)
ax_30: orig: ax
    def:  ax_30 = PHI(ax_32, ax_30)
    uses: ax_29 = PHI(ax_32, ax_30)
ax:ax
    def:  def ax
    uses: ax_32 = DPB(ax, 0x00, 0) (alias)
ax_32: orig: ax
    def:  ax_32 = DPB(ax, 0x00, 0) (alias)
    uses: ax_29 = PHI(ax_32, ax_30)
ax_33: orig: ax
    def:  ax_33 = DPB(ax_29, ah_28, 8) (alias)
    uses: cx_34 = __bsr(ax_33)
          ax_40 = PHI(ax_33, ax_29)
cx_34: orig: cx
    def:  cx_34 = __bsr(ax_33)
    uses: cx_35 = cx_34 - 0x0008
cx_35: orig: cx
    def:  cx_35 = cx_34 - 0x0008
    uses: cx_42 = PHI(cx_35, cx_44)
bx_36: orig: bx
bx_37: orig: bx
    def:  bx_37 = di_26 - 0x7E03
    uses: SCZO_38 = cond(bx_37)
          return bx_37
          bx_41 = PHI(bx_37, bx_20)
SCZO_38: orig: SCZO
    def:  SCZO_38 = cond(bx_37)
    uses: S_49 = PHI(SCZO_38, SZO_22)
          C_50 = PHI(SCZO_38, C_23)
          Z_51 = PHI(SCZO_38, SZO_22)
          O_52 = PHI(SCZO_38, SZO_22)
Mem0:Mem
    def:  def Mem0
    uses: SCZO_15 = cond(0x00 - Mem0[ds:di_13:byte])
          ah_28 = Mem0[ds_24:di_26 + 0x0001:byte]
          branch 0x00 != Mem0[ds:di_13:byte] l0C00_0019
ax_40: orig: ax
    def:  ax_40 = PHI(ax_33, ax_29)
    uses: use ax_40
bx_41: orig: bx
    def:  bx_41 = PHI(bx_37, bx_20)
    uses: use bx_41
cx_42: orig: cx
    def:  cx_42 = PHI(cx_35, cx_44)
    uses: use cx_42
cx_43: orig: cx
    def:  cx_43 = PHI(cx_11, cx_17)
    uses: cx_44 = DPB(cx_43, cl_21, 0) (alias)
cx_44: orig: cx
    def:  cx_44 = DPB(cx_43, cl_21, 0) (alias)
    uses: cx_42 = PHI(cx_35, cx_44)
S_49: orig: S
    def:  S_49 = PHI(SCZO_38, SZO_22)
    uses: use C_50 | O_52 | S_49 | Z_51
C_50: orig: C
    def:  C_50 = PHI(SCZO_38, C_23)
    uses: use C_50 | O_52 | S_49 | Z_51
Z_51: orig: Z
    def:  Z_51 = PHI(SCZO_38, SZO_22)
    uses: use C_50 | O_52 | S_49 | Z_51
O_52: orig: O
    def:  O_52 = PHI(SCZO_38, SZO_22)
    uses: use C_50 | O_52 | S_49 | Z_51
sp_54: orig: sp
    def:  sp_54 = PHI(sp_2, sp_55)
    uses: use sp_54
sp_55: orig: sp
    def:  sp_55 = PHI(sp_2, sp_55)
    uses: sp_54 = PHI(sp_2, sp_55)
// fn0C00_000C
// Return size: 0
word16 fn0C00_000C(selector ds)
fn0C00_000C_entry:
	def fp
	def ds
	def ax
	def Mem0
	// succ:  l0C00_000C
l0C00_000C:
	di_7 = 0x7E0F
	cx_8 = 0x000C
	ax_38 = DPB(ax, 0x00, 0) (alias)
	SZO_10 = cond(0x00)
	Z_23 = SLICE(SZO_10, bool, 2) (alias)
	// succ:  l0C00_0019
l0C00_0019:
	ax_36 = PHI(ax_38, ax_39)
	Z_22 = PHI(Z_23, Z_20)
	di_15 = PHI(di_7, di_18)
	ax_39 = DPB(ax_36, 0x00, 0) (alias)
	ax_40 = DPB(ax_36, 0x00, 0) (alias)
	cx_12 = PHI(cx_8, cx_19)
	branch cx_12 == 0x0000 l0C00_001B
	// succ:  l0C00_0019_1 l0C00_001B
l0C00_0019_1:
	SCZO_17 = cond(0x00 - Mem0[ds:di_15:byte])
	Z_20 = SLICE(SCZO_17, bool, 2) (alias)
	di_18 = di_15 + 0x0001
	cx_19 = cx_12 - 0x0001
	branch 0x00 != Mem0[ds:di_15:byte] l0C00_0019
	// succ:  l0C00_001B l0C00_0019
l0C00_001B:
	ax_35 = PHI(ax_40, ax_39)
	di_32 = PHI(di_15, di_18)
	Z_21 = PHI(Z_22, Z_20)
	branch Z_21 l0C00_002D
	// succ:  l0C00_001D l0C00_002D
l0C00_001D:
	ah_28 = Mem0[ds_24:di_26 + 0x0001:byte]
	ax_33 = DPB(ax_29, ah_28, 8) (alias)
	cx_34 = __bsr(ax_33)
	cx_35 = cx_34 - 0x0008
	bx_37 = di_26 - 0x7E03
	SCZO_38 = cond(bx_37)
	return bx_37
	// succ:  fn0C00_000C_exit
l0C00_002D:
	bx_20 = 0x0000
	cl_21 = 0x00
	cx_44 = DPB(cx_43, cl_21, 0) (alias)
	SZO_22 = cond(0x00)
	C_23 = false
	return 0x0000
	// succ:  fn0C00_000C_exit
fn0C00_000C_exit:
	O_52 = PHI(SCZO_38, SZO_22)
	Z_51 = PHI(SCZO_38, SZO_22)
	C_50 = PHI(SCZO_38, C_23)
	S_49 = PHI(SCZO_38, SZO_22)
	cx_42 = PHI(cx_35, cx_44)
	bx_41 = PHI(bx_37, bx_20)
	ax_40 = PHI(ax_33, ax_29)
	use ax_40
	use bx_41
	use cx_42
	use di_26
	use ds_24
	use es_12
	use C_50 | O_52 | S_49 | Z_51
	use sp_54

